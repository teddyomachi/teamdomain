/*
 * File: app/view/SearchDsp.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.SearchDspLogin', {
	extend: 'Ext.tab.Panel',
	alias: 'widget.searchdsplogin',

	id: 'searchDsp',
	title: 'フォルダ検索結果',
	activeTab: 0,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'panel',
					id: 'listDspS',
					layout: {
						type: 'fit'
					},
					title: 'List表示',
					items: [
						{
							xtype: 'gridpanel',
							id: 'searchedListGridPanel',
							autoScroll: true,
							store: 'FileDataStoreS',
							viewConfig: {
								emptyText: 'データがありません'
							},
							columns: [
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										if (record.data.file_type === 'folder') {
											return '<img src="data/small_icon/folder.png" />';
										} else {
											return '<img src="data/small_icon/file.png" />';
										}
									},
									width: 25,
									dataIndex: 'type',
									text: 'TP'
								},
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										if (record.data.lock === '1') {
											return '<img src="data/small_icon/my_locked.png" />';
										} else if (record.data.lock == '2') {
											return '<img src="data/small_icon/locked.png" />';
											/*
											} else if (record.data.lock == '4') {
											return '<img src="data/small_icon/sco.png" />';
											} else if (record.data.lock == '8') {
											return '<img src="data/small_icon/eco.png" />';
											*/
										} else {
											return;
										}
									},
									hidden: true,
									itemId: 'LC',
									width: 25,
									dataIndex: 'lc',
									hideable: false,
									text: 'ST'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									width: 61,
									dataIndex: 'name_lc_by',
									hideable: false,
									text: '操作者名'
								},
								{
									xtype: 'gridcolumn',
									minWidth: 150,
									width: 150,
									dataIndex: 'file_name',
									text: '名前',
									flex: 1
								},
								{
									xtype: 'gridcolumn',
									width: 50,
									dataIndex: 'file_type',
//									dataIndex: 't_file_type',
									text: '種類'
								},
								{
									xtype: 'numbercolumn',
									width: 30,
									align: 'right',
									dataIndex: 'file_version',
									text: 'Ver',
									format: '0'
								},
								{
									xtype: 'gridcolumn',
                                                                        width: 100,
									align: 'right',
                                                                        renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                                          var file_size      = record.data.file_size;
                                                                          var file_type      = record.data.file_type;
                                                                          if (file_type == "folder") {
                                                                            return "-";
                                                                          } else if (file_size < 1024) {
                                                                            return "1 KB";
                                                                          } else if (file_size < 1048576 ){
                                                                            return (Math.round(file_size / 1024)) + " KB";
                                                                          } else {
                                                                            return (Math.round(file_size / 1024 / 1024 )) + " MB";
                                                                          }
									},
									dataIndex: 'file_size',
									text: 'サイズ'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									width: 100,
									dataIndex: 'keyword',
									hideable: false,
									text: 'キーワード'
								},
								{
									xtype: 'gridcolumn',
									width: 180,
									dataIndex: 'description',
									text: '説明'
								},
								{
									xtype: 'datecolumn',
									width: 140,
									dataIndex: 'created_at',
									text: '作成日',
									format: 'Y-m-d H:i:s'
								},
								{
									xtype: 'gridcolumn',
									width: 80,
									dataIndex: 'creator',
									text: '作成者'
								},
								{
									xtype: 'datecolumn',
									width: 140,
									dataIndex: 'updated_at',
									text: '更新日',
									format: 'Y-m-d H:i:s'
								},
								{
									xtype: 'gridcolumn',
									width: 80,
									dataIndex: 'modifier',
									text: '更新者'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									width: 250,
									dataIndex: 'url',
									hideable: false,
									text: 'URL'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									width: 80,
									dataIndex: 'owner',
									text: '所有者'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									width: 25,
									dataIndex: 'ownership',
									text: '所有権'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									width: 25,
									dataIndex: 'check',
									hideable: false,
									text: 'チェックイン'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									dataIndex: 'thumnail_image',
									hideable: false,
									text: 'image'
								}
							],
							dockedItems: [
								{
									xtype: 'pagingtoolbar',
									dock: 'bottom',
									id: 'filesS_list',
									displayInfo: true,
									store: 'FileDataStoreS'
								}
							],
							selModel: Ext.create('Ext.selection.RowModel', {
								mode: 'SINGLE'
							}),
							listeners: {
								itemcontextmenu: {
									fn: me.onSearchedListGridPanelItemContextMenu,
									scope: me
								}
							}
						}
					]
				},
				{
					xtype: 'panel',
					id: 'iconDspS',
					autoScroll: true,
					layout: {
						type: 'fit'
					},
					title: 'Icon表示',
					items: [
						{
							xtype: 'dataview',
							prepareData: function(data) {
								var lock_check = "";
								if (data.lock === 0) { lock_check = "small_icon/no_locked.png";}
								if (data.lock === 1) { lock_check = "small_icon/my_locked.png";}
								if (data.lock === 2) { lock_check = "small_icon/locked.png";}
								if (data.lock === 4) { lock_check = "small_icon/sco.png";}
								if (data.lock === 8) { lock_check = "small_icon/eco.png";}

								Ext.apply(data, {
									shortName: Ext.util.Format.ellipsis(data.file_name, 20),
									lock_check_img: lock_check
								});

								return data;
							},
							id: 'iconViewS',
							tpl: [
								'<tpl for=".">',
								'	<div class="icon-wrapS">',
								'		<img src="{icon_image}" width="64" height="64"/>',
								'		<img src="data/{lock_check_img}" /><br/>',
								'		<span class="each_name">{shortName}<br/>',
								'		<!--{updated_at:date("Y-m-d H:i:s")}--></span>',
								'	</div>',
								'</tpl>',
								'<div class="x-clear"></div>'
							],
							emptyText: 'データがありません',
							itemSelector: 'div.icon-wrapS',
							multiSelect: true,
							overItemCls: 'x-item-over',
							singleSelect: true,
							store: 'FileDataStoreS',
							trackOver: true,
							listeners: {
								itemdblclick: {
									fn: me.onIconViewSItemDblClick,
									scope: me
								},
								itemcontextmenu: {
									fn: me.onIconViewSItemContextMenu,
									scope: me
								}
							}
						}
					],
					dockedItems: [
						{
							xtype: 'pagingtoolbar',
							dock: 'bottom',
							id: 'filesS_icon',
							displayInfo: true,
							store: 'FileDataStoreS'
						}
					]
				},
				{
					xtype: 'tabpanel',
					hidden: false,
					id: 'thumbDspS',
					title: 'Thumbnail表示',
					activeTab: 0,
					items: [
						{
							xtype: 'panel',
							id: 'thumbBlockS',
							autoScroll: true,
							layout: {
								type: 'fit'
							},
							title: 'ブロック表示',
							items: [
								{
									xtype: 'dataview',
									prepareData: function(data) {
										var lock_check = "";
										if (data.lock === 0) { lock_check = "small_icon/no_locked.png";}
										if (data.lock === 1) { lock_check = "small_icon/my_locked.png";}
										if (data.lock === 2) { lock_check = "small_icon/locked.png";}
										if (data.lock === 4) { lock_check = "small_icon/sco.png";}
										if (data.lock === 8) { lock_check = "small_icon/eco.png";}

										var fileSizeUpper = data.file_size_upper;
										var fileSize      = data.file_size;
										var size          = fileSizeUpper * Math.pow(2, 31) + fileSize;
										var rounded_size;

										if (size === "" || size === 0) {
											rounded_size = "-";
										} else if (size < 1024) {
											rounded_size = size + " B";
										} else if (size < 1048576) {
											rounded_size = (Math.round(size / 1024)) + " KB";
										} else if (size < 1073741824) {
											rounded_size = (Math.round(((size*10) / 1048576))/10) + " MB";
										} else if (size < 1099511627776) {
											rounded_size = (Math.round(((size*100) / 1073741824))/100) + " GB";
										} else if (size < 1125899906842624) {
											rounded_size = (Math.round(((size*100) / 1099511627776))/100) + " TB";
										} else {
											rounded_size = (Math.round(((size*100) / 1125899906842624))/100) + " PB";
										}

										Ext.apply(data, {
											shortName: Ext.util.Format.ellipsis(data.file_name, 20),
											lock_check_img: lock_check,
											file_disp_size: rounded_size
										});

										return data;

									},
									id: 'thumbnailViewSB',
									tpl: [
										'<tpl for=".">',
										'	<div class="thumb-wrapSB">',
										'		<tpl>',
										'			<tpl if="file_type == \'m4v\'">',
										'					<video class="each-block" controls width="200px" height="140px">',
										'						<source src="{thumbnail_image}" type=\'video/mp4; codecs="avc1.42E01E, mp4a.40.2"\' />',
										'						<p>動画を再生するには<br/>videoタグをサポートした<br/>ブラウザが必要です。</p>',
										'					</video>',
										'			</tpl>',
										'			<tpl if="file_type == \'ogg\'">',
										'					<video class="each-block" controls width="200px" height="140px">',
										'						<source src="{thumbnail_image}" type=\'video/ogg; codecs="theora, vorbis"\' />',
										'						<p>動画を再生するには<br/>videoタグをサポートした<br/>ブラウザが必要です。</p>',
										'					</video>',
										'			</tpl>',
										'			<tpl if="file_type != \'m4v\' && file_type != \'ogg\'">',
										'					<span class="icon-block">',
										'						<img src="{thumbnail_image}" style="max-width:200px;max-height: 138px" />',
										'					</span><br/>',
										'			</tpl>',
										'		</tpl>',
										'		<caption>',
										'			<ul>',
										'				<li>タイトル: {title}</li>',
										'				<li>ファイル名: {file_name}</li>',
										'				<li>サイズ: {file_disp_size}</li>',
										'				<li>更新日時: {updated_at:date("Y-m-d H:i:s")} <img src="data/{lock_check_img}" /></li>',
										'			</ul>',
										'		</caption>',
										'	</div>',
										'</tpl>',
										'<div class="x-clear"></div>'
									],
									emptyText: 'データがありません',
									itemSelector: 'div.thumb-wrapSB',
									multiSelect: true,
									overItemCls: 'x-item-over',
									singleSelect: true,
									store: 'FileDataStoreS',
									trackOver: true,
									listeners: {
										itemdblclick: {
											fn: me.onThumbnailViewSBItemDblClick,
											scope: me
										},
										itemcontextmenu: {
											fn: me.onThumbnailViewSBItemContextMenu,
											scope: me
										}
									}
								}
							],
							dockedItems: [
								{
									xtype: 'pagingtoolbar',
									dock: 'bottom',
									id: 'filesS_thumbBlock',
									displayInfo: true,
									store: 'FileDataStoreS'
								}
							]
						},
						{
							xtype: 'panel',
							id: 'thumbListS',
							autoScroll: true,
							layout: {
								type: 'fit'
							},
							title: 'リスト表示',
							items: [
								{
									xtype: 'dataview',
									prepareData: function(data) {
										var lock_check = "";
										if (data.lock === 0) { lock_check = "small_icon/no_locked.png";}
										if (data.lock === 1) { lock_check = "small_icon/my_locked.png";}
										if (data.lock === 2) { lock_check = "small_icon/locked.png";}
										if (data.lock === 4) { lock_check = "small_icon/sco.png";}
										if (data.lock === 8) { lock_check = "small_icon/eco.png";}

										Ext.apply(data, {
											shortName: Ext.util.Format.ellipsis(data.file_name, 20),
											lock_check_img: lock_check
										});

										return data;
									},
									id: 'thumbnailViewSL',
									tpl: [
										'<tpl for=".">',
										'	<div class="thumb-wrapSL">',
										'		<tpl if="file_type == \'m4v\'">',
										'			<video class="each-layer" controls width="200px" height="150px">',
										'				<source src="{thumbnail_image}" type=\'video/mp4; codecs="avc1.42E01E, mp4a.40.2"\' />',
										'				<p>動画を再生するには<br/>videoタグをサポートした<br/>ブラウザが必要です。</p>',
										'			</video>',
										'		</tpl>',
										'		<tpl if="file_type == \'ogg\'">',
										'			<video class="each-layer" controls width="200px" height="150px">',
										'				<source src="{thumbnail_image}" type=\'video/ogg; codecs="theora, vorbis"\' />',
										'				<p>動画を再生するには<br/>videoタグをサポートした<br/>ブラウザが必要です。</p>',
										'			</video>',
										'		</tpl>',
										'		<tpl if="file_type != \'m4v\' && file_type != \'ogg\'">',
										'			<span class="each-layer">',
										'				<img src="{thumbnail_image}" style="max-width:200px;max-height:150px" />',
										'			</span>',
										'		</tpl>',
										'		<span class="property">',
										'			<table width="100%">',
										'				<tr><td width="100px">ファイル名: </td><td>{file_name}</td></tr>',
										'				<tr><td>ファイルタイプ: </td><td>{file_type}</td></tr>',
										'				<tr><td>サイズ: </td><td>{file_disp_size}</td></tr>',
										'				<tr><td>バージョン: </td><td>{file_version}</td></tr>',
										'				<tr><td>URL: </td><td>{url}</td></tr>',
										'				<tr><td colspan="2"><hr /></td></tr>',
										'				<tr><td>作成日時: </td><td>{created_at:date("Y-m-d H:i:s")}</td></tr>',
										'				<tr><td>作成者: </td><td>{creator}</td></tr>',
										'				<tr><td>更新日時: </td><td>{updated_at:date("Y-m-d H:i:s")}</td></tr>',
										'				<tr><td>更新者: </td><td>{modifier}</td></tr>',
										'				<tr><td>所有者: </td><td>{owner}</td></tr>',
										'				<tr><td>所有権: </td><td>{ownership}</td></tr>',
										'				<tr><td>ファイルロック:</td><td><img src="data/{lock_check_img}" /></td></tr>',
										'				<tr><td>アクセス権: </td><td>{access_group}</td></tr>',
										'			</table>',
										'		</span>',
										'		<span class="property">',
										'			<table width="100%">',
										'				<tr><td width="100px">タイトル: </td><td>{title}</td></tr>',
										'				<tr><td>サブタイトル: </td><td>{subtitle}</td></tr>',
										'				<tr><td>画像サイズ: </td><td>{frame_size}</td></tr>',
										'				<tr><td>再生時間:</td><td>{duration}</td></tr>',
										'				<tr><td colspan="2"><hr /></td></tr>',
										'				<tr><td>制作者: </td><td>{producer}</td></tr>',
										'				<tr><td>制作日: </td><td>{produced_date:date("Y-m-d H:i:s")}</td></tr>',
										'				<tr><td>ロケーション:</td><td>{location}</td></tr>',
										'				<tr><td>出演者:</td><td>{cast}</td></tr>',
										'				<tr><td>音楽: </td><td>{music}</td></tr>',
										'				<tr><td>著作権: </td><td>{copyright}</td></tr>',
										'				<tr><td>クライアント:</td><td>{client}</td></tr>',
										'				<tr><td colspan="2"><hr /></td></tr>',
										'				<tr><td>キーワード: </td><td>{keyword}</td></tr>',
										'				<tr><td>ノート: </td><td>{description}</td></tr>',
										'			</table>',
										'		</span><br clear="both"/>',
										'	</div>',
										'</tpl>',
										'<div class="x-clear"></div>'
									],
									emptyText: 'データがありません',
									itemSelector: 'div.thumb-wrapSL',
									multiSelect: true,
									overItemCls: 'x-item-over',
									singleSelect: true,
									store: 'FileDataStoreS',
									trackOver: true,
									listeners: {
										itemdblclick: {
											fn: me.onThumbnailViewSLItemDblClick,
											scope: me
										},
										itemcontextmenu: {
											fn: me.onThumbnailViewSLItemContextMenu,
											scope: me
										}
									}
								}
							],
							dockedItems: [
								{
									xtype: 'pagingtoolbar',
									dock: 'bottom',
									id: 'filesS_thumbList',
									displayInfo: true,
									store: 'FileDataStoreS'
								}
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onSearchedListGridPanelItemContextMenu: function(dataview, record, item, index, e, eOpts) {
		tree_context_menu = new Ext.menu.Menu({
			items: [
			displayProperty,
			//displayPropertyExpanded,
			//displayPropertyDetails,
			//new Ext.menu.Separator(),
			openFile,
			//copyFile,
			//moveFile,
			//deleteFile,
			//new Ext.menu.Separator(),
			//checkoutFile,
			//lockFile,
			//releaseFileOwnership,
			//settingFileAccessRight,
			//new Ext.menu.Separator(),
			//sendingFile,
			//new Ext.menu.Separator(),
			//searchFiles,
			//new Ext.menu.Separator(),
			//openTrashbox
			]
		});

		tree_context_menu.showAt(e.getXY());
		return false;

	},

	onIconViewSItemDblClick: function(dataview, record, item, index, e, eOpts) {
		var dataX = record.data;

		var readableRight  = dataX.file_readable_status;
		var writableRight  = dataX.file_writable_status;

		var editableStatus = dataX.lock;
		var openStatus     = dataX.open_status;

		var showFileName   = dataX.file_name;
		var fileType       = dataX.file_type;

		var contLocation   = dataX.cont_location;

		var readChecked  = record.data.folder_readable_status;
		var writeChecked = record.data.folder_writable_status;

		doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

	},

	onIconViewSItemContextMenu: function(dataview, record, item, index, e, eOpts) {
		tree_context_menu = new Ext.menu.Menu({
			items: [
			displayProperty,
			//displayPropertyExpanded,
			//displayPropertyDetails,
			//new Ext.menu.Separator(),
			openFile,
			//copyFile,
			//moveFile,
			//deleteFile,
			//new Ext.menu.Separator(),
			//checkoutFile,
			//lockFile,
			//releaseFileOwnership,
			//settingFileAccessRight,
			//new Ext.menu.Separator(),
			//sendingFile,
			//new Ext.menu.Separator(),
			//searchFiles,
			//new Ext.menu.Separator(),
			//openTrashbox
			]
		});

		tree_context_menu.showAt(e.getXY());
		return false;

	},

	onThumbnailViewSBItemDblClick: function(dataview, record, item, index, e, eOpts) {
		var dataX = record.data;

		var readableRight  = dataX.file_readable_status;
		var writableRight  = dataX.file_writable_status;

		var editableStatus = dataX.lock;
		var openStatus     = dataX.open_status;

		var showFileName   = dataX.file_name;
		var fileType       = dataX.file_type;

		var contLocation   = dataX.cont_location;

		var readChecked  = record.data.folder_readable_status;
		var writeChecked = record.data.folder_writable_status;

		doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

	},

	onThumbnailViewSBItemContextMenu: function(dataview, record, item, index, e, eOpts) {
		tree_context_menu = new Ext.menu.Menu({
			items: [
			displayProperty,
			//displayPropertyExpanded,
			//displayPropertyDetails,
			//new Ext.menu.Separator(),
			openFile,
			//copyFile,
			//moveFile,
			//deleteFile,
			//new Ext.menu.Separator(),
			//checkoutFile,
			//lockFile,
			//releaseFileOwnership,
			//settingFileAccessRight,
			//new Ext.menu.Separator(),
			//sendingFile,
			//new Ext.menu.Separator(),
			//searchFiles,
			//new Ext.menu.Separator(),
			//openTrashbox
			]
		});

		tree_context_menu.showAt(e.getXY());
		return false;

	},

	onThumbnailViewSLItemDblClick: function(dataview, record, item, index, e, eOpts) {
		var dataX = record.data;

		var readableRight  = dataX.file_readable_status;
		var writableRight  = dataX.file_writable_status;

		var editableStatus = dataX.lock;
		var openStatus     = dataX.open_status;

		var showFileName   = dataX.file_name;
		var fileType       = dataX.file_type;

		var contLocation   = dataX.cont_location;

		var readChecked  = record.data.folder_readable_status;
		var writeChecked = record.data.folder_writable_status;

		doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

	},

	onThumbnailViewSLItemContextMenu: function(dataview, record, item, index, e, eOpts) {
		tree_context_menu = new Ext.menu.Menu({
			items: [
			displayProperty,
			//displayPropertyExpanded,
			//displayPropertyDetails,
			//new Ext.menu.Separator(),
			openFile,
			//copyFile,
			//moveFile,
			//deleteFile,
			//new Ext.menu.Separator(),
			//checkoutFile,
			//lockFile,
			//releaseFileOwnership,
			//settingFileAccessRight,
			//new Ext.menu.Separator(),
			//sendingFile,
			//new Ext.menu.Separator(),
			//searchFiles,
			//new Ext.menu.Separator(),
			//openTrashbox
			]
		});

		tree_context_menu.showAt(e.getXY());
		return false;

	}

});
