/*
 * File: app/view/DomainCard.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BoomBoxMobile.view.DomainCard', {
	extend: 'Ext.Container',
	alias: 'widget.domaincard',

	config: {
		itemId: 'domainCard',
		layout: {
			type: 'fit'
		},
		items: [
			{
				xtype: 'titlebar',
				docked: 'top',
				title: 'BOOMBOX Mobile',
				items: [
					{
						xtype: 'button',
						align: 'right',
						itemId: 'logoutBtn',
						ui: 'decline-round',
						text: 'ログアウト'
					}
				]
			},
			{
				xtype: 'list',
				itemId: 'domainList',
				itemTpl: [
					'<div>{domain_name}</div>'
				],
				store: 'DomainStore',
				onItemDisclosure: true,
				striped: true
			},
			{
				xtype: 'toolbar',
				docked: 'bottom',
				items: [
					{
						xtype: 'label',
						docked: 'right',
						html: '(c) 2018 MAKEWAVE JAPAN Co.,Ltd.All rights reserved.',
						margin: 10
					}
				]
			}
		],
		listeners: [
			{
				fn: 'onMybutton1Tap',
				event: 'tap',
				delegate: '#logoutBtn'
			},
			{
				fn: 'onDomainListShow',
				event: 'show',
				delegate: '#domainList'
			},
			{
				fn: 'onDomainListItemSingletap',
				event: 'itemsingletap',
				delegate: '#domainList'
			}
		]
	},

	onMybutton1Tap: function(button, e, eOpts) {
		targetCard = Ext.ComponentQuery.query('#viewport')[0];
		targetCard.setActiveItem(0).show();

	},

	onDomainListShow: function(component, eOpts) {
		CurrentNode = [];
	},

	onDomainListItemSingletap: function(dataview, index, target, record, e, eOpts) {
		CurrentParent = record.data.hash_key;

		var thisData = Ext.apply({session_id: SessionId}, {domain: record.data});
		var sendingData = Ext.apply({request_type: "change_domain_m"}, thisData);

		//送信処理
		Ext.Ajax.request({
			//change here
			//url: 'php/request.php',
			url: 'tdx/updatedata.tdx',
			jsonData: sendingData,
			success: handleSuccess,
			failure: handleFailure
		});


		// Ajax通信成功時の処理
		function handleSuccess(response) {
			var obj = Ext.decode(response.responseText);
			var request_success = obj.success;
			var request_message = obj.message;

			if (request_success === true) {
				targetCard = Ext.ComponentQuery.query('#viewport')[0];
				targetCard.setActiveItem(2).show();
				Ext.getStore('FileStore').load();
				FolderNode = 0;
				CurrentNode[FolderNode] = CurrentParent;
				var ptBtn = Ext.ComponentQuery.query('#parentBtn')[0];
				ptBtn.hide();
				//console.log(FolderNode);
				//console.log(CurrentParent);
				//console.log(CurrentNode[FolderNode]);
			} else {
				Ext.Msg.alert(
				'ドメインを選択できませんでした',
				request_message,
				Ext.emptyFn
				);
				return;
			}
		}

		// Ajax通信失敗時の処理
		function handleFailure(response) {
			Ext.Msg.show({
				title:'Network ERROR',
				msg: 'Error Message',
				buttons: Ext.Msg.OK
			});
			return;
		}

	}

});