/*
 * File: app/view/workingWin.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.workingWin', {
	extend: 'Ext.window.Window',

	height: 470,
	width: 737,
	layout: {
		type: 'fit'
	},
	title: 'ロックファイル一覧',
        constrain: true,
	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'form',
					id: 'workingForm',
					layout: {
						type: 'fit'
					},
					items: [
						{
							xtype: 'gridpanel',
							id: 'workingList',
							itemId: 'workingList',
							autoScroll: true,
							store: 'workingFileStore',
							columns: [
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										if (record.data.lock === 1) {
											return '<img src="data/small_icon/my_locked.png" />';
										} else if (record.data.lock == 2) {
											return '<img src="data/small_icon/locked.png" />';
											/*
											} else if (record.data.lock == 4) {
											return '<img src="data/small_icon/sco.png" />';
											} else if (record.data.lock == 8) {
											return '<img src="data/small_icon/eco.png" />';
											*/
										} else {
											return;
										}
									},
									width: 35,
									dataIndex: 'lock',
									text: 'ST'
								},
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										if (record.data.dirty === true) {
											return '*';
										} else {
											return;
										}
									},
									width: 33,
									dataIndex: 'dirty',
									text: '変更'
								},
								{
									xtype: 'gridcolumn',
									width: 165,
									dataIndex: 'file_name',
									text: '名前'
								},
								{
									xtype: 'gridcolumn',
									width: 37,
									dataIndex: 'file_type',
//									dataIndex: 't_file_type',
									text: '種類'
								},
								{
									xtype: 'numbercolumn',
									width: 32,
									align: 'right',
									dataIndex: 'file_version',
									text: 'バージョン',
									format: '0'
								},
								{
									xtype: 'numbercolumn',
									width: 69,
									align: 'right',
									dataIndex: 'file_size',
									text: 'サイズ (MB)'
								},
								{
									xtype: 'gridcolumn',
									width: 120,
									dataIndex: 'keyword',
									text: 'キーワード'
								},
								{
									xtype: 'gridcolumn',
									width: 150,
									dataIndex: 'description',
									text: '説明'
								},
								{
									xtype: 'datecolumn',
									width: 120,
									dataIndex: 'created_at',
									text: '作成日',
									format: 'Y-m-d H:i:s'
								},
								{
									xtype: 'gridcolumn',
									width: 80,
									dataIndex: 'creator',
									text: '作成者'
								},
								{
									xtype: 'datecolumn',
									width: 120,
									dataIndex: 'updated_at',
									text: '更新日',
									format: 'Y-m-d H:i:s'
								},
								{
									xtype: 'gridcolumn',
									width: 80,
									dataIndex: 'modifier',
									text: '更新者'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'url',
									text: 'URL'
								}
							],
							selModel: Ext.create('Ext.selection.CheckboxModel', {

							})
						}
					],
					dockedItems: [
						{
							xtype: 'toolbar',
							dock: 'bottom',
							margin: 5,
							ui: 'footer',
							items: [
								{
									xtype: 'tbfill'
								},
								{
									xtype: 'button',
									hidden: true,
									width: 120,
									text: 'チェックイン/更新',
									tooltip: {
										html: 'ファイルをチェックインする場合ないし更新する場合にはこのボタンを押して下さい。'
									},
									listeners: {
										click: {
											fn: me.onButtonClick2,
											scope: me
										}
									}
								},
								{
									xtype: 'button',
									hidden: true,
									width: 150,
									text: 'チェックアウトキャンセル',
									tooltip: {
										html: 'ファイルのチェックアウトをキャンセルする場合にはこのボタンを押して下さい。<br/>ファイルをチエックアウト前の状態に戻します。'
									},
									listeners: {
										click: {
											fn: me.onButtonClick3,
											scope: me
										}
									}
								},
								{
									xtype: 'button',
									width: 100,
									text: 'ロック解除',
									tooltip: {
										html: 'ファイルのロックを解除する場合にはこのボタンを押して下さい。<br/>ファイルをロック前の状態に戻します。'
									},
									listeners: {
										click: {
											fn: me.onButtonClick1,
											scope: me
										}
									}
								},
								{
									xtype: 'button',
									width: 100,
									text: 'キャンセル',
									tooltip: {
										html: 'このウィンドウを閉じる場合には、このボタンを押して下さい。'
									},
									listeners: {
										click: {
											fn: me.onButtonClick,
											scope: me
										}
									}
								}
							]
						}
					]
				}
			],
			listeners: {
				afterrender: {
					fn: me.onWindowAfterRender,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onButtonClick2: function(button, e, eOpts) {
		var componentM = Ext.getCmp('workingForm');
		var grid = componentM.down('#workingList');

		var recordsX = grid.getSelectionModel().getSelection(), data = [];

		if (Ext.isEmpty(recordsX)) {
			Ext.Msg.show({
				title:'ファイル選択',
				msg: 'ファイルを選択してください',
				icon: Ext.Msg.ERROR,
				buttons: Ext.Msg.OK
			});
			return;
		}

		var counterX = 0;
		for (var i = 0; i < recordsX.length; i++) {
			if (recordsX[i].data.lock === 1 && recordsX[i].data.dirty === true) {
				data.push(recordsX[i].data);
				counterX = counterX + 1;
			}
		}

		if (counterX >= 1) {
			var dataX = Ext.apply({session_id: this_session_id}, data);
			dataX = Ext.apply({request_type: "unlock_refresh_files"}, dataX);
			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				jsonData: dataX,
				success: handleSuccessX,
				failure: handleFailureX
			});
			data  = [];
			dataX = "";
			recordsX = "";
			counterX = 0;
		}

		var recordsY = grid.getSelectionModel().getSelection();
		var counterY = 0;
		for (var j = 0; j < recordsY.length; j++) {
			if (recordsY[j].data.lock === 4 || recordsY[j].data.lock === 8) {
				data.push(recordsY[j].data);
				counterY = counterY + 1;
			}
		}

		if (counterY >= 1) {
			var dataY = Ext.apply({session_id: this_session_id}, data);
			dataY = Ext.apply({request_type: "checkin_refresh_files"}, dataY);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				jsonData: dataY,
				success: handleSuccessY,
				failure: handleFailureY
			});
			data  = [];
			dataY = "";
			recordsY = "";
			counterY = 0;
		}

		function handleSuccessX(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの更新失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				Ext.getStore('workingFileStore').load();
				Ext.getStore('FileDataStoreA').load();
				Ext.getStore('FileDataStoreB').load();
			}
			return;
		}

		function handleFailureX(response) {
			Ext.Msg.show({
				title:'ファイルの更新失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}

		function handleSuccessY(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルのチェックイン失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				Ext.getStore('workingFileStore').load();
				Ext.getStore('FileDataStoreA').load();
				Ext.getStore('FileDataStoreB').load();
			}
			return;
		}

		function handleFailureY(response) {
			Ext.Msg.show({
				title:'ファイルのチェックイン失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onButtonClick3: function(button, e, eOpts) {
		var componentM = Ext.getCmp('workingForm');
		var grid = componentM.down('#workingList');

		var records = grid.getSelectionModel().getSelection(), data = [];

		if (Ext.isEmpty(records)) {
			Ext.Msg.show({
				title:'ファイル選択',
				msg: 'ファイルを選択してください',
				icon: Ext.Msg.ERROR,
				buttons: Ext.Msg.OK
			});
			return;
		}

		var counterX = 0;
		for (var i = 0; i < records.length; i++) {
			if (records[i].data.lock === 4 || records[i].data.lock === 8) {
				data.push(records[i].data);
				counterX = counterX + 1;
			}
		}

		if (counterX >= 1) {
			var dataX = Ext.apply({session_id: this_session_id}, data);
			dataX = Ext.apply({request_type: "cancel_checkout_files"}, dataX);
			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				jsonData: dataX,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'チェックアウトキャンセル失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				Ext.getStore('workingFileStore').load();
				Ext.getStore('FileDataStoreA').load();
				Ext.getStore('FileDataStoreB').load();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'チェックアウトキャンセル失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onButtonClick1: function(button, e, eOpts) {
		var grid = Ext.ComponentQuery.query('#workingList')[0];

		var records = grid.getSelectionModel().getSelection(), data = [];

		if (records.length === 0) {
			Ext.Msg.show({
				title:'ファイル選択',
				msg: 'ファイルを選択してください',
				icon: Ext.Msg.ERROR,
				buttons: Ext.Msg.OK
			});
			return;
		}


		var counterX = 0;
		for (var i = 0; i < records.length; i++) {
			if (records[i].data.lock === 1) {
				data.push(records[i].data);
				counterX = counterX + 1;
			}
		}


		if (counterX >= 1) {
			var dataX = Ext.apply({session_id: this_session_id}, {data: data});
			dataX = Ext.apply({request_type: "unlock_files"}, dataX);
			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				jsonData: dataX,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルロック解除失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				Ext.getStore('workingFileStore').load();
				Ext.getStore('FileDataStoreA').load();
				Ext.getStore('FileDataStoreB').load();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルロック解除失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}

	},

	onButtonClick: function(button, e, eOpts) {
		this.close();
	},

	onWindowAfterRender: function(component, eOpts) {
		Ext.getStore('workingFileStore').load();
	}

});
