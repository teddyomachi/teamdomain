/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
//@require @packageOverrides
Ext.override(Ext.LoadMask, {
    onBeforeLoad : function() {
        var me = this,
            owner = me.ownerCt || me.floatParent,
            origin;

        if (!this.disabled) {
            if (owner.componentLayoutCounter) {
                // ロードマスク表示を制限
                if (me.store &&
                    ('FolderDataStoreA' !== me.store.storeId
                        && 'DomainDataStoreA' !== me.store.storeId
                        && 'SearchOptionStore' !== me.store.storeId)) {
                    if ('FileDataStoreA' === me.store.storeId
                            && ((owner.panel && 'listGridPanelA' === owner.panel.id && listActive)
                                    || ('thumbnailViewAB' === owner.id && thumbnailActive))) {
                        Ext.Component.prototype.show.call(me);
                    } else if ('FileDataStoreA' !== me.store.storeId) {
                        Ext.Component.prototype.show.call(me);                        
                    }
                }
            } else {
                origin = owner.afterComponentLayout;
                owner.afterComponentLayout = function() {
                    owner.afterComponentLayout = origin;
                    origin.apply(owner, arguments);
                    if(me.loading) {
                        // ロードマスク表示を制限
                        if (me.store &&
                            ('FolderDataStoreA' !== me.store.storeId
                                && 'DomainDataStoreA' !== me.store.storeId
                                && 'SearchOptionStore' !== me.store.storeId)) {
                            if ('FileDataStoreA' === me.store.storeId
                                    && ((owner.panel && 'listGridPanelA' === owner.panel.id && listActive)
                                            || ('thumbnailViewAB' === owner.id && thumbnailActive))) {
                                Ext.Component.prototype.show.call(me);
                            } else if ('FileDataStoreA' !== me.store.storeId) {
                                Ext.Component.prototype.show.call(me);                        
                            }
                        }
                    }
                };
            }
        }
    }
});

Ext.Loader.setConfig({
	enabled: true,
	paths: {
		'Ext.ux.DataView': '../ext/src/ux/DataView',
		'Ext.TeamDomain': 'js'
	}
});

Ext.application({

	requires: [
		'TeamDomain.view.MainView',
		'TeamDomain.view.DomainGridPanelA',
		'TeamDomain.view.FolderPanelA',
		'TeamDomain.view.DomainGridPanelB',
		'TeamDomain.view.FolderPanelB',
		'TeamDomain.view.GlobalMenu',
		'TeamDomain.view.DomainProperty',
		'TeamDomain.view.FolderProperty',
		'TeamDomain.view.FileProperty',
		'TeamDomain.view.SearchCondition',
		'TeamDomain.view.Trashbox',
		'TeamDomain.view.FileWholeDsp',
		'TeamDomain.view.GroupDsp',
		'TeamDomain.view.LocalMenu',
		'TeamDomain.view.workingWin',
		'TeamDomain.view.optionWin',
		'TeamDomain.view.UserDsp',
		'TeamDomain.view.PrivilegeDsp',
		'TeamDomain.view.SearchDsp',
		'TeamDomain.view.EnlargeWin',
		'TeamDomain.view.addFileAgentDsp'
	],
	models: [
		'FileData',
		'DomainData',
		'FolderData',
		'RecyclerData',
		'SearchConditionData',
		'SearchOptionData',
		'GroupData',
		'MemberData',
		'SenderData',
		'TargetFolderData',
		'OperatorData',
		'MemberManagementData',
                'ClipBoardData',
		'LocalFolderData',
                'MemberTree',
                'ArchivedData',
                'SyncedData'
        ],
	stores: [
		'FileDataStoreA',
		'DomainDataStoreA',
		'FolderDataStoreA',
		'RecyclerDataStore',
		'SearchConditionStore',
		'SearchOptionStore',
		'FileDataStoreS',
		'GroupAllStore',
		'GroupFolderStore',
		'GroupFileStore',
		'GroupCreatedStore',
		'MemberDataStore',
		'FileDataStoreB',
		'FolderDataStoreB',
		'MailSenderStore',
		'TargetFolderAT',
		/*'TargetFolderBT',*/
		'TargetFolderATFi',
		/*'TargetFolderBTFi',*/
		'workingFileStore',
		'DomainDataStoreB',
		'ActiveOperatorStore',
		'MemberManagementDataStore',
                'ClipBoardDataStore',
                'LocalFolderDataStore',
                'MemberTreeStore',
                'ArchivedFolderDataStore',
                'SyncedFolderDataStore'
	],
	views: [
		'MainView',
		'DomainGridPanelA',
		'FolderPanelA',
		'DomainGridPanelB',
		'FolderPanelB',
		'GlobalMenu',
		'DomainProperty',
		'FolderProperty',
		'FileProperty',
		'SearchCondition',
		'Trashbox',
		'FileWholeDsp',
		'GroupDsp',
		'LocalMenu',
		'workingWin',
		'optionWin',
		'UserDsp',
		'PrivilegeDsp',
		'SearchDsp',
		'EnlargeWin',
		'addFileAgentDsp',
                'createArchiveFolderDsp',
                'createSyncFolderDsp',
                'resetArchiveFolderDsp',
                'resetSyncFolderDsp'
        ],
	autoCreateViewport: true,
	name: 'TeamDomain',
	controllers: [
		'showDataProperty',
		'OpenFileAction'
	],

	launch: function() {
            Ext.require([
		'Ext.data.*',
		'Ext.util.*'//,
		//'Ext.TeamDomain.CheckFolderStatus',
		//'Ext.TeamDomain.CheckFileStatus',
		//'Ext.TeamDomain.OpenFiles'
		]);

            //ExtJs 4 bug when reloading a node that was already loaded once

            Ext.override(Ext.data.AbstractStore, {
                    // JsonAjaxプロキシ専用プロパティ
                    jsonData: undefined
            });

            Ext.override(Ext.data.Store, {
                    load: function(options) {
                        var me = this;

                        options = options || {};

                        if (Ext.isFunction(options)) {
                            options = {
                                callback: options
                            };
                        }

                        // ↓ JsonAjaxプロキシ使用時に有効となる処理
                        if (options.jsonData) {
                            me.jsonData = options.jsonData;
                        } else {
                            options.jsonData = me.jsonData;
                        }
                        // ↑ JsonAjaxプロキシ使用時に有効となる処理

                        Ext.applyIf(options, {
                            groupers: me.groupers.items,
                            page: me.currentPage,
                            start: (me.currentPage - 1) * me.pageSize,
                            limit: me.pageSize,
                            addRecords: false
                        });

                        return me.callParent([options]);
                    }
            });

            //Uncaught TypeError: Cannot call method 'indexOf' of undefined.
            //If you see this error, use a TreeStore override for the load function as shown below
            Ext.override(Ext.data.TreeStore, {
//                    // JsonAjaxプロキシ専用プロパティ
//                    jsonData: undefined,
                    load: function(options) {

                        options = options || {};
                            options.params = options.params || {};

                        var me = this,
                                node = options.node || me.tree.getRootNode(),
                                root;

                        // ↓ JsonAjaxプロキシ使用時に有効となる処理
                        if (options.jsonData) {
                            me.jsonData = options.jsonData;
                        } else {
                            options.jsonData = me.jsonData;
                        }
                        // ↑ JsonAjaxプロキシ使用時に有効となる処理

                        if (!node) {
                            node = me.setRootNode({
                                    expanded: true
                            });
                        }

                        if (me.clearOnLoad) {
                                node.removeAll(false); //Point
                        }

                        Ext.applyIf(options, {
                                node: node
                        });
                        options.params[me.nodeParam] = node ? node.getId() : 'root';

                        if (node) {
                                node.set('loading', true);
                        }

                        return me.callParent([options]);
                    }
            });

            Ext.override(Ext.data.Operation, {
                    // JsonAjaxプロキシ専用プロパティ
                    jsonData: undefined
            });

            Ext.override(Ext.toolbar.Paging, {
                    getPageData : function(){
                            var store = this.store,
                                    totalCount = store.getTotalCount();

                            var pageLimitSize = store.pageSize;
                            if(listDispSize === 'max'){
                                pageLimitSize = 100;
                            }else if(listDispSize === 'mid'){
                                pageLimitSize = 50;
                            }else if(listDispSize === 'min'){
                                pageLimitSize = 25;
                            }

                            return {
                                    total : totalCount,
                                    currentPage : store.currentPage,
                                    pageCount: (totalCount === 0) ? 1 : Math.ceil(totalCount / pageLimitSize),
                                    fromRecord: ((store.currentPage - 1) * pageLimitSize) + 1,
                                    toRecord: Math.min(store.currentPage * pageLimitSize, totalCount) 
                            };
                    }
            });

            Ext.override(Ext.grid.Scroller, {
                    onAdded: function() {
                        this.callParent(arguments);
                        var me = this;
                        if (me.scrollEl) {
                                me.mun(me.scrollEl, 'scroll', me.onElScroll, me);
                                me.mon(me.scrollEl, 'scroll', me.onElScroll, me);
                        }
                    }
            });

            //timeoutの設定が有効にならない場合の対策
            var myTimeout = 7200000;
            Ext.override(Ext.data.proxy.Ajax, { timeout: myTimeout });
            //added below on 20140531
            Ext.Ajax.timeout= 7200000; // 5 mins
            //Ext.override(Ext.form.Basic, { timeout: Ext.Ajax.timeout / 1000 });
            Ext.override(Ext.form.Basic, { timeout: Ext.Ajax.timeout });
            Ext.override(Ext.data.proxy.Server, { timeout: Ext.Ajax.timeout });
            Ext.override(Ext.data.Connection, { timeout: Ext.Ajax.timeout });


            /*
            Ext.override(Ext.tree.View, { 
            setRootNode: function(node){
            var me = this;        
            me.store.setNode(node);
            me.node = node;
            if (!me.rootVisible && me.store.autoLoad){
            node.expand();
            }
            }
            }); 
            */


            //初期状態で自動的にTreeデータを読み込むのを防ぐ方法1
            //store.setRootNode({ text:'Root', leaf:false, expended:true });

            Ext.getBody().on("contextmenu", Ext.emptyFn, null, {preventDefault: true}); 
	}

});
