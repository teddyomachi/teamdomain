/*
 * File: app/view/PropertyCard.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BoomBoxMobile.view.PropertyCard', {
	extend: 'Ext.Container',
	alias: 'widget.propertycard',

	config: {
		itemId: 'propertyCard',
		layout: {
			type: 'fit'
		},
		items: [
			{
				xtype: 'titlebar',
				docked: 'top',
				style: 'font-size:small',
				title: 'BOOMBOX Mobile',
				items: [
					{
						xtype: 'button',
						itemId: 'backBtn',
						style: 'font-size:x-small',
						ui: 'back',
						text: '戻る'
					},
					{
						xtype: 'button',
						align: 'right',
						docked: 'top',
						itemId: 'logoutBtn',
						style: 'font-size:x-small',
						ui: 'decline-round',
						text: 'ログアウト'
					}
				]
			},
			{
				xtype: 'formpanel',
				id: 'PropertyPane',
				itemId: 'propertyPane',
				margin: '0 0 20 0',
				layout: {
					type: 'vbox'
				},
				items: [
					{
						xtype: 'fieldset',
						ui: 'light',
						layout: {
							align: 'center',
							pack: 'center',
							type: 'hbox'
						},
						items: [
							{
								xtype: 'container',
								flex: 0.8,
								padding: '0 10 0 10',
								items: [
									{
										xtype: 'label',
										itemId: 'thumbnailImage',
										style: 'font-size:small'
									}
								]
							},
							{
								xtype: 'container',
								flex: 0.2,
								padding: 5,
								items: [
									{
										xtype: 'button',
										itemId: 'openFileBtn',
										ui: 'small',
										text: '開く'
									}
								]
							}
						]
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: 'ファイル名',
						name: 'file_name',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: '説明',
						name: 'description',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: 'ファイルタイプ',
						name: 'file_type',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: 'ファイルサイズ',
						name: 'file_size',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: 'バージョン',
						name: 'file_version',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: '作成日時',
						name: 'created_at',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: '作成者',
						name: 'creator',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: '更新日時',
						name: 'updated_at',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: '更新者',
						name: 'modifier',
						readOnly: true
					},
					{
						xtype: 'textfield',
						style: 'font-size:small',
						label: '所有者',
						name: 'owner',
						readOnly: true
					}
				]
			},
			{
				xtype: 'toolbar',
				docked: 'bottom',
				items: [
					{
						xtype: 'label',
						docked: 'right',
						html: '(c) 2018 MAKEWAVE JAPAN Co.,Ltd.All rights reserved.',
						margin: 10,
						style: 'font-size:xx-small'
					}
				]
			}
		],
		listeners: [
			{
				fn: 'onMybutton4Tap',
				event: 'tap',
				delegate: '#backBtn'
			},
			{
				fn: 'onMybutton3Tap',
				event: 'tap',
				delegate: '#logoutBtn'
			},
			{
				fn: 'onMybutton7Tap',
				event: 'tap',
				delegate: '#openFileBtn'
			},
			{
				fn: 'onPropertyCardShow',
				event: 'show'
			}
		]
	},

	onMybutton4Tap: function(button, e, eOpts) {
		targetCard = Ext.ComponentQuery.query('#viewport')[0];
		targetCard.setActiveItem(2).show();

	},

	onMybutton3Tap: function(button, e, eOpts) {
		targetCard = Ext.ComponentQuery.query('#viewport')[0];
		targetCard.setActiveItem(0).show();

	},

	onMybutton7Tap: function(button, e, eOpts) {
		var targetFile	= Ext.ComponentQuery.query('#fileList')[0].getLastSelected().data;
		var myFileType = targetFile.file_type.toLowerCase(); 

		switch (myFileType) {
			case 'png': MyShowability = true ; break;
			case 'jpg': MyShowability = true ; break;
			case 'jpeg': MyShowability = true ; break;
			case 'gif': MyShowability = true ; break;

			case 'pdf': MyShowability = true ; break;

			case 'mp4': MyShowability = true ; break;

			case 'xlsx': MyShowability = true ; break;
			case 'docx': MyShowability = true ; break;
			case 'pptx': MyShowability = true ; break;

			case 'xls': MyShowability = true ; break;
			case 'doc': MyShowability = true ; break;
			case 'ppt': MyShowability = true ; break;

			case 'json': MyShowability = true ; break;
			case 'conf': MyShowability = true ; break;
			case 'inc': MyShowability = true ; break;
			case 'js': MyShowability = true ; break;
			case 'css': MyShowability = true ; break;
			case 'txt': MyShowability = true ; break;
			case 'text': MyShowability = true ; break;

			default: MyShowability = false; break;
		}

		if (MyShowability === true) {
			var actionStatus = 'get_uri_m';

			var thisData = Ext.apply({session_id: SessionId}, {targetFile: targetFile});
			var sendingData = Ext.apply({request_type: actionStatus}, thisData);

			Ext.Ajax.request({
				//change here
				//url: 'php/geturi.php',
				url: 'tdx/updatedata.tdx',
				jsonData: sendingData,
				success: handleSuccess,
				failure: handleFailure
			});
		} else {
			Ext.Msg.show({
				title:'ファイルタイプによりOPEN不可',
				msg: 'このファイルを開くことはできません。',
				buttons: Ext.Msg.OK
			});
			return;
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;
			var request_redirect_uri = obj.redirect_uri;

			if (request_success === true) {		
				if (MyShowability === false ) {
					var targetCard = Ext.ComponentQuery.query('#viewport')[0];
					targetCard.setActiveItem(4).show();

					var thisFileShowArea = Ext.ComponentQuery.query('#fileShowArea')[0];
					var thisHeight = thisFileShowArea.innerElement.dom.clientHeight;
					var thisHtml = '<div style="height:' + thisHeight + 'px;">このファイルは表示することができません。</div>';
					thisFileShowArea.setHtml(thisHtml);
				} else {
					if (myFileType === 'pdf') {
						var open = window.open(request_redirect_uri);
						if (open === null || typeof(open) === 'undefined') {
							alert('PDFファイルを見るためには、ブラウザのポップアップブロックをオフにして、ブラウザを再起動して下さい。');
							return;
						}
					} else {
						var targetCard = Ext.ComponentQuery.query('#viewport')[0];
						targetCard.setActiveItem(4).show();

						var thisFileShowArea = Ext.ComponentQuery.query('#fileShowArea')[0];
						var thisHeight = thisFileShowArea.innerElement.dom.clientHeight;

						var thisHtml =	'<div style="overflow:scroll;-webkit-overflow-scrolling:touch; height:' + thisHeight + 'px;">' +
						'<iframe src="'+ request_redirect_uri + '" width="100%" height="100%"></iframe>' +
						'</div>';
						thisFileShowArea.setHtml(thisHtml);
					}

				}	

			} else {
				Ext.Msg.show({
					title:'ファイルURI取得失敗',
					msg: 'ファイルURI取得に失敗しました。',
					buttons: Ext.Msg.OK
				});
				return;
			}
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'Network ERROR',
				msg: 'サーバとの通信に失敗しました。',
				buttons: Ext.Msg.OK
			});
			return;
		}

	},

	onPropertyCardShow: function(component, eOpts) {
		var targetFile	= Ext.ComponentQuery.query('#fileList')[0].getLastSelected().data;
		var myFileType = targetFile.file_type.toLowerCase(); 

		switch (myFileType) {
			case 'png': MyShowability = true ; break;
			case 'jpg': MyShowability = true ; break;
			case 'jpeg': MyShowability = true ; break;
			case 'gif': MyShowability = true ; break;
			case 'pdf': MyShowability = true ; break;

			case 'mp4': MyShowability = true ; break;

			case 'xlsx': MyShowability = true ; break;
			case 'docx': MyShowability = true ; break;
			case 'pptx': MyShowability = true ; break;

			case 'xls': MyShowability = true ; break;
			case 'doc': MyShowability = true ; break;
			case 'ppt': MyShowability = true ; break;

			case 'json': MyShowability = true ; break;
			case 'conf': MyShowability = true ; break;
			case 'inc': MyShowability = true ; break;
			case 'js': MyShowability = true ; break;
			case 'css': MyShowability = true ; break;
			case 'txt': MyShowability = true ; break;
			case 'text': MyShowability = true ; break;

			default: MyShowability = false; break;
		}

		Ext.ComponentQuery.query('#propertyPane')[0].setValues({
			title:			targetFile.title,
			file_name:		targetFile.file_name,
			file_type:		targetFile.file_type,
			file_size:		formSize(targetFile.file_size),
			file_version:	targetFile.file_version,
			created_at:		Ext.util.Format.date(targetFile.created_at,'Y-m-d H:i:s'),
			creator:		targetFile.creator,
			updated_at:		Ext.util.Format.date(targetFile.updated_at,'Y-m-d H:i:s'),
			modifier:		targetFile.modifier,
			owner:			targetFile.owner
		});

		var dispImage = targetFile.thumbnail_image;

		if (MyShowability === false) {	
			htmlString = '<div class="my-comment" style="margin-top:20px;color:#ff0000">* このファイルは開けません。</div>';
			htmlString = htmlString + '<div>';
			htmlString = htmlString + '<img src="'+dispImage+'" style="width:120px;margin-bottom:20px"/>';
			htmlString = htmlString + '</div>';
			linkImage = Ext.ComponentQuery.query('#thumbnailImage')[0];
			linkImage.setHtml(htmlString);
			Ext.ComponentQuery.query('#openFileBtn')[0].hide();
		} else {
			htmlString = '<div class="my-comment" style="margin-top:20px">右のボタンをタップすると、ファイルが開きます。</div>';
			htmlString = htmlString + '<div class="my-comment" >* ブラウザによっては、対象ファイルをダウンロードします。</div>';
			htmlString = htmlString + '<div class="my-comment" >* 日本語が含まれている文書の場合は文字化けすることがあります。</div>';

			htmlString = htmlString + '<div>';
			htmlString = htmlString + '<img src="'+dispImage+'" style="width:120px;margin-bottom:20px"/>';
			htmlString = htmlString + '</div>';
			linkImage = Ext.ComponentQuery.query('#thumbnailImage')[0];
			linkImage.setHtml(htmlString);
			Ext.ComponentQuery.query('#openFileBtn')[0].show();
		}

		function formSize(value) {
			var size      = value;
			var rounded_size;

			if (size === "" || size === 0) {
				rounded_size = "-";
			} else if (size < 1024) {
				rounded_size = size + " B";
			} else if (size < 1048576) {
				rounded_size = (Math.round(size / 1024)) + " KB";
			} else if (size < 1073741824) {
				rounded_size = (Math.round(((size*10) / 1048576))/10) + " MB";
			} else if (size < 1099511627776) {
				rounded_size = (Math.round(((size*100) / 1073741824))/100) + " GB";
			} else if (size < 1125899906842624) {
				rounded_size = (Math.round(((size*100) / 1099511627776))/100) + " TB";
			} else {
				rounded_size = (Math.round(((size*100) / 1125899906842624))/100) + " PB";
			}

			return rounded_size;
		}

	}

});