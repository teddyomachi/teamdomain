/*
 * File: app/view/FolderPanelA.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.FolderPanelA', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.folderpanela',
    id: 'folderPanelA',
    itemId: 'folderPanelA',
    autoScroll: true,
    maintainFlex: true,
    title: 'フォルダ',
    store: 'FolderDataStoreA',
    rootVisible: false,
    initComponent: function () {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
            },
            listeners: {
                beforeitemexpand: {
                    fn: me.onFolderPanelABeforeItemExpand,
                    scope: me
                },
                beforeitemcollapse: {
                    fn: me.onFolderPanelABeforeItemCollapse,
                    scope: me
                },
                itemcontextmenu: {
                    fn: me.onFolderPanelAItemContextMenu,
                    scope: me
                },
                beforeitemdblclick: {
                    fn: me.onFolderPanelABeforeItemDblClick,
                    scope: me
                },
                itemclick: 
                        {
                            fn: me.onFolderPanelAItemClick,
                            scope: me
                        }
            }
        });

        me.callParent(arguments);
    },
    onFolderPanelABeforeItemExpand: function (nodeinterface, eOpts) {
        /*
         if (PartialLoad_FileList === true) {
         PartialLoad_FileList = false;
         return;
         } 
         */

        var sendData = nodeinterface.raw;
        sendData = Ext.apply({session_id: this_session_id}, sendData);
        sendData = Ext.apply({request_type: 'expand_folder'}, sendData);

        Ext.Ajax.request({
            url: 'tdx/updatedata.tdx',
            method: 'POST',
            jsonData: sendData,
            success: handleSuccess,
            async: false,
            failure: handleFailure
        });
//                nodeinterface.suspendEvents(true);

        function handleSuccess(response) {
//                        nodeinterface.resumeEvents();
            var obj = Ext.decode(response.responseText);
            var request_success = obj.success;
            var request_status = obj.status;
            var request_dirty = obj.isDirty;

            if (request_success === false) {
                var message = '';
                if (request_status === false) {
                    message = obj.errors;
                    // セッション無効の場合はexpandイベント停止
                    nodeinterface.suspendEvents(false);
//                                    return false;
                } else {
                    message = 'Status: ' + request_status;
                }

                Ext.Msg.show({
                    title: 'サブフォルダの表示失敗',
                    msg: message,
                    buttons: Ext.Msg.OK
                });
            } else {
                if (request_dirty === true) {
                    Ext.getStore('FolderDataStoreA').load();
                } else if (request_status === 2050) {
                    PartialLoad = true;
                    Ext.getStore('FolderDataStoreA').load({
                        node: nodeinterface,
                        url: 'spin/foldersA.sfl'
                    });
                    //Ext.ComponentQuery.query('#folderPanelA')[0].selModel.doSelect(nodeinterface);
                }
            }
        }

        function handleFailure(response) {
//                        nodeinterface.resumeEvents();
            Ext.Msg.show({
                title: 'サブフォルダ表示失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }

    },
    onFolderPanelABeforeItemCollapse: function (nodeinterface, eOpts) {
        BeforeSelectedNodeA = LastSelectedNodeA;

        //console.log('@FolderAColl BeforeSelectedNodeA', BeforeSelectedNodeA);
        //console.log('@FolderAColl LastSelectedNodeA', LastSelectedNodeA);

        LastSelectedNodeA = nodeinterface;

        var sendData = nodeinterface.raw;

        sendData = Ext.apply({session_id: this_session_id}, sendData);
        sendData = Ext.apply({request_type: 'collapse_folder'}, sendData);

        Ext.Ajax.request({
            url: 'tdx/updatedata.tdx',
            method: 'POST',
            jsonData: sendData,
            success: handleSuccess,
            failure: handleFailure
        });

        function handleSuccess(response) {
            obj = Ext.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.show({
                    title: 'サブフォルダのクローズ失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            } else {
                if (LastSelectedNodeA !== BeforeSelectedNodeA) {
                    Ext.ComponentQuery.query('#folderPanelA')[0].selModel.doSelect(LastSelectedNodeA);
                }
            }
            return;
        }

        function handleFailure(response) {
            Ext.Msg.show({
                title: 'サブフォルダのクローズ失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }
    },
    onFolderPanelAItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        TargetComp='folderPanelA';
        select_record = record;
        
        SetActiveData(dataview, record, e, index);
        /*Ext.getCmp('activeData').getForm().setValues({
                activeFolderA_name: select_record.data.folder_name,
                activeFolderA_hash: select_record.data.hash_key,
                activeFolderA_readable: select_record.data.folder_readable_status,
                activeFolderA_writable: select_record.data.folder_writable_status,
                activeFolderA_text: select_record.data.text,
                activeFolderA_cont_location: select_record.data.cont_location,
                activeFolderA_original_place: 'folder_tree'
            });*/
        
        Ext.getCmp('opend_by').setValue('folderPanelA');
        var readable = select_record.data.folder_readable_status;
        var writable = select_record.data.folder_writable_status;
        if (isAgentInstall) {
            if(readable == true && writable == false)
            {
                tree_context_menu = new Ext.menu.Menu({
                    items: [
                        //cutFolder,
                        copyFolder,
                        //pasteFileUnderFolder,
                        optClipboard,
                        new Ext.menu.Separator(),
                        searchFiles,
                        new Ext.menu.Separator(),
                        //appendFileAgentOnFolder,
                        //addSynchronousFolder,
                        //delSynchronousFolder,
                        //addArchiveFolder,
                        //delArchiveFolder,
                        //new Ext.menu.Separator(),
                        //trashFolder,
                        //new Ext.menu.Separator(),
                        //createSubFolder,
                        //settingFolderAccessRight,
                        createAlias,
                        //changeFolderName,
                        //sendUrlLink,
                        displayPropertyFolder
                    ]
                });
            }
            else if(readable == false && writable == true)
            {
                tree_context_menu = new Ext.menu.Menu({
                    items: [
                        //cutFolder,
                        //copyFolder,
                        pasteFileUnderFolder,
                        //optClipboard,
                        new Ext.menu.Separator(),
                        //searchFiles,
                        //new Ext.menu.Separator(),
                        appendFileAgentOnFolder,
                        //addSynchronousFolder,
                        //delSynchronousFolder,
                        //addArchiveFolder,
                        //delArchiveFolder,
                        //new Ext.menu.Separator(),
                        //trashFolder,
                        //new Ext.menu.Separator(),
                        //createSubFolder,
                        //settingFolderAccessRight,
                        //createAlias,
                        //changeFolderName,
                        //sendUrlLink,
                        //displayPropertyFolder
                    ]
                });
            }
            else
            {
                tree_context_menu = new Ext.menu.Menu({
                    items: [
                        cutFolder,
                        copyFolder,
                        pasteFileUnderFolder,
                        optClipboard,
                        new Ext.menu.Separator(),
                        searchFiles,
                        new Ext.menu.Separator(),
                        appendFileAgentOnFolder,
                        addSynchronousFolder,
                        delSynchronousFolder,
                        addArchiveFolder,
                        delArchiveFolder,
                        new Ext.menu.Separator(),
                        trashFolder,
                        new Ext.menu.Separator(),
                        createSubFolder,
                        settingFolderAccessRight,
                        createAlias,
                        changeFolderName,
                        //sendUrlLink,
                        displayPropertyFolder
                    ]
                });
            }
        } else {
            if(readable == true && writable == false)
            {
                tree_context_menu = new Ext.menu.Menu({
                    items: [
                        //cutFolder,
                        copyFolder,
                        //pasteFileUnderFolder,
                        optClipboard,
                        new Ext.menu.Separator(),
                        searchFiles,
                        new Ext.menu.Separator(),
                        //appendFile,
                        //new Ext.menu.Separator(),
                        //trashFolder,
                        //new Ext.menu.Separator(),
                        //createSubFolder,
                        //settingFolderAccessRight,
                        createAlias,
                        //changeFolderName,
                        //sendUrlLink,
                        displayPropertyFolder
                    ]
                });
            }
            else if(readable == false && writable == true)
            {
                tree_context_menu = new Ext.menu.Menu({
                    items: [
                        //cutFolder,
                        //copyFolder,
                        pasteFileUnderFolder,
                        //optClipboard,
                        //new Ext.menu.Separator(),
                        //searchFiles,
                        new Ext.menu.Separator(),
                        appendFile,
                        //new Ext.menu.Separator(),
                        //trashFolder,
                        //new Ext.menu.Separator(),
                        //createSubFolder,
                        //settingFolderAccessRight,
                        //createAlias,
                        //changeFolderName,
                        //sendUrlLink,
                        //displayPropertyFolder
                    ]
                });
            }
            else
            {
                tree_context_menu = new Ext.menu.Menu({
                    items: [
                        cutFolder,
                        copyFolder,
                        pasteFileUnderFolder,
                        optClipboard,
                        new Ext.menu.Separator(),
                        searchFiles,
                        new Ext.menu.Separator(),
                        appendFile,
                        new Ext.menu.Separator(),
                        trashFolder,
                        new Ext.menu.Separator(),
                        createSubFolder,
                        settingFolderAccessRight,
                        createAlias,
                        changeFolderName,
                        //sendUrlLink,
                        displayPropertyFolder
                    ]
                });
            }
        }
        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onFolderPanelABeforeItemDblClick: function (dataview, record, item, index, e, eOpts) {
        return false;
    },
    onFolderPanelAItemClick: function(me, record, item, index, e, options)
    {
        SetActiveData(me, record, e, index);
    }
});

