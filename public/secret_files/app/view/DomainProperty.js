/*
 * File: app/view/DomainProperty.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.DomainProperty', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.domainproperty',

	id: 'domainProperty',
	margin: '10 10 0 10',
	autoScroll: true,
	layout: {
		align: 'stretch',
		type: 'vbox'
	},
	title: 'ワークエリア',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'panel',
					height: 138,
					hidden: true,
					itemId: 'showDomainThumbnail',
					padding: '',
					tpl: [
						'<img src="data/{img}" height="128px" style="float: center" />',
						''
					],
					bodyPadding: 5
				},
				{
					xtype: 'tabpanel',
					flex: 1,
					hidden: true,
					activeTab: 0,
					items: [
						{
							xtype: 'form',
							frame: true,
							height: 150,
							id: 'createFolder',
							autoScroll: true,
							bodyPadding: 5,
							title: 'フォルダ作成',
							items: [
								{
									xtype: 'hiddenfield',
									anchor: '100%',
									fieldLabel: 'Label',
									name: 'cont_location'
								},
								{
									xtype: 'hiddenfield',
									anchor: '100%',
									fieldLabel: 'Label',
									name: 'hash_key'
								},
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									title: 'このワークエリアの配下に新たにフォルダを作成します。',
									items: [
										{
											xtype: 'displayfield',
											anchor: '100%',
											id: 'domain_name_2',
											name: 'domain_name'
										}
									]
								},
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									title: '新しいフォルダの名前を入力して下さい。',
									items: [
										{
											xtype: 'textfield',
											anchor: '100%',
											id: 'new_root_folder',
											name: 'new_folder_name',
											allowBlank: false,
											blankText: '新しいフォルダ名を入力して下さい。',
											emptyText: '新しいフォルダ名を入力して下さい。'
										}
									]
								},
								{
									xtype: 'button',
									handler: function() {
										var formX = this.up().getForm().getFieldValues();

										if (formX.domain_name === '') {
											Ext.Msg.show({
												title:'ドメイン選択',
												msg: 'ドメインを選択してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										if (formX.new_folder_name === '') {
											Ext.Msg.show({
												title:'フォルダ名入力',
												msg: 'フォルダ名を入力してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										formX = Ext.apply({session_id: this_session_id},formX);
										formX = Ext.apply({request_type: 'create_root_folder'},formX);

										Ext.Ajax.request({
											url: 'tdx/updatedata.tdx',
											method: 'POST',
											jsonData: formX,
											success: handleSuccess,
											failure: handleFailure
										});

										function handleSuccess(response) {
											obj = Ext.decode(response.responseText);
											var request_success = obj.success;

											if (request_success === false) {
												var request_errors = obj.errors;
												Ext.Msg.show({
													title:'フォルダ作成失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												if (formX.cont_location === 'folder_a') {
													Ext.getStore('FolderDataStoreA').load();
													Ext.getStore('TargetFolderAT').load();
													Ext.getStore('TargetFolderATFi').load();
												} else if (formX.cont_location === 'folder_b') {
													Ext.getStore('FolderDataStoreB').load();
													//Ext.getStore('TargetFolderBT').load();
													//Ext.getStore('TargetFolderBTFi').load();
												}
											}
											return;
										}

										function handleFailure(response) {
											Ext.Msg.show({
												title:'フォルダ作成失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}
									},
									id: 'btn_create_root_folder',
									margin: '0 0 0 205',
									width: 100,
									text: '作成',
									tooltip: {
										html: '新規に作成するフォルダ名を入力してから、このボタンを押して下さい。'
									},
									type: 'submit'
								}
							]
						},
						{
							xtype: 'form',
							frame: true,
							height: 100,
							hidden: true,
							id: 'showDomainProperty',
							autoScroll: true,
							bodyPadding: 5,
							title: 'プロパティ',
							items: [
								{
									xtype: 'hiddenfield',
									anchor: '100%',
									fieldLabel: 'Label',
									name: 'cont_location'
								},
								{
									xtype: 'hiddenfield',
									anchor: '100%',
									fieldLabel: 'Label',
									name: 'hash_key'
								},
								{
									xtype: 'textfield',
									id: 'domain_name_1',
									margin: 0,
									width: 320,
									fieldLabel: 'ドメイン名',
									labelWidth: 90,
									name: 'domain_name',
									allowBlank: false,
									emptyText: 'ドメインを選択して下さい。'
								},
								{
									xtype: 'button',
									handler: function() {
										var formX = this.up().getForm().getFieldValues();

										if (formX.domain_name === '') {
											Ext.Msg.show({
												title:'ドメイン選択',
												msg: 'ドメインを選択してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										formX = Ext.apply({session_id: this_session_id},formX);
										formX = Ext.apply({request_type: 'change_domain_name'},formX);

										Ext.Ajax.request({
											url: 'tdx/updatedata.tdx',
											method: 'POST',
											jsonData: formX,
											success: handleSuccess,
											failure: handleFailure
										});

										function handleSuccess(response) {
											obj = Ext.decode(response.responseText);
											var request_success = obj.success;

											if (request_success === false) {
												var request_errors = obj.errors;
												Ext.Msg.show({
													title:'ドメイン名変更失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												Ext.getStore('DomainDataStoreA').load();
												Ext.getStore('DomainDataStoreB').load();
											}
											return;
										}

										function handleFailure(response) {
											Ext.Msg.show({
												title:'ドメイン名変更失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}
									},
									id: 'btn_change_domain_name',
									itemId: '',
									margin: '5 0 5 210',
									width: 100,
									text: 'ドメイン名変更',
									tooltip: {
										html: 'ドメイン名を変更する場合には、現在のドメイン名を上書きしてから、このボタンを押して下さい。'
									}
								},
								{
									xtype: 'displayfield',
									margin: 0,
									width: 320,
									fieldLabel: 'リンク先',
									labelWidth: 90,
									name: 'domain_link'
								}
							]
						},
						{
							xtype: 'form',
							frame: true,
							hidden: true,
							id: 'createRootFile',
							autoScroll: true,
							bodyPadding: 5,
							title: 'ファイル追加',
							items: [
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									layout: {
										type: 'auto'
									},
									title: 'このドメインの配下にファイルを追加します。',
									items: [
										{
											xtype: 'hiddenfield',
											name: 'request_type',
											value: 'upload_root_file'
										},
										{
											xtype: 'hiddenfield',
											name: 'cont_location'
										},
										{
											xtype: 'hiddenfield',
											name: 'hash_key'
										},
										{
											xtype: 'displayfield',
											height: 20,
											width: 303,
											name: 'domain_name'
										}
									]
								},
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									title: 'ファイルを選択して下さい。',
									items: [
										{
											xtype: 'filefield',
											anchor: '100%',
											id: 'uploadRootFile',
											itemId: 'uploadRootFile',
											name: 'upload_file',
											readOnly: false,
											allowBlank: false,
											emptyText: 'ファイルを選択してください。',
											buttonText: 'ファイル選択',
											listeners: {
												change: {
													fn: me.onUploadRootFileChange,
													scope: me
												}
											}
										},
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'another_name'
										}
									]
								},
								{
									xtype: 'button',
									handler: function(button, event) {
										var formX = this.up().getForm().getFieldValues();
										if (formX.text === '') {
											Ext.Msg.show({
												title:'ドメイン選択',
												msg: 'ドメインの選択を確認してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										var form = this.up('form').getForm();
										var up_filename = form._fields.items[5].value;

										if (Ext.isEmpty(up_filename)) {
											Ext.Msg.show({
												title:'追加ファイル選択',
												msg: '追加ファイルを選択してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										} else {
											var dataY = Ext.apply({session_id: this_session_id}, formX);
											dataY = Ext.apply({upload_filename: up_filename}, dataY);
											dataY = Ext.apply({request_type: "upload_root_file"}, dataY);

											Ext.Ajax.request({
												url: 'tdx/updatedata.tdx',
												jsonData: dataY,
												success: handleSuccess,
												failure: handleFailure
											});
										}

										function handleSuccess(response) {
											obj = Ext.decode(response.responseText);

											var request_success      = obj.success;
											var request_hashkey      = obj.hashkey;
											var request_redirect_uri = obj.redirect_uri;
											var new_filename         = this_session_id + request_hashkey;

											if (request_success === false) {
												var request_errors = obj.errors;
												Ext.Msg.show({
													title:'ファイル送信失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												Ext.getCmp('createRootFile').getForm().setValues({
													another_name: new_filename
												});
												sendFile(form, up_filename, request_redirect_uri);
											}
											return;
										}

										function handleFailure(response) {
											Ext.Msg.show({
												title:'ファイル追加失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
											return;
										}


										function sendFile(form, up_filename, request_redirect_uri) {
											form.submit({
												url: request_redirect_uri,
												waitMsg: 'ファイルを追加中です...',

												success: function(form, action){
													if(action.result.success === true){
														Ext.Msg.show({
															title:'ファイルの追加完了',
															msg: up_filename +'<br/> をサーバに追加しました',
															buttons: Ext.Msg.OK
														});
														if (formX.cont_location === 'folder_a') {
															Ext.getStore('FileDataStoreA').load();
														} else if (formX.cont_location === 'folder_b') {
															Ext.getStore('FileDataStoreB').load();
														}
														form._fields.items[5].value = '';
													}

												},

												failure: function(form, action){
													if (action.failureType === CONNECT_FAILURE) {
														Ext.Msg.alert('Error', 'Status:'+action.response.status+': '+ action.response.statusText);
													}
													if (action.failureType === SERVER_INVALID){
														Ext.Msg.alert('Invalid', action.result.errormsg);
													}
												}
											});
										}

									},
									id: 'btn_upload_root_file',
									margin: '0 0 0 205',
									width: 100,
									text: '追加',
									tooltip: {
										html: 'ファイルを追加するフォルダを確認してから、「ファイル選択」ボタンを押して、追加するファイルを選択して下さい。<br/>確認が済んだら、このボタンを押して下さい。'
									}
								}
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onUploadRootFileChange: function(filefield, value, eOpts) {
		value = value.replace('C:\\fakepath\\', '');

	}

});