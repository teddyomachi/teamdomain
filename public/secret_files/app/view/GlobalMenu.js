/*
 * File: app/view/GlobalMenu.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.GlobalMenu', {
    extend: 'Ext.toolbar.Toolbar',
    alias: 'widget.gloabalmenu',
    id: 'globalMenu',
    initComponent: function () {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    id: 'activeUser',
                    itemId: 'activeUser',
                    margin: 2,
                    padding: 1,
                    width: 250,
                    items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            margin: '0 0 1 7',
                            fieldLabel: 'ユーザ名',
                            labelWidth: 70,
                            name: 'active_op_name',
                            id:'active_op_name',
                            readOnly: true,
                            listeners: {
                                afterrender: {
                                    fn: me.onTextfieldAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'splitter'
                },
                {
                    xtype: 'textfield',
                    id: 'simple_Search_Name',
                    name: 'simple_Search_Name',
                    style: 'background:lightgreen',
                    tooltipType: 'title',
                    tooltip: '簡易検索：Enterで該当するファイルを検索します。',
                    emptyText: '　　　　簡易検索',
                    listeners: {
                        specialkey: {
                            fn: me.onSimpleSearchEnter,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'simpleSearchBtn',
                    icon: 'data/small_icon/View.png', tooltipType: 'title',
                    tooltip: '検索',
                    listeners: {
                        click: {
                            fn: me.onSimpleSearchBtnClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'hidden',
                    id: 'first_flag',
                    value: 0
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    hidden: true,
                    id: 'workingBtn',
                    icon: 'data/small_icon/refresh_file.png',
                    text: 'ロックファイル一覧',
                    listeners: {
                        click: {
                            fn: me.onWorkingBtnClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'splitter'
                },
                {
                    xtype: 'button',
                    id: 'trashboxBtn',
                    icon: 'data/small_icon/Trash.png',
                    tooltipType: 'title',
                    tooltip: 'ゴミ箱',
                    listeners: {
                        click: {
                            fn: me.onTrashboxBtnClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'optionBtn',
                    icon: 'data/small_icon/system_config.png',
                    tooltipType: 'title',
                    tooltip: '設定',
                    listeners: {
                        click: {
                            fn: me.onOptionBtnClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'helpBtn',
                    icon: 'images/help_icon_black.png',
                    tooltipType: 'title',
                    tooltip: 'ヘルプ',
                    listeners: {
                        click: {
                            fn: me.onHelpBtnClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'splitter'
                },
                {
                    xtype: 'button',
                    id: 'logoutBtn',
                    icon: 'data/small_icon/logout.png',
                    tooltipType: 'title',
                    tooltip: 'ログアウト',
                    listeners: {
                        click: {
                            fn: me.onLogoutBtnClick,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },
    onTrashboxBtnClick: function (button, e, eOpts) {
        Ext.create('TeamDomain.view.Trashbox').show();
    },
    onTextfieldAfterRender: function (component, e, eOpts) {
        var operatorData = Ext.getStore('ActiveOperatorStore').load();
    },
    onWorkingBtnClick: function (button, e, eOpts) {
        Ext.create('TeamDomain.view.workingWin').show();
    },
    onOptionBtnClick: function (button, e, eOpts) {
        if (UserDspClosed) {
            setting_menu = new Ext.menu.Menu({
                items: [
                    optUserGroup,
                    optSystemConfig
                ]
            });
        } else {
            setting_menu = new Ext.menu.Menu({
                items: [
                    optUserGroup,
                    optUserMng,
                    optSystemConfig
                ]
            });
        }
        setting_menu.showAt(e.getXY());
        return false;

    },
    onSimpleSearchBtnClick: function (button, e, eOpts) {
        if (Ext.getCmp('eastSidePanel').isVisible()) {
            Ext.getCmp('eastSidePanel').hide();
        } else {
            Ext.getCmp('eastSidePanel').show();
            Ext.getCmp('eastSidePanel').expand();
        }
    },
    onHelpBtnClick: function (button, e, eOpts) {
        window.open('help/index.html', 'help');

    },
    onLogoutBtnClick: function (button, e, eOpts) {
        var dataX;
        dataX = Ext.apply({session_id: this_session_id}, dataX);
        dataX = Ext.apply({request_type: "logout"}, dataX);

        Ext.Msg.confirm('ログアウト', 'ログアウトしますか?', function (btn) {
            if (btn == 'yes') {
                Ext.Ajax.request({
                    url: 'tdx/updatedata.tdx',
                    jsonData: dataX,
                    method: 'POST',
                    success: handleSuccess,
                    failure: handleFailure
                });
            }
            if (btn == 'no') {
                //alert('*****no');
            }
        });

        function handleSuccess(response) {
            obj = Ext.JSON.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.show({
                    title: 'ログアウト失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            } else {
                var redirect = obj.initial_uri;
                window.location = redirect;
            }
        }

        function handleFailure(response) {
            Ext.Msg.show({
                title: 'ログアウト失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });

        }
    },
    onSimpleSearchEnter: function (f, e) {
        if (e.getKey() === e.ENTER) {
            var activeFolders = Ext.getCmp('activeData').getForm().getFieldValues();
            var searchData;
            searchData = Ext.apply({session_id: this_session_id}, searchData);
            searchData = Ext.apply({request_type: 'search_files'}, searchData);
            searchData = Ext.apply({cont_location: 'folder_a'}, searchData);
            searchData = Ext.apply({hash_key: activeFolders.activeFolderA_hash}, searchData);
            searchData = Ext.apply({text: activeFolders.activeFolderA_text}, searchData);

            searchData = Ext.apply({locked_by_me: false}, searchData);
            searchData = Ext.apply({target_subfolder: true}, searchData);
            searchData = Ext.apply({target_file_name: f.getValue()}, searchData);

            Ext.Msg.confirm('簡易検索', '簡易検索しますか?', function (btn) {
                Ext.Ajax.request({
                    url: 'tdx/updatedata.tdx',
                    jsonData: searchData,
                    method: 'POST',
                    success: handleSuccess,
                    failure: handleFailure
                });
            });

            function handleSuccess(response) {
                obj = Ext.decode(response.responseText);
                var request_success = obj.success;
                var request_status = obj.status;

                if (request_success === false) {
                    var request_errors = obj.errors;
                    Ext.Msg.hide();
                    Ext.Msg.show({
                        title: 'ファイル検索失敗',
                        msg: request_errors,
                        buttons: Ext.Msg.OK
                    });
                } else {
                    if (request_status === 1035) {
                        Ext.Msg.hide();
                        Ext.Msg.show({
                            title: 'ファイル検索失敗',
                            msg: '該当するファイルが見つかりませんでした',
                            buttons: Ext.Msg.OK
                        });
                    } else {
                        Ext.Msg.hide();
                        Ext.getCmp('searchDsp').show();
                        Ext.getCmp('searchDsp').expand();
                        Ext.getCmp('filesS_list').moveFirst();
                    }
                }
                return;
            }

            function handleFailure(response) {
                Ext.Msg.hide();
                Ext.Msg.show({
                    title: 'ファイル検索失敗',
                    msg: 'サーバとの通信に失敗しました',
                    buttons: Ext.Msg.OK
                });
            }
        }
    }

});
