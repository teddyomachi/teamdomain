{
    "type": "Ext.app.Application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "FileData",
            "DomainData",
            "FolderData",
            "RecyclerData",
            "SearchConditionData",
            "SearchOptionData",
            "GroupData",
            "MemberData",
            "SenderData",
            "TargetFolderData",
            "OperatorData",
            "MemberManagementData"
        ],
        "stores": [
            "FileDataStoreA",
            "DomainDataStoreA",
            "FolderDataStoreA",
            "RecyclerDataStore",
            "SearchConditionStore",
            "SearchOptionStore",
            "FileDataStoreS",
            "GroupAllStore",
            "GroupFolderStore",
            "GroupFileStore",
            "GroupCreatedStore",
            "MemberDataStore",
            "FileDataStoreB",
            "FolderDataStoreB",
            "MailSenderStore",
            "TargetFolderAT",
            "TargetFolderBT",
            "TargetFolderATFi",
            "TargetFolderBTFi",
            "workingFileStore",
            "DomainDataStoreB",
            "ActiveOperatorStore",
            "MemberManagementDataStore"
        ],
        "views": [
            "MainView",
            "DomainGridPanelA",
            "FolderPanelA",
            "DomainGridPanelB",
            "FolderPanelB",
            "GlobalMenu",
            "DomainProperty",
            "FolderProperty",
            "FileProperty",
            "SearchCondition",
            "Trashbox",
            "FileWholeDsp",
            "GroupDsp",
            "LocalMenu",
            "workingWin",
            "optionWin",
            "UserDsp",
            "PrivilegeDsp",
            "SearchDsp"
        ],
        "autoCreateViewport": true,
        "name": "TeamDomain",
        "controllers": [
            "showDataProperty",
            "OpenFileAction"
        ]
    },
    "designerId": "application",
    "cn": [
        {
            "type": "Ext.Loader",
            "reference": {
                "name": "loader",
                "type": "object"
            },
            "codeClass": null,
            "userConfig": {
                "enabled": true,
                "paths": [
                    "{\r",
                    "\t\"Ext.ux.DataView\": \"../ext/src/ux/DataView\",\r",
                    "\t\"Ext.TeamDomain\": \"js\"\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "bfaf8f15-a5c2-46d8-b146-86840c10638b"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "Ext.require([\r",
                    "'Ext.data.*',\r",
                    "'Ext.util.*'//,\r",
                    "//'Ext.TeamDomain.CheckDomainStatus',\r",
                    "//'Ext.TeamDomain.CheckFolderStatus',\r",
                    "//'Ext.TeamDomain.CheckFileStatus',\r",
                    "//'Ext.TeamDomain.OpenFiles'\r",
                    "]);\r",
                    "\r",
                    "//ExtJs 4 bug when reloading a node that was already loaded once\r",
                    "\r",
                    "//Uncaught TypeError: Cannot call method 'indexOf' of undefined.\r",
                    "//If you see this error, use a TreeStore override for the load function as shown below\r",
                    "Ext.override(Ext.data.TreeStore, {\r",
                    "\tload: function(options) {\r",
                    "\t\toptions = options || {};\r",
                    "\t\toptions.params = options.params || {};\r",
                    "\r",
                    "\t\tvar me = this,\r",
                    "\t\t\tnode = options.node || me.tree.getRootNode(),\r",
                    "\t\t\troot;\r",
                    "\r",
                    "\t\tif (!node) {\r",
                    "\t\t\tnode = me.setRootNode({\r",
                    "\t\t\t\texpanded: true\r",
                    "\t\t\t});\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tif (me.clearOnLoad) {\r",
                    "\t\t\tnode.removeAll(false); //Point\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.applyIf(options, {\r",
                    "\t\t\tnode: node\r",
                    "\t\t});\r",
                    "\t\toptions.params[me.nodeParam] = node ? node.getId() : 'root';\r",
                    "\r",
                    "\t\tif (node) {\r",
                    "\t\t\tnode.set('loading', true);\r",
                    "\t\t}\r",
                    "\r",
                    "\t\treturn me.callParent([options]);\r",
                    "\t}\r",
                    "});\r",
                    "\r",
                    "Ext.override(Ext.toolbar.Paging, {\r",
                    "\tgetPageData : function(){\r",
                    "\t\tvar store = this.store,\r",
                    "\t\t\ttotalCount = store.getTotalCount();\r",
                    "\r",
                    "\t\treturn {\r",
                    "\t\t\ttotal : totalCount,\r",
                    "\t\t\tcurrentPage : store.currentPage,\r",
                    "\t\t\tpageCount: (totalCount === 0) ? 1 : Math.ceil(totalCount / store.pageSize),\r",
                    "\t\t\tfromRecord: ((store.currentPage - 1) * store.pageSize) + 1,\r",
                    "\t\t\ttoRecord: Math.min(store.currentPage * store.pageSize, totalCount) \r",
                    "\t\t};\r",
                    "\t}\r",
                    "});\r",
                    "\r",
                    "Ext.override(Ext.grid.Scroller, {  onAdded: function() {\r",
                    "\tthis.callParent(arguments);\r",
                    "\tvar me = this;\r",
                    "\tif (me.scrollEl) {\r",
                    "\t\tme.mun(me.scrollEl, 'scroll', me.onElScroll, me);\r",
                    "\t\tme.mon(me.scrollEl, 'scroll', me.onElScroll, me);\r",
                    "\t}\r",
                    "}\r",
                    "});\r",
                    "\r",
                    "//timeoutの設定が有効にならない場合の対策\r",
                    "Ext.override(Ext.data.proxy.Ajax, { timeout: 300000 });\r",
                    "//Ext.Ajax.timeout = 300000;\r",
                    "\r",
                    "/*\r",
                    "Ext.override(Ext.tree.View, { \r",
                    "setRootNode: function(node){\r",
                    "var me = this;        \r",
                    "me.store.setNode(node);\r",
                    "me.node = node;\r",
                    "if (!me.rootVisible && me.store.autoLoad){\r",
                    "node.expand();\r",
                    "}\r",
                    "}\r",
                    "}); \r",
                    "*/\r",
                    "\r",
                    "\r",
                    "//初期状態で自動的にTreeデータを読み込むのを防ぐ方法1\r",
                    "//store.setRootNode({ text:'Root', leaf:false, expended:true });\r",
                    "\r",
                    "Ext.getBody().on(\"contextmenu\", Ext.emptyFn, null, {preventDefault: true}); \r",
                    ""
                ]
            },
            "designerId": "852081ce-ba49-406a-b1ae-5a59725702d8"
        }
    ]
}