{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "showDataProperty"
    },
    "designerId": "fb97b092-af17-4460-87e9-5662ef1cdeb3",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelSelectionChangeDA",
                "implHandler": [
                    "var show_target_folder = 'folder_a';\r",
                    "var viewDomain = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\tviewDomain.down('#showDomainThumbnail').update(selected[0].data);\r",
                    "\tviewDomain.down('#showDomainProperty').loadRecord(selected[0]);\r",
                    "\tviewDomain.down('#createFolder').loadRecord(selected[0]);\r",
                    "\tExt.getCmp('createFolder').getForm().setValues({\r",
                    "\t\tcont_location: show_target_folder\r",
                    "\t});\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveDomainA_name: selected[0].data.domain_name,   \r",
                    "\t\tactiveDomainA_hash: selected[0].data.hash_key\r",
                    "\t});\r",
                    "\r",
                    "\tvar editChecked = selected[0].data.domain_writable_status;\r",
                    "\r",
                    "\tdoCheckDomain(editChecked);\r",
                    "\r",
                    "} else return;\r",
                    "\r",
                    "var dataD;\r",
                    "dataD = Ext.apply({target_folder: show_target_folder}, selected[0].data);\r",
                    "dataD = Ext.apply({session_id: this_session_id}, dataD);\r",
                    "dataD = Ext.apply({request_type: \"change_domain\"}, dataD);\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "\turl: 'tdx/updatedata.tdx',\r",
                    "\t//url: 'php/request.php',\r",
                    "\tjsonData: dataD,\r",
                    "\tsuccess: handleSuccess,\r",
                    "\tfailure: handleFailure\r",
                    "});\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ドメインの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\tif (show_target_folder === 'folder_a') {\r",
                    "\t\t\tExt.getStore('FolderDataStoreA').load();\r",
                    "\t\t\tExt.getStore('TargetFolderAT').load();\r",
                    "\t\t\tExt.getStore('TargetFolderATFi').load();\r",
                    "\r",
                    "\t\t} else if (show_target_folder === 'folder_b') {\r",
                    "\t\t\tExt.getStore('FolderDataStoreB').load();\r",
                    "\t\t\tExt.getStore('TargetFolderBT').load();\r",
                    "\t\t\tExt.getStore('TargetFolderBTFi').load();\r",
                    "\t\t}\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ドメインの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#domainGridPanelA"
            },
            "designerId": "3c59ee2a-123c-4468-9309-07bfd5b3b3ff"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelSelectionChangeDB",
                "implHandler": [
                    "if (DomainLoadingCount === 0) {\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveDomainB_name: selected[0].data.domain_name,\r",
                    "\t\tactiveDomainB_hash: selected[0].data.hash_key\r",
                    "\t});\r",
                    "\tDomainLoadingCount = 1;\r",
                    "} else {\r",
                    "\tvar show_target_folder = 'folder_b';\r",
                    "\tvar viewDomain = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "\tif (Object.keys(selected).length !== 0) {\r",
                    "\t\tviewDomain.down('#showDomainThumbnail').update(selected[0].data);\r",
                    "\t\tviewDomain.down('#showDomainProperty').loadRecord(selected[0]);\r",
                    "\t\tviewDomain.down('#createFolder').loadRecord(selected[0]);\r",
                    "\t\tExt.getCmp('createFolder').getForm().setValues({\r",
                    "\t\t\tcont_location: show_target_folder\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\t\tactiveDomainB_name: selected[0].data.domain_name,\r",
                    "\t\t\tactiveDomainB_hash: selected[0].data.hash_key\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar editChecked = selected[0].data.domain_writable_status;\r",
                    "\r",
                    "\t\tdoCheckDomain(editChecked);\r",
                    "\r",
                    "\t} else return;\r",
                    "\r",
                    "\tvar dataD;\r",
                    "\tdataD = Ext.apply({target_folder: show_target_folder}, selected[0].data);\r",
                    "\tdataD = Ext.apply({session_id: this_session_id}, dataD);\r",
                    "\tdataD = Ext.apply({request_type: \"change_domain\"}, dataD);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataD,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ドメインの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\tif (show_target_folder === 'folder_a') {\r",
                    "\t\t\tExt.getStore('FolderDataStoreA').load();\r",
                    "\t\t\tExt.getStore('TargetFolderAT').load();\r",
                    "\t\t\tExt.getStore('TargetFolderATFi').load();\r",
                    "\t\t} else if (show_target_folder === 'folder_b') {\r",
                    "\t\t\tExt.getStore('FolderDataStoreB').load();\r",
                    "\t\t\tExt.getStore('TargetFolderBT').load();\r",
                    "\t\t\tExt.getStore('TargetFolderBTFi').load();\r",
                    "\t\t}\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ドメインの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#domainGridPanelB"
            },
            "designerId": "46d8077e-524f-4fa1-9a33-4a7915464b64"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreepanelSelectionChangeA",
                "implHandler": [
                    "LastSelectedNodeB = model.getSelection();\r",
                    "\r",
                    "var folderPanelName  = 'フォルダ1 -';\r",
                    "var folderPanelTitle = 'folderPanelA';\r",
                    "var listScreen = 'listDspA';\r",
                    "var iconScreen = 'iconDspA';\r",
                    "var thumbnailScreen = 'thumbnailDspA';\r",
                    "\r",
                    "var viewFolder = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(selected[0].data);\r",
                    "\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#createFile').loadRecord(selected[0]);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"folder_tree\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(selected[0]);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"folder_tree\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(selected[0]);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(selected[0]);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"folder_tree\"\r",
                    "\t});\r",
                    "\r",
                    "\r",
                    "\t//console.log(selected[0].data);\r",
                    "\r",
                    "\tvar DateCreated = selected[0].data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = selected[0].data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           selected[0].data.text,\r",
                    "\t\towner_name:     selected[0].data.owner,\r",
                    "\t\thash_key:       selected[0].data.hash_key,\r",
                    "\t\tcont_location:  selected[0].data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: selected[0].data.other_readable,\r",
                    "\t\tother_writable: selected[0].data.other_writable\r",
                    "\t});\r",
                    "\t\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(selected[0]);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderA_name:     selected[0].data.folder_name,\r",
                    "\t\tactiveFolderA_hash:     selected[0].data.hash_key,\r",
                    "\t\tactiveFolderA_readable: selected[0].data.folder_readable_status,\r",
                    "\t\tactiveFolderA_writable: selected[0].data.folder_writable_status\r",
                    "\t});\r",
                    "\t//console.log(selected[0].data.folder_name);\r",
                    "\r",
                    "\treadChecked       = selected[0].data.folder_readable_status;\r",
                    "\twriteChecked      = selected[0].data.folder_writable_status;\r",
                    "\tvar ownerChecked      = selected[0].data.ownership;\r",
                    "\tvar controllerChecked = selected[0].data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "\tshowFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);\r",
                    "\r",
                    "\ttargetStatus    = Boolean(targetStatus);\r",
                    "\tdoCheckFolder(readChecked, writeChecked, ownerChecked, controllerChecked, targetStatus, listScreen, iconScreen, thumbnailScreen);\r",
                    "\r",
                    "} else {\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "if (readChecked === true) {\r",
                    "\tvar dataF = Ext.apply({session_id: this_session_id}, selected[0].raw);\r",
                    "\tdataF = Ext.apply({request_type: \"change_folder\"}, dataF);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataF,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "} else return;\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'フォルダの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\tif (folderPanelTitle === 'folderPanelA') {\r",
                    "\t\t\t//Ext.getCmp('fileWholeDsp').show();\r",
                    "\t\t\tExt.getCmp('filesA_list').moveFirst();\r",
                    "\t\t\tif (PrivilegeEdit === true) {\r",
                    "\t\t\t\tExt.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\t\t\t}\r",
                    "\r",
                    "\t\t} else if (folderPanelTitle === 'folderPanelB') {\r",
                    "\t\t\tExt.getCmp('filesB_list').moveFirst();\r",
                    "\t\t\tif (PrivilegeEdit === true) {\r",
                    "\t\t\t\tExt.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\t\t\t}\r",
                    "\t\t}\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'フォルダの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#folderPanelA"
            },
            "designerId": "c0cc6be7-35ac-4a3e-9e17-6e8fea718667"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreepanelSelectionChangeB",
                "implHandler": [
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\tif (FolderLoadingCountB === 1) {\r",
                    "\t\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\t\tactiveFolderB_name:     selected[0].data.folder_name,\r",
                    "\t\t\tactiveFolderB_hash:     selected[0].data.hash_key,\r",
                    "\t\t\tactiveFolderB_readable: selected[0].data.folder_readable_status,\r",
                    "\t\t\tactiveFolderB_writable: selected[0].data.folder_writable_status\r",
                    "\t\t});\r",
                    "\t}\r",
                    "}\r",
                    "\r",
                    "LastSelectedNodeB = model.getSelection();\r",
                    "\r",
                    "var folderPanelName  = 'フォルダ2 -';\r",
                    "var folderPanelTitle = 'folderPanelB';\r",
                    "var listScreen = 'listDspB';\r",
                    "var iconScreen = 'iconDspB';\r",
                    "var thumbnailScreen = 'thumbnailDspB';\r",
                    "\r",
                    "var viewFolder = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(selected[0].data);\r",
                    "\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(selected[0]);\r",
                    "\tviewFolder.down('#createFile').loadRecord(selected[0]);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"folder_tree\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(selected[0]);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"folder_tree\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(selected[0]);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(selected[0]);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"folder_tree\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = selected[0].data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = selected[0].data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           selected[0].data.text,\r",
                    "\t\towner_name:     selected[0].data.owner,\r",
                    "\t\thash_key:       selected[0].data.hash_key,\r",
                    "\t\tcont_location:  selected[0].data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: selected[0].data.other_readable,\r",
                    "\t\tother_writable: selected[0].data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(selected[0]);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderB_name:     selected[0].data.folder_name,\r",
                    "\t\tactiveFolderB_hash:     selected[0].data.hash_key,\r",
                    "\t\tactiveFolderB_readable: selected[0].data.folder_readable_status,\r",
                    "\t\tactiveFolderB_writable: selected[0].data.folder_writable_status\r",
                    "\t});\r",
                    "\t//console.log(selected[0].data.folder_name);\r",
                    "\r",
                    "\treadChecked       = selected[0].data.folder_readable_status;\r",
                    "\twriteChecked      = selected[0].data.folder_writable_status;\r",
                    "\tvar ownerChecked      = selected[0].data.ownership;\r",
                    "\tvar controllerChecked = selected[0].data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "\tshowFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);\r",
                    "\r",
                    "\ttargetStatus    = Boolean(targetStatus);\r",
                    "\tdoCheckFolder(readChecked, writeChecked, ownerChecked, controllerChecked, targetStatus, listScreen, iconScreen, thumbnailScreen);\r",
                    "\r",
                    "} else {\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "if (readChecked === true) {\r",
                    "\tvar dataF = Ext.apply({session_id: this_session_id}, selected[0].raw);\r",
                    "\tdataF = Ext.apply({request_type: \"change_folder\"}, dataF);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataF,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "} else return;\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'フォルダの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\tif (folderPanelTitle === 'folderPanelA') {\r",
                    "\t\t\tExt.getCmp('filesA_list').moveFirst();\r",
                    "\t\t\tif (PrivilegeEdit === true) {\r",
                    "\t\t\t\tExt.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\t\t\t}\r",
                    "\r",
                    "\t\t} else if (folderPanelTitle === 'folderPanelB') {\r",
                    "\t\t\tExt.getCmp('filesB_list').moveFirst();\r",
                    "\t\t\tif (PrivilegeEdit === true) {\r",
                    "\t\t\t\tExt.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\t\t\t}\r",
                    "\t\t}\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'フォルダの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.Panel",
                "designer|controlQuery": "#folderPanelB"
            },
            "designerId": "5a00d084-6cd7-436d-8fc6-c5d4b9802037"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelSelectionChangeFiA",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\r",
                    "\tif (selected[0].data.file_type === 'folder') {//以下フォルダの場合\r",
                    "\t\tvar viewFolder = viewFile;\r",
                    "\t\trecord = selected[0];\r",
                    "\r",
                    "\t\trecord.data.folder_name            = selected[0].data.file_name;\r",
                    "\t\trecord.data.text                   = selected[0].data.file_name;\r",
                    "\t\trecord.data.img                    = selected[0].data.icon_image;\r",
                    "\t\trecord.data.updater                = selected[0].data.modifier;\r",
                    "\t\trecord.data.updated_at             = selected[0].data.updated_at;\r",
                    "\t\trecord.data.parent_readable_status = selected[0].data.folder_readable_status;\r",
                    "\t\trecord.data.parent_writable_status = selected[0].data.folder_writable_status;\r",
                    "\t\trecord.data.folder_readable_status = selected[0].data.file_readable_status;\r",
                    "\t\trecord.data.folder_writable_status = selected[0].data.file_writable_status;\r",
                    "\t\trecord.data.cls                    = selected[0].data.file_type;\r",
                    "\r",
                    "\t\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\t\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\t\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\t\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\r",
                    "\t\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\r",
                    "\t\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\t\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\t\toriginal_place: \"file_list\"\r",
                    "\t\t});\r",
                    "\t\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\t\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\t\toriginal_place: \"file_list\"\r",
                    "\t\t});\r",
                    "\t\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\t\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\t\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\t\toriginal_place: \"file_list\"\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateCreated = record.data.created_at;\r",
                    "\t\tvar DateCreated_formated;\r",
                    "\r",
                    "\t\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\t\tDateCreated_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\t\tcreated_at: DateCreated_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateModified = record.data.updated_at;\r",
                    "\t\tvar DateModified_formated;\r",
                    "\r",
                    "\t\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\t\tDateModified_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\t\tupdated_at: DateModified_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar owner_right;\r",
                    "\t\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\t\towner_right = 'full';\r",
                    "\t\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\t\towner_right = 'read_only';\r",
                    "\t\t} else {\r",
                    "\t\t\towner_right = \"\";\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\t\ttext:\t\t\trecord.data.text,\r",
                    "\t\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\t\thash_key:\t\trecord.data.hash_key,\r",
                    "\t\t\tcont_location:\trecord.data.cont_location,\r",
                    "\t\t\towner:\t\t\towner_right,\r",
                    "\t\t\tother_readable:\trecord.data.other_readable,\r",
                    "\t\t\tother_writable:\trecord.data.other_writable\r",
                    "\t\t});\r",
                    "\t\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\t\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\t\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\t\tactiveFolderA_name: record.data.folder_name,\r",
                    "\t\t\tactiveFolderA_hash: record.data.hash_key,\r",
                    "\t\t\tactiveFolderA_readable: record.data.folder_readable_status,\r",
                    "\t\t\tactiveFolderA_writable: record.data.folder_writable_status\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\t\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\t\tvar ownerChecked      = record.data.ownership;\r",
                    "\t\tvar controllerChecked = record.data.control_right;\r",
                    "\t\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "\t} else {//以下ファイルの場合\r",
                    "\t\trecord = selected[0];\r",
                    "\r",
                    "\t\tviewFile.down('#showThumbnail').update(selected[0].data);\r",
                    "\r",
                    "\t\tviewFile.down('#showFileProperty').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#showFileExtension').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#showFileDetails').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#openFile').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#openVer').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#openApp').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#ccpdFile').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#checkOut').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#changeLock').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#changeOwner').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#sendMail').loadRecord(selected[0]);\r",
                    "\r",
                    "\t\tvar owner_right;\r",
                    "\t\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\t\towner_right = 'full';\r",
                    "\t\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\t\towner_right = 'read_only';\r",
                    "\t\t} else {\r",
                    "\t\t\towner_right = \"\";\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\t\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\t\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\t\tfile_name:      record.data.file_name,\r",
                    "\t\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\t\thash_key:       record.data.hash_key,\r",
                    "\t\t\tcont_location:  record.data.cont_location,\r",
                    "\t\t\towner_access:   owner_right,\r",
                    "\t\t\tother_readable: record.data.other_readable,\r",
                    "\t\t\tother_writable: record.data.other_writable\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tviewFile.down('#searchGroupFile').loadRecord(selected[0]);\r",
                    "\r",
                    "\t\tvar folderReadChecked     = selected[0].data.folder_readable_status;\r",
                    "\t\tvar folderWriteChecked    = selected[0].data.folder_writable_status;\r",
                    "\t\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\t\tvar fileReadChecked       = selected[0].data.file_readable_status;\r",
                    "\t\tvar fileWriteChecked      = selected[0].data.file_writable_status;\r",
                    "\r",
                    "\t\tvar fileOwnershipChecked  = selected[0].data.ownership;\r",
                    "\t\tvar fileControllerChecked = selected[0].data.control_right;\r",
                    "\r",
                    "\t\tvar fileLockChecked       = selected[0].data.lock;\r",
                    "\t\tvar fileOpenChecked       = selected[0].data.open_status;\r",
                    "\r",
                    "\t\tvar lcUserId              = selected[0].data.id_lc_by;\r",
                    "\r",
                    "\t\tvar fileSizeUpper = selected[0].data.file_size_upper;\r",
                    "\t\tvar fileSize      = selected[0].data.file_size;\r",
                    "\t\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\t\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\t\tfile_size_formatted = '0 B';\r",
                    "\t\t} else {\r",
                    "\t\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateCreated = selected[0].data.created_at;\r",
                    "\t\tvar DateCreated_formated;\r",
                    "\r",
                    "\t\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\t\tDateCreated_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\t\tcreated_at: DateCreated_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateModified = selected[0].data.updated_at;\r",
                    "\t\tvar DateModified_formated;\r",
                    "\r",
                    "\t\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\t\tDateModified_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\t\tupdated_at: DateModified_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateProduced = selected[0].data.produced_date;\r",
                    "\t\tvar DateProduced_formated;\r",
                    "\r",
                    "\t\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\t\tDateProduced_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\t\tproduced_date: DateProduced_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t\t//console.log(targetStatus);\r",
                    "\r",
                    "\t\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\t\ttargetStatus = true;\r",
                    "\t\t} else {\r",
                    "\t\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\t\t//if (fileControllerChecked === true) {\r",
                    "\t\tvar dataFi = Ext.apply({session_id: this_session_id}, selected[0].raw);\r",
                    "\t\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\t\tExt.Ajax.request({\r",
                    "\t\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t\t//url: 'php/request.php',\r",
                    "\t\t\tjsonData: dataFi,\r",
                    "\t\t\tsuccess: handleSuccess,\r",
                    "\t\t\tfailure: handleFailure\r",
                    "\t\t});\r",
                    "\t\t//} else return;\r",
                    "\t}\r",
                    "} else {\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#listGridPanelA"
            },
            "designerId": "461f1931-8e33-4d45-973c-64abe5fa09e4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelSelectionChangeFiB",
                "implHandler": [
                    "var targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\r",
                    "if (Ext.isEmpty(targetStatus)) { targetStatus = true;}\r",
                    "\r",
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\r",
                    "\tif (selected[0].data.file_type === 'folder') {\r",
                    "\t\tvar viewFolder = viewFile;\r",
                    "\t\trecord = selected[0];\r",
                    "\t\trecord.data.folder_name            = selected[0].data.file_name;\r",
                    "\t\trecord.data.text                   = selected[0].data.file_name;\r",
                    "\t\trecord.data.img                    = selected[0].data.icon_image;\r",
                    "\t\trecord.data.updater                = selected[0].data.modifier;\r",
                    "\t\trecord.data.updated_at             = selected[0].data.updated_at;\r",
                    "\t\trecord.data.parent_readable_status = selected[0].data.folder_readable_status;\r",
                    "\t\trecord.data.parent_writable_status = selected[0].data.folder_writable_status;\r",
                    "\t\trecord.data.folder_readable_status = selected[0].data.file_readable_status;\r",
                    "\t\trecord.data.folder_writable_status = selected[0].data.file_writable_status;\r",
                    "\t\trecord.data.cls                    = selected[0].data.file_type;\r",
                    "\r",
                    "\t\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\r",
                    "\t\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\t\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\t\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\t\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\t\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\t\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\t\toriginal_place: \"file_list\"\r",
                    "\t\t});\r",
                    "\t\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\t\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\t\toriginal_place: \"file_list\"\r",
                    "\t\t});\r",
                    "\t\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\t\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\t\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\t\toriginal_place: \"file_list\"\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateCreated = record.data.created_at;\r",
                    "\t\tvar DateCreated_formated;\r",
                    "\r",
                    "\t\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\t\tDateCreated_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\t\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\t\tcreated_at: DateCreated_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateModified = record.data.updated_at;\r",
                    "\t\tvar DateModified_formated;\r",
                    "\r",
                    "\t\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\t\tDateModified_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\t\tupdated_at: DateModified_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar owner_right;\r",
                    "\t\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\t\towner_right = 'full';\r",
                    "\t\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\t\towner_right = 'read_only';\r",
                    "\t\t} else {\r",
                    "\t\t\towner_right = \"\";\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\t\ttext:           record.data.text,\r",
                    "\t\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\t\thash_key:       record.data.hash_key,\r",
                    "\t\t\tcont_location:  record.data.cont_location,\r",
                    "\t\t\towner:          owner_right,\r",
                    "\t\t\tother_readable: record.data.other_readable,\r",
                    "\t\t\tother_writable: record.data.other_writable\r",
                    "\t\t});\r",
                    "\t\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\t\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\t\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\t\tactiveFolderB_name:     record.data.folder_name,\r",
                    "\t\t\tactiveFolderB_hash:     record.data.hash_key,\r",
                    "\t\t\tactiveFolderB_readable: record.data.folder_readable_status,\r",
                    "\t\t\tactiveFolderB_writable: record.data.folder_writable_status\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\t\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\t\tvar ownerChecked      = record.data.ownership;\r",
                    "\t\tvar controllerChecked = record.data.control_right;\r",
                    "\t\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "\t} else {\r",
                    "\t\trecord = selected[0];\r",
                    "\t\tviewFile.down('#showThumbnail').update(selected[0].data);\r",
                    "\t\tviewFile.down('#showFileProperty').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#showFileExtension').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#showFileDetails').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#openFile').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#openVer').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#openApp').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#ccpdFile').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#checkOut').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#changeLock').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#changeOwner').loadRecord(selected[0]);\r",
                    "\t\tviewFile.down('#sendMail').loadRecord(selected[0]);\r",
                    "\r",
                    "\t\tvar owner_right;\r",
                    "\t\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\t\towner_right = 'full';\r",
                    "\t\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\t\towner_right = 'read_only';\r",
                    "\t\t} else {\r",
                    "\t\t\towner_right = \"\";\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\t\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\t\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\t\tfile_name:      record.data.file_name,\r",
                    "\t\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\t\thash_key:       record.data.hash_key,\r",
                    "\t\t\tcont_location:  record.data.cont_location,\r",
                    "\t\t\towner_access:   owner_right,\r",
                    "\t\t\tother_readable: record.data.other_readable,\r",
                    "\t\t\tother_writable: record.data.other_writable\r",
                    "\t\t});\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\t\tviewFile.down('#searchGroupFile').loadRecord(selected[0]);\r",
                    "\r",
                    "\t\tvar folderReadChecked     = selected[0].data.folder_readable_status;\r",
                    "\t\tvar folderWriteChecked    = selected[0].data.folder_writable_status;\r",
                    "\t\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\t\tvar fileReadChecked       = selected[0].data.file_readable_status;\r",
                    "\t\tvar fileWriteChecked      = selected[0].data.file_writable_status;\r",
                    "\t\tvar fileOwnershipChecked  = selected[0].data.ownership;\r",
                    "\t\tvar fileControllerChecked = selected[0].data.control_right;\r",
                    "\r",
                    "\t\tvar fileLockChecked       = selected[0].data.lock;\r",
                    "\t\tvar fileOpenChecked       = selected[0].data.open_status;\r",
                    "\r",
                    "\t\tvar lcUserId              = selected[0].data.id_lc_by;\r",
                    "\r",
                    "\t\tvar fileSizeUpper = selected[0].data.file_size_upper;\r",
                    "\t\tvar fileSize      = selected[0].data.file_size;\r",
                    "\t\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\t\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\t\tfile_size_formatted = '0 B';\r",
                    "\t\t} else {\r",
                    "\t\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateCreated = selected[0].data.created_at;\r",
                    "\t\tvar DateCreated_formated;\r",
                    "\r",
                    "\t\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\t\tDateCreated_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\t\tcreated_at: DateCreated_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateModified = selected[0].data.updated_at;\r",
                    "\t\tvar DateModified_formated;\r",
                    "\r",
                    "\t\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\t\tDateModified_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\t\tupdated_at: DateModified_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar DateProduced = selected[0].data.produced_date;\r",
                    "\t\tvar DateProduced_formated;\r",
                    "\r",
                    "\t\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\t\tDateProduced_formated = ' - ';\r",
                    "\t\t} else {\r",
                    "\t\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\t\tproduced_date: DateProduced_formated\r",
                    "\t\t});\r",
                    "\r",
                    "\t\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t\t//console.log(targetStatus);\r",
                    "\r",
                    "\t\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\t\ttargetStatus = true;\r",
                    "\t\t} else {\r",
                    "\t\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t\t}\r",
                    "\r",
                    "\t\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\t\tvar dataFi = Ext.apply({session_id: this_session_id}, selected[0].raw);\r",
                    "\t\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\t\tExt.Ajax.request({\r",
                    "\t\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t\t//url: 'php/request.php',\r",
                    "\t\t\tjsonData: dataFi,\r",
                    "\t\t\tsuccess: handleSuccess,\r",
                    "\t\t\tfailure: handleFailure\r",
                    "\t\t});\r",
                    "\t}\r",
                    "} else return;\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}\r",
                    ""
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#listGridPanelB"
            },
            "designerId": "20349fc5-a2c8-403a-9d61-b995ef372e5b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridpanelSelectionChangeFiS",
                "implHandler": [
                    "var targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "if (Ext.isEmpty(targetStatus)) { targetStatus = true;}\r",
                    "\r",
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selected).length !== 0) {\r",
                    "\trecord = selected[0];\r",
                    "\r",
                    "\tviewFile.down('#showThumbnail').update(selected[0].data);\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#openFile').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#openVer').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#openApp').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#checkOut').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#changeLock').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(selected[0]);\r",
                    "\tviewFile.down('#sendMail').loadRecord(selected[0]);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(selected[0]);\r",
                    "\r",
                    "\tvar folderReadChecked     = selected[0].data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = selected[0].data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = selected[0].data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = selected[0].data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = selected[0].data.ownership;\r",
                    "\tvar fileControllerChecked = selected[0].data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = selected[0].data.lock;\r",
                    "\tvar fileOpenChecked       = selected[0].data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = selected[0].data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = selected[0].data.file_size_upper;\r",
                    "\tvar fileSize      = selected[0].data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = selected[0].data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = selected[0].data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = selected[0].data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, selected[0].raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "} else return;\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.grid.Panel",
                "designer|controlQuery": "#searchedListGridPanel"
            },
            "designerId": "306c00e5-abff-4252-aa27-2a592e4a32fb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreeviewSelectionChangeCMDA",
                "implHandler": [
                    "var folderPanelName  = '';\r",
                    "folderPanelName  = 'フォルダ1 -';\r",
                    "var folderPanelTitle = 'targetA';\r",
                    "var originalReadStatus;\r",
                    "var originalWriteStatus;\r",
                    "\r",
                    "if (Ext.isEmpty(originalReadStatus))  { originalReadStatus = true;}\r",
                    "if (Ext.isEmpty(originalWriteStatus)) { originalWriteStatus = true;}\r",
                    "\r",
                    "originalReadStatus  = Ext.getCmp('folder_readable_status').value;\r",
                    "originalWriteStatus = Ext.getCmp('folder_writable_status').value;\r",
                    "\r",
                    "var viewFolder = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selections).length !== 0) {\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(selections[0]);\r",
                    "\r",
                    "\tvar readChecked  = selections[0].data.target_folder_readable_status;\r",
                    "\tvar writeChecked = selections[0].data.target_folder_writable_status;\r",
                    "\tvar ownerChecked = selections[0].data.target_ownership;\r",
                    "\r",
                    "\tshowFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);\r",
                    "\r",
                    "\toriginalReadStatus    = Boolean(originalReadStatus);\r",
                    "\toriginalWriteStatus   = Boolean(originalWriteStatus);\r",
                    "\twriteChecked          = Boolean(writeChecked);\r",
                    "\tdoCheckTargetFolder(originalReadStatus, originalWriteStatus, writeChecked);\r",
                    "\r",
                    "} else return;"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.View",
                "designer|controlQuery": "#targetA"
            },
            "designerId": "ab715c44-08d0-48b1-a841-92f5b14d2977"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreeviewSelectionChangeCMDB",
                "implHandler": [
                    "var folderPanelName  = '';\r",
                    "folderPanelName  = 'フォルダ2 -';\r",
                    "var folderPanelTitle = 'targetB';\r",
                    "var originalReadStatus;\r",
                    "var originalWriteStatus;\r",
                    "\r",
                    "if (Ext.isEmpty(originalReadStatus))  { originalReadStatus = true;}\r",
                    "if (Ext.isEmpty(originalWriteStatus)) { originalWriteStatus = true;}\r",
                    "\r",
                    "originalReadStatus  = Ext.getCmp('folder_readable_status').value;\r",
                    "originalWriteStatus = Ext.getCmp('folder_writable_status').value;\r",
                    "\r",
                    "var viewFolder = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selections).length !== 0) {\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(selections[0]);\r",
                    "\r",
                    "\tvar readChecked  = selections[0].data.target_folder_readable_status;\r",
                    "\tvar writeChecked = selections[0].data.target_folder_writable_status;\r",
                    "\tvar ownerChecked = selections[0].data.target_ownership;\r",
                    "\r",
                    "\tshowFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);\r",
                    "\r",
                    "\toriginalReadStatus    = Boolean(originalReadStatus);\r",
                    "\toriginalWriteStatus   = Boolean(originalWriteStatus);\r",
                    "\twriteChecked          = Boolean(writeChecked);\r",
                    "\tdoCheckTargetFolder(originalReadStatus, originalWriteStatus, writeChecked);\r",
                    "\r",
                    "} else return;"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.View",
                "designer|controlQuery": "#targetB"
            },
            "designerId": "8561da48-dd1b-4a0e-8fd5-ee4b2ef89c04"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "FileView",
                "selector": "#teamDomain"
            },
            "designerId": "682a6e42-3ee8-4f67-92e0-6e5b5932246c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "FolderView",
                "selector": "#teamDomain"
            },
            "designerId": "7e2ae3db-c822-4fa6-a2ac-dddfae68dd2f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "DomainView",
                "selector": "#teamDomain"
            },
            "designerId": "8f7c4fd9-6090-4a5e-ada3-cd31d632de0c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreeviewSelectionChangeCMDFiA",
                "implHandler": [
                    "var folderPanelName  = '';\r",
                    "folderPanelName  = 'フォルダ1 -';\r",
                    "var folderPanelTitle = 'targetFiA';\r",
                    "\r",
                    "var viewFolder = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selections).length !== 0) {\r",
                    "\tviewFolder.down('#ccpdFile').loadRecord(selections[0]);\r",
                    "\r",
                    "\tvar targetReadChecked      = selections[0].data.target_folder_readable_status;\r",
                    "\tvar targetWriteChecked     = selections[0].data.target_folder_writable_status;\r",
                    "\tvar targetOwnerChecked     = selections[0].data.target_ownership;\r",
                    "\tvar fileOpenChecked  = selections[0].data.target_open_status;\r",
                    "\r",
                    "\tshowFolderTitle(targetReadChecked, targetWriteChecked, targetOwnerChecked, folderPanelName, folderPanelTitle);\r",
                    "\r",
                    "\t//var targetReadChecked  = readChecked;\r",
                    "\t//var targetWriteChecked = writeChecked;\r",
                    "\tvar fileLockChecked    = Ext.getCmp('lock_status').value;\r",
                    "\tfileLockChecked    = parseInt(fileLockChecked, 10);\r",
                    "\tvar fileWriteChecked   = Ext.getCmp('file_writable').value;\r",
                    "\tfileWriteChecked   = Boolean(fileWriteChecked);\r",
                    "\r",
                    "\tvar originalReadChecked  = Ext.getCmp('folder_readable_status').value;\r",
                    "\tvar originalWriteChecked = Ext.getCmp('folder_writable_status').value;\r",
                    "\r",
                    "\tif (Ext.isEmpty(originalReadChecked))  { originalReadChecked  = true;}\r",
                    "\tif (Ext.isEmpty(originalWriteChecked)) { originalWriteChecked = true;}\r",
                    "\r",
                    "\toriginalReadChecked   = Boolean(originalReadChecked);\r",
                    "\toriginalWriteChecked  = Boolean(originalWriteChecked);\r",
                    "\r",
                    "\tdoCheckTargetFolderFi(originalReadChecked, originalWriteChecked, targetWriteChecked, fileLockChecked, fileWriteChecked, fileOpenChecked);\r",
                    "\r",
                    "} else return;"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.View",
                "designer|controlQuery": "#targetFiA"
            },
            "designerId": "12ccaebb-99d3-4980-b42f-3d2964fbebcd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTreebiewSelectionChangeCMDFiB",
                "implHandler": [
                    "var folderPanelName  = '';\r",
                    "folderPanelName  = 'フォルダ2 -';\r",
                    "var folderPanelTitle = 'targetFiB';\r",
                    "\r",
                    "var viewFolder = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (Object.keys(selections).length !== 0) {\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFile').loadRecord(selections[0]);\r",
                    "\r",
                    "\tvar targetReadChecked      = selections[0].data.target_folder_readable_status;\r",
                    "\tvar targetWriteChecked     = selections[0].data.target_folder_writable_status;\r",
                    "\tvar targetOwnerChecked     = selections[0].data.target_ownership;\r",
                    "\tvar fileOpenChecked  = selections[0].data.target_open_status;\r",
                    "\r",
                    "\tshowFolderTitle(targetReadChecked, targetWriteChecked, targetOwnerChecked, folderPanelName, folderPanelTitle);\r",
                    "\r",
                    "\t//var targetReadChecked  = readChecked;\r",
                    "\t//var targetWriteChecked = writeChecked;\r",
                    "\tvar fileLockChecked    = Ext.getCmp('lock_status').value;\r",
                    "\tfileLockChecked    = parseInt(fileLockChecked, 10);\r",
                    "\tvar fileWriteChecked   = Ext.getCmp('file_writable').value;\r",
                    "\tfileWriteChecked   = Boolean(fileWriteChecked);\r",
                    "\r",
                    "\tvar originalReadChecked  = Ext.getCmp('folder_readable_status').value;\r",
                    "\tvar originalWriteChecked = Ext.getCmp('folder_writable_status').value;\r",
                    "\r",
                    "\tif (Ext.isEmpty(originalReadChecked))  { originalReadChecked  = true;}\r",
                    "\tif (Ext.isEmpty(originalWriteChecked)) { originalWriteChecked = true;}\r",
                    "\r",
                    "\toriginalReadChecked   = Boolean(originalReadChecked);\r",
                    "\toriginalWriteChecked  = Boolean(originalWriteChecked);\r",
                    "\r",
                    "\tdoCheckTargetFolderFi(originalReadChecked, originalWriteChecked, targetWriteChecked, fileLockChecked, fileWriteChecked, fileOpenChecked);\r",
                    "\r",
                    "} else return;"
                ],
                "name": "selectionchange",
                "scope": "me",
                "designer|targetType": "Ext.tree.View",
                "designer|controlQuery": "#targetFiB"
            },
            "designerId": "79ee17d9-d820-480b-b228-ef4c441af147"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickAI",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (record.data.file_type === 'folder') {\r",
                    "\tvar viewFolder = viewFile;\r",
                    "\r",
                    "\trecord.data.folder_name            = record.data.file_name;\r",
                    "\trecord.data.text                   = record.data.file_name;\r",
                    "\trecord.data.img                    = record.data.icon_image;\r",
                    "\trecord.data.updater                = record.data.modifier;\r",
                    "\trecord.data.updated_at             = record.data.updated_at;\r",
                    "\trecord.data.parent_readable_status = record.data.folder_readable_status;\r",
                    "\trecord.data.parent_writable_status = record.data.folder_writable_status;\r",
                    "\trecord.data.folder_readable_status = record.data.file_readable_status;\r",
                    "\trecord.data.folder_writable_status = record.data.file_writable_status;\r",
                    "\trecord.data.cls                    = record.data.file_type;\r",
                    "\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           record.data.text,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderA_name:     record.data.folder_name,\r",
                    "\t\tactiveFolderA_hash:     record.data.hash_key,\r",
                    "\t\tactiveFolderA_readable: record.data.folder_readable_status,\r",
                    "\t\tactiveFolderA_writable: record.data.folder_writable_status\r",
                    "\t});\r",
                    "\r",
                    "\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\tvar ownerChecked      = record.data.ownership;\r",
                    "\tvar controllerChecked = record.data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "} else {\r",
                    "\tviewFile.down('#showThumbnail').update(record.data);\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(record);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(record);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(record);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(record);\r",
                    "\tviewFile.down('#openFile').loadRecord(record);\r",
                    "\tviewFile.down('#openVer').loadRecord(record);\r",
                    "\tviewFile.down('#openApp').loadRecord(record);\r",
                    "\tviewFile.down('#checkOut').loadRecord(record);\r",
                    "\tviewFile.down('#changeLock').loadRecord(record);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(record);\r",
                    "\tviewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "\tvar folderReadChecked     = record.data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = record.data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = record.data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = record.data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = record.data.ownership;\r",
                    "\tvar fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = record.data.lock;\r",
                    "\tvar fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = record.data.file_size_upper;\r",
                    "\tvar fileSize      = record.data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = record.data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#iconViewA"
            },
            "designerId": "fe00137f-4670-41c5-9e40-43426e621e73"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickATB",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (record.data.file_type === 'folder') {\r",
                    "\tvar viewFolder = viewFile;\r",
                    "\trecord.data.folder_name            = record.data.file_name;\r",
                    "\trecord.data.text                   = record.data.file_name;\r",
                    "\trecord.data.img                    = record.data.icon_image;\r",
                    "\trecord.data.updater                = record.data.modifier;\r",
                    "\trecord.data.updated_at             = record.data.modified_at;\r",
                    "\trecord.data.parent_readable_status = record.data.folder_readable_status;\r",
                    "\trecord.data.parent_writable_status = record.data.folder_writable_status;\r",
                    "\trecord.data.folder_readable_status = record.data.file_readable_status;\r",
                    "\trecord.data.folder_writable_status = record.data.file_writable_status;\r",
                    "\trecord.data.cls                    = record.data.file_type;\r",
                    "\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           record.data.text,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderA_name:     record.data.folder_name,\r",
                    "\t\tactiveFolderA_hash:     record.data.hash_key,\r",
                    "\t\tactiveFolderA_readable: record.data.folder_readable_status,\r",
                    "\t\tactiveFolderA_writable: record.data.folder_writable_status\r",
                    "\t});\r",
                    "\r",
                    "\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\tvar ownerChecked      = record.data.ownership;\r",
                    "\tvar controllerChecked = record.data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "} else {\r",
                    "\r",
                    "\tviewFile.down('#showThumbnail').update(record.data);\r",
                    "\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(record);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(record);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(record);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(record);\r",
                    "\tviewFile.down('#openFile').loadRecord(record);\r",
                    "\tviewFile.down('#openVer').loadRecord(record);\r",
                    "\tviewFile.down('#openApp').loadRecord(record);\r",
                    "\tviewFile.down('#checkOut').loadRecord(record);\r",
                    "\tviewFile.down('#changeLock').loadRecord(record);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(record);\r",
                    "\tviewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "\tvar folderReadChecked     = record.data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = record.data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = record.data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = record.data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = record.data.ownership;\r",
                    "\tvar fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = record.data.lock;\r",
                    "\tvar fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = record.data.file_size_upper;\r",
                    "\tvar fileSize      = record.data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = record.data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#thumbnailViewAB"
            },
            "designerId": "aeac1a64-a81d-4922-959d-cb6c4c15c97d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickATL",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (record.data.file_type === 'folder') {\r",
                    "\tvar viewFolder = viewFile;\r",
                    "\trecord.data.folder_name            = record.data.file_name;\r",
                    "\trecord.data.text                   = record.data.file_name;\r",
                    "\trecord.data.img                    = record.data.icon_image;\r",
                    "\trecord.data.updater                = record.data.modifier;\r",
                    "\trecord.data.updated_at             = record.data.modified_at;\r",
                    "\trecord.data.parent_readable_status = record.data.folder_readable_status;\r",
                    "\trecord.data.parent_writable_status = record.data.folder_writable_status;\r",
                    "\trecord.data.folder_readable_status = record.data.file_readable_status;\r",
                    "\trecord.data.folder_writable_status = record.data.file_writable_status;\r",
                    "\trecord.data.cls                    = record.data.file_type;\r",
                    "\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           record.data.text,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderA_name:     record.data.folder_name,\r",
                    "\t\tactiveFolderA_hash:     record.data.hash_key,\r",
                    "\t\tactiveFolderA_readable: record.data.folder_readable_status,\r",
                    "\t\tactiveFolderA_writable: record.data.folder_writable_status\r",
                    "\t});\r",
                    "\r",
                    "\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\tvar ownerChecked      = record.data.ownership;\r",
                    "\tvar controllerChecked = record.data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "\r",
                    "} else {\r",
                    "\tviewFile.down('#showThumbnail').update(record.data);\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(record);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(record);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(record);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(record);\r",
                    "\tviewFile.down('#openFile').loadRecord(record);\r",
                    "\tviewFile.down('#openVer').loadRecord(record);\r",
                    "\tviewFile.down('#openApp').loadRecord(record);\r",
                    "\tviewFile.down('#checkOut').loadRecord(record);\r",
                    "\tviewFile.down('#changeLock').loadRecord(record);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(record);\r",
                    "\tviewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "\tvar folderReadChecked     = record.data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = record.data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = record.data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = record.data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = record.data.ownership;\r",
                    "\tvar fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = record.data.lock;\r",
                    "\tvar fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = record.data.file_size_upper;\r",
                    "\tvar fileSize      = record.data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = record.data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#thumbnailViewAL"
            },
            "designerId": "abb41aac-e889-4a48-b4fb-d7e5a2dd41bc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickBI",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (record.data.file_type === 'folder') {\r",
                    "\tvar viewFolder = viewFile;\r",
                    "\trecord.data.folder_name            = record.data.file_name;\r",
                    "\trecord.data.text                   = record.data.file_name;\r",
                    "\trecord.data.img                    = record.data.icon_image;\r",
                    "\trecord.data.updater                = record.data.modifier;\r",
                    "\trecord.data.updated_at             = record.data.modified_at;\r",
                    "\trecord.data.parent_readable_status = record.data.folder_readable_status;\r",
                    "\trecord.data.parent_writable_status = record.data.folder_writable_status;\r",
                    "\trecord.data.folder_readable_status = record.data.file_readable_status;\r",
                    "\trecord.data.folder_writable_status = record.data.file_writable_status;\r",
                    "\trecord.data.cls                    = record.data.file_type;\r",
                    "\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           record.data.text,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderB_name:     record.data.folder_name,\r",
                    "\t\tactiveFolderB_hash:     record.data.hash_key,\r",
                    "\t\tactiveFolderB_readable: record.data.folder_readable_status,\r",
                    "\t\tactiveFolderB_writable: record.data.folder_writable_status\r",
                    "\t});\r",
                    "\r",
                    "\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\tvar ownerChecked      = record.data.ownership;\r",
                    "\tvar controllerChecked = record.data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "} else {\r",
                    "\tviewFile.down('#showThumbnail').update(record.data);\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(record);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(record);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(record);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(record);\r",
                    "\tviewFile.down('#openFile').loadRecord(record);\r",
                    "\tviewFile.down('#openVer').loadRecord(record);\r",
                    "\tviewFile.down('#openApp').loadRecord(record);\r",
                    "\tviewFile.down('#checkOut').loadRecord(record);\r",
                    "\tviewFile.down('#changeLock').loadRecord(record);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(record);\r",
                    "\tviewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "\tvar folderReadChecked     = record.data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = record.data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = record.data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = record.data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = record.data.ownership;\r",
                    "\tvar fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = record.data.lock;\r",
                    "\tvar fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = record.data.file_size_upper;\r",
                    "\tvar fileSize      = record.data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = record.data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#iconViewB"
            },
            "designerId": "07db908b-bc00-4485-b068-e623759bbfc9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickBTB",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (record.data.file_type === 'folder') {\r",
                    "\tvar viewFolder = viewFile;\r",
                    "\trecord.data.folder_name            = record.data.file_name;\r",
                    "\trecord.data.text                   = record.data.file_name;\r",
                    "\trecord.data.img                    = record.data.icon_image;\r",
                    "\trecord.data.updater                = record.data.modifier;\r",
                    "\trecord.data.updated_at             = record.data.modified_at;\r",
                    "\trecord.data.parent_readable_status = record.data.folder_readable_status;\r",
                    "\trecord.data.parent_writable_status = record.data.folder_writable_status;\r",
                    "\trecord.data.folder_readable_status = record.data.file_readable_status;\r",
                    "\trecord.data.folder_writable_status = record.data.file_writable_status;\r",
                    "\trecord.data.cls                    = record.data.file_type;\r",
                    "\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           record.data.text,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderB_name:     record.data.folder_name,\r",
                    "\t\tactiveFolderB_hash:     record.data.hash_key,\r",
                    "\t\tactiveFolderB_readable: record.data.folder_readable_status,\r",
                    "\t\tactiveFolderB_writable: record.data.folder_writable_status\r",
                    "\t});\r",
                    "\r",
                    "\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\tvar ownerChecked      = record.data.ownership;\r",
                    "\tvar controllerChecked = record.data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "} else {\r",
                    "\tviewFile.down('#showThumbnail').update(record.data);\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(record);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(record);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(record);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(record);\r",
                    "\tviewFile.down('#openFile').loadRecord(record);\r",
                    "\tviewFile.down('#openVer').loadRecord(record);\r",
                    "\tviewFile.down('#openApp').loadRecord(record);\r",
                    "\tviewFile.down('#checkOut').loadRecord(record);\r",
                    "\tviewFile.down('#changeLock').loadRecord(record);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(record);\r",
                    "\tviewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "\tvar folderReadChecked     = record.data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = record.data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = record.data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = record.data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = record.data.ownership; \r",
                    "\tvar fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = record.data.lock;\r",
                    "\tvar fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = record.data.file_size_upper;\r",
                    "\tvar fileSize      = record.data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = record.data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#thumbnailViewBB"
            },
            "designerId": "b9d96e14-5507-47cb-8cb9-f50eb7c48252"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickBTL",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "if (record.data.file_type === 'folder') {\r",
                    "\tvar viewFolder = viewFile;\r",
                    "\trecord.data.folder_name            = record.data.file_name;\r",
                    "\trecord.data.text                   = record.data.file_name;\r",
                    "\trecord.data.img                    = record.data.icon_image;\r",
                    "\trecord.data.updater                = record.data.modifier;\r",
                    "\trecord.data.updated_at             = record.data.modified_at;\r",
                    "\trecord.data.parent_readable_status = record.data.folder_readable_status;\r",
                    "\trecord.data.parent_writable_status = record.data.folder_writable_status;\r",
                    "\trecord.data.folder_readable_status = record.data.file_readable_status;\r",
                    "\trecord.data.folder_writable_status = record.data.file_writable_status;\r",
                    "\trecord.data.cls                    = record.data.file_type;\r",
                    "\r",
                    "\tviewFolder.down('#showFolderThumbnail').update(record.data);\r",
                    "\tviewFolder.down('#showFolderProperty').loadRecord(record);\r",
                    "\tviewFolder.down('#releaseFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#obtainFolderOwnership').loadRecord(record);\r",
                    "\tviewFolder.down('#createFolder').loadRecord(record);\r",
                    "\tviewFolder.down('#createFile').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createFile')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#createSubFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\tviewFolder.down('#searchCondition').loadRecord(record);\r",
                    "\r",
                    "\tviewFolder.down('#ccpdFolder').loadRecord(record);\r",
                    "\tExt.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({\r",
                    "\t\toriginal_place: \"file_list\"\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFolderProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('folderPrivilege').getForm().setValues({\r",
                    "\t\ttext:           record.data.text,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner:          owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_folder_bar').moveFirst();\r",
                    "\r",
                    "\tviewFolder.down('#searchGroupFolder').loadRecord(record);\r",
                    "\r",
                    "\tExt.getCmp('activeData').getForm().setValues({\r",
                    "\t\tactiveFolderB_name:     record.data.folder_name,\r",
                    "\t\tactiveFolderB_hash:     record.data.hash_key,\r",
                    "\t\tactiveFolderB_readable: record.data.folder_readable_status,\r",
                    "\t\tactiveFolderB_writable: record.data.folder_writable_status\r",
                    "\t});\r",
                    "\r",
                    "\tvar readChecked       = record.data.folder_readable_status;\r",
                    "\tvar writeChecked      = record.data.folder_writable_status;\r",
                    "\tvar ownerChecked      = record.data.ownership;\r",
                    "\tvar controllerChecked = record.data.control_right;\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable').value;\r",
                    "} else {\r",
                    "\tviewFile.down('#showThumbnail').update(record.data);\r",
                    "\tviewFile.down('#showFileProperty').loadRecord(record);\r",
                    "\tviewFile.down('#showFileExtension').loadRecord(record);\r",
                    "\tviewFile.down('#showFileDetails').loadRecord(record);\r",
                    "\tviewFile.down('#ccpdFile').loadRecord(record);\r",
                    "\tviewFile.down('#openFile').loadRecord(record);\r",
                    "\tviewFile.down('#openVer').loadRecord(record);\r",
                    "\tviewFile.down('#openApp').loadRecord(record);\r",
                    "\tviewFile.down('#checkOut').loadRecord(record);\r",
                    "\tviewFile.down('#changeLock').loadRecord(record);\r",
                    "\tviewFile.down('#changeOwner').loadRecord(record);\r",
                    "\tviewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "\tvar owner_right;\r",
                    "\tif (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\t\towner_right = 'full';\r",
                    "\t} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\t\towner_right = 'read_only';\r",
                    "\t} else {\r",
                    "\t\towner_right = \"\";\r",
                    "\t}\r",
                    "\r",
                    "\tif (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "\tif (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "\tExt.getCmp('filePrivilege').getForm().setValues({\r",
                    "\t\tfile_name:      record.data.file_name,\r",
                    "\t\towner_name:\t\trecord.data.owner,\r",
                    "\t\thash_key:       record.data.hash_key,\r",
                    "\t\tcont_location:  record.data.cont_location,\r",
                    "\t\towner_access:   owner_right,\r",
                    "\t\tother_readable: record.data.other_readable,\r",
                    "\t\tother_writable: record.data.other_writable\r",
                    "\t});\r",
                    "\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "\tviewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "\tvar folderReadChecked     = record.data.folder_readable_status;\r",
                    "\tvar folderWriteChecked    = record.data.folder_writable_status;\r",
                    "\tif (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "\tvar fileReadChecked       = record.data.file_readable_status;\r",
                    "\tvar fileWriteChecked      = record.data.file_writable_status;\r",
                    "\tvar fileOwnershipChecked  = record.data.ownership;\r",
                    "\tvar fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "\tvar fileLockChecked       = record.data.lock;\r",
                    "\tvar fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "\tvar lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "\tvar fileSizeUpper = record.data.file_size_upper;\r",
                    "\tvar fileSize      = record.data.file_size;\r",
                    "\tvar fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "\tif (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\t\tfile_size_formatted = '0 B';\r",
                    "\t} else {\r",
                    "\t\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\t\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tfile_exact_disp_size: file_size_formatted\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateCreated = record.data.created_at;\r",
                    "\tvar DateCreated_formated;\r",
                    "\r",
                    "\tif (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\t\tDateCreated_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tcreated_at: DateCreated_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateModified = record.data.updated_at;\r",
                    "\tvar DateModified_formated;\r",
                    "\r",
                    "\tif (DateModified === 0 || DateModified === \"\") {\r",
                    "\t\tDateModified_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileProperty').getForm().setValues({\r",
                    "\t\tupdated_at: DateModified_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar DateProduced = record.data.produced_date;\r",
                    "\tvar DateProduced_formated;\r",
                    "\r",
                    "\tif (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\t\tDateProduced_formated = ' - ';\r",
                    "\t} else {\r",
                    "\t\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "\t}\r",
                    "\r",
                    "\tExt.getCmp('showFileExtension').getForm().setValues({\r",
                    "\t\tproduced_date: DateProduced_formated\r",
                    "\t});\r",
                    "\r",
                    "\tvar targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "\t//console.log(targetStatus);\r",
                    "\r",
                    "\tif (Ext.isEmpty(targetStatus)) {\r",
                    "\t\ttargetStatus = true;\r",
                    "\t} else {\r",
                    "\t\ttargetStatus = Boolean(targetStatus);\r",
                    "\t}\r",
                    "\r",
                    "\tdoCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "\tvar dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "\tdataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "\tExt.Ajax.request({\r",
                    "\t\turl: 'tdx/updatedata.tdx',\r",
                    "\t\t//url: 'php/request.php',\r",
                    "\t\tjsonData: dataFi,\r",
                    "\t\tsuccess: handleSuccess,\r",
                    "\t\tfailure: handleFailure\r",
                    "\t});\r",
                    "}\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#thumbnailViewBL"
            },
            "designerId": "c2411bb7-9281-4fc8-a706-6fcea438c3b2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickSI",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "viewFile.down('#showThumbnail').update(record.data);\r",
                    "\r",
                    "viewFile.down('#showFileProperty').loadRecord(record);\r",
                    "viewFile.down('#showFileExtension').loadRecord(record);\r",
                    "viewFile.down('#showFileDetails').loadRecord(record);\r",
                    "viewFile.down('#ccpdFile').loadRecord(record);\r",
                    "viewFile.down('#openFile').loadRecord(record);\r",
                    "viewFile.down('#openVer').loadRecord(record);\r",
                    "viewFile.down('#openApp').loadRecord(record);\r",
                    "viewFile.down('#checkOut').loadRecord(record);\r",
                    "viewFile.down('#changeLock').loadRecord(record);\r",
                    "viewFile.down('#changeOwner').loadRecord(record);\r",
                    "viewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "var owner_right;\r",
                    "if (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\towner_right = 'full';\r",
                    "} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\towner_right = 'read_only';\r",
                    "} else {\r",
                    "\towner_right = \"\";\r",
                    "}\r",
                    "\r",
                    "if (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "if (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "Ext.getCmp('filePrivilege').getForm().setValues({\r",
                    "\tfile_name:      record.data.file_name,\r",
                    "\towner_name:\t\trecord.data.owner,\r",
                    "\thash_key:       record.data.hash_key,\r",
                    "\tcont_location:  record.data.cont_location,\r",
                    "\towner_access:   owner_right,\r",
                    "\tother_readable: record.data.other_readable,\r",
                    "\tother_writable: record.data.other_writable\r",
                    "});\r",
                    "//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "viewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "var folderReadChecked     = record.data.folder_readable_status;\r",
                    "var folderWriteChecked    = record.data.folder_writable_status;\r",
                    "if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "var fileReadChecked       = record.data.file_readable_status;\r",
                    "var fileWriteChecked      = record.data.file_writable_status;\r",
                    "var fileOwnershipChecked  = record.data.ownership;\r",
                    "var fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "var fileLockChecked       = record.data.lock;\r",
                    "var fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "var lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "var fileSizeUpper = record.data.file_size_upper;\r",
                    "var fileSize      = record.data.file_size;\r",
                    "var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "if (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\tfile_size_formatted = '0 B';\r",
                    "} else {\r",
                    "\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tfile_exact_disp_size: file_size_formatted\r",
                    "});\r",
                    "\r",
                    "var DateCreated = record.data.created_at;\r",
                    "var DateCreated_formated;\r",
                    "\r",
                    "if (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\tDateCreated_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tcreated_at: DateCreated_formated\r",
                    "});\r",
                    "\r",
                    "var DateModified = record.data.updated_at;\r",
                    "var DateModified_formated;\r",
                    "\r",
                    "if (DateModified === 0 || DateModified === \"\") {\r",
                    "\tDateModified_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tupdated_at: DateModified_formated\r",
                    "});\r",
                    "\r",
                    "var DateProduced = record.data.produced_date;\r",
                    "var DateProduced_formated;\r",
                    "\r",
                    "if (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\tDateProduced_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileExtension').getForm().setValues({\r",
                    "\tproduced_date: DateProduced_formated\r",
                    "});\r",
                    "\r",
                    "var targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "//console.log(targetStatus);\r",
                    "\r",
                    "if (Ext.isEmpty(targetStatus)) {\r",
                    "\ttargetStatus = true;\r",
                    "} else {\r",
                    "\ttargetStatus = Boolean(targetStatus);\r",
                    "}\r",
                    "\r",
                    "doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "var dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "dataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "\turl: 'tdx/updatedata.tdx',\r",
                    "\t//url: 'php/request.php',\r",
                    "\tjsonData: dataFi,\r",
                    "\tsuccess: handleSuccess,\r",
                    "\tfailure: handleFailure\r",
                    "});\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#iconViewS"
            },
            "designerId": "ee513d02-f4f1-4fd5-b198-2edb99f9fe43"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickSTB",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "viewFile.down('#showThumbnail').update(record.data);\r",
                    "\r",
                    "viewFile.down('#showFileProperty').loadRecord(record);\r",
                    "viewFile.down('#showFileExtension').loadRecord(record);\r",
                    "viewFile.down('#showFileDetails').loadRecord(record);\r",
                    "viewFile.down('#ccpdFile').loadRecord(record);\r",
                    "viewFile.down('#openFile').loadRecord(record);\r",
                    "viewFile.down('#openVer').loadRecord(record);\r",
                    "viewFile.down('#openApp').loadRecord(record);\r",
                    "viewFile.down('#checkOut').loadRecord(record);\r",
                    "viewFile.down('#changeLock').loadRecord(record);\r",
                    "viewFile.down('#changeOwner').loadRecord(record);\r",
                    "viewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "var owner_right;\r",
                    "if (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\towner_right = 'full';\r",
                    "} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\towner_right = 'read_only';\r",
                    "} else {\r",
                    "\towner_right = \"\";\r",
                    "}\r",
                    "\r",
                    "if (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "if (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "Ext.getCmp('filePrivilege').getForm().setValues({\r",
                    "\tfile_name:      record.data.file_name,\r",
                    "\towner_name:\t\trecord.data.owner,\r",
                    "\thash_key:       record.data.hash_key,\r",
                    "\tcont_location:  record.data.cont_location,\r",
                    "\towner_access:   owner_right,\r",
                    "\tother_readable: record.data.other_readable,\r",
                    "\tother_writable: record.data.other_writable\r",
                    "});\r",
                    "//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "viewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "var folderReadChecked     = record.data.folder_readable_status;\r",
                    "var folderWriteChecked    = record.data.folder_writable_status;\r",
                    "if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "var fileReadChecked       = record.data.file_readable_status;\r",
                    "var fileWriteChecked      = record.data.file_writable_status;\r",
                    "var fileOwnershipChecked  = record.data.ownership;\r",
                    "var fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "var fileLockChecked       = record.data.lock;\r",
                    "var fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "var lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "var fileSizeUpper = record.data.file_size_upper;\r",
                    "var fileSize      = record.data.file_size;\r",
                    "var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "if (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\tfile_size_formatted = '0 B';\r",
                    "} else {\r",
                    "\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tfile_exact_disp_size: file_size_formatted\r",
                    "});\r",
                    "\r",
                    "var DateCreated = record.data.created_at;\r",
                    "var DateCreated_formated;\r",
                    "\r",
                    "if (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\tDateCreated_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tcreated_at: DateCreated_formated\r",
                    "});\r",
                    "\r",
                    "var DateModified = record.data.updated_at;\r",
                    "var DateModified_formated;\r",
                    "\r",
                    "if (DateModified === 0 || DateModified === \"\") {\r",
                    "\tDateModified_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tupdated_at: DateModified_formated\r",
                    "});\r",
                    "\r",
                    "var DateProduced = record.data.produced_date;\r",
                    "var DateProduced_formated;\r",
                    "\r",
                    "if (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\tDateProduced_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileExtension').getForm().setValues({\r",
                    "\tproduced_date: DateProduced_formated\r",
                    "});\r",
                    "\r",
                    "var targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "//console.log(targetStatus);\r",
                    "\r",
                    "if (Ext.isEmpty(targetStatus)) {\r",
                    "\ttargetStatus = true;\r",
                    "} else {\r",
                    "\ttargetStatus = Boolean(targetStatus);\r",
                    "}\r",
                    "\r",
                    "doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "var dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "dataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "\turl: 'tdx/updatedata.tdx',\r",
                    "\t//url: 'php/request.php',\r",
                    "\tjsonData: dataFi,\r",
                    "\tsuccess: handleSuccess,\r",
                    "\tfailure: handleFailure\r",
                    "});\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#thumbnailViewSB"
            },
            "designerId": "36f4a483-7657-4754-9693-084bfa817016"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDataviewItemClickSTL",
                "implHandler": [
                    "var viewFile = Ext.ComponentQuery.query('mainView')[0];\r",
                    "\r",
                    "viewFile.down('#showThumbnail').update(record.data);\r",
                    "viewFile.down('#showFileProperty').loadRecord(record);\r",
                    "viewFile.down('#showFileExtension').loadRecord(record);\r",
                    "viewFile.down('#showFileDetails').loadRecord(record);\r",
                    "viewFile.down('#ccpdFile').loadRecord(record);\r",
                    "viewFile.down('#openFile').loadRecord(record);\r",
                    "viewFile.down('#openVer').loadRecord(record);\r",
                    "viewFile.down('#openApp').loadRecord(record);\r",
                    "viewFile.down('#checkOut').loadRecord(record);\r",
                    "viewFile.down('#changeLock').loadRecord(record);\r",
                    "viewFile.down('#changeOwner').loadRecord(record);\r",
                    "viewFile.down('#sendMail').loadRecord(record);\r",
                    "\r",
                    "var owner_right;\r",
                    "if (record.data.file_readable_status === true && record.data.file_writable_status === true) {\r",
                    "\towner_right = 'full';\r",
                    "} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {\r",
                    "\towner_right = 'read_only';\r",
                    "} else {\r",
                    "\towner_right = \"\";\r",
                    "}\r",
                    "\r",
                    "if (!record.data.other_readable) {record.data.other_readable = false;}\r",
                    "if (!record.data.other_writable) {record.data.other_writable = false;}\r",
                    "\r",
                    "Ext.getCmp('filePrivilege').getForm().setValues({\r",
                    "\tfile_name:      record.data.file_name,\r",
                    "\towner_name:\t\trecord.data.owner,\r",
                    "\thash_key:       record.data.hash_key,\r",
                    "\tcont_location:  record.data.cont_location,\r",
                    "\towner_access:   owner_right,\r",
                    "\tother_readable: record.data.other_readable,\r",
                    "\tother_writable: record.data.other_writable\r",
                    "});\r",
                    "//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\r",
                    "viewFile.down('#searchGroupFile').loadRecord(record);\r",
                    "\r",
                    "var folderReadChecked     = record.data.folder_readable_status;\r",
                    "var folderWriteChecked    = record.data.folder_writable_status;\r",
                    "if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}\r",
                    "\r",
                    "var fileReadChecked       = record.data.file_readable_status;\r",
                    "var fileWriteChecked      = record.data.file_writable_status;\r",
                    "var fileOwnershipChecked  = record.data.ownership;\r",
                    "var fileControllerChecked = record.data.control_right;\r",
                    "\r",
                    "var fileLockChecked       = record.data.lock;\r",
                    "var fileOpenChecked       = record.data.open_status;\r",
                    "\r",
                    "var lcUserId              = record.data.id_lc_by;\r",
                    "\r",
                    "var fileSizeUpper = record.data.file_size_upper;\r",
                    "var fileSize      = record.data.file_size;\r",
                    "var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;\r",
                    "\r",
                    "if (fileSizeReal === 0 || fileSizeReal === \"\") {\r",
                    "\tfile_size_formatted = '0 B';\r",
                    "} else {\r",
                    "\tfile_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');\r",
                    "\tfile_size_formatted = file_size_formatted + ' B';\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tfile_exact_disp_size: file_size_formatted\r",
                    "});\r",
                    "\r",
                    "var DateCreated = record.data.created_at;\r",
                    "var DateCreated_formated;\r",
                    "\r",
                    "if (DateCreated === 0 || DateCreated === \"\") {\r",
                    "\tDateCreated_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tcreated_at: DateCreated_formated\r",
                    "});\r",
                    "\r",
                    "var DateModified = record.data.updated_at;\r",
                    "var DateModified_formated;\r",
                    "\r",
                    "if (DateModified === 0 || DateModified === \"\") {\r",
                    "\tDateModified_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileProperty').getForm().setValues({\r",
                    "\tupdated_at: DateModified_formated\r",
                    "});\r",
                    "\r",
                    "var DateProduced = record.data.produced_date;\r",
                    "var DateProduced_formated;\r",
                    "\r",
                    "if (DateProduced === 0 || DateProduced === \"\") {\r",
                    "\tDateProduced_formated = ' - ';\r",
                    "} else {\r",
                    "\tDateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');\r",
                    "}\r",
                    "\r",
                    "Ext.getCmp('showFileExtension').getForm().setValues({\r",
                    "\tproduced_date: DateProduced_formated\r",
                    "});\r",
                    "\r",
                    "var targetStatus = Ext.getCmp('target_folder_writable_status').value;\r",
                    "//console.log(targetStatus);\r",
                    "\r",
                    "if (Ext.isEmpty(targetStatus)) {\r",
                    "\ttargetStatus = true;\r",
                    "} else {\r",
                    "\ttargetStatus = Boolean(targetStatus);\r",
                    "}\r",
                    "\r",
                    "doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);\r",
                    "\r",
                    "var dataFi = Ext.apply({session_id: this_session_id}, record.raw);\r",
                    "dataFi = Ext.apply({request_type: \"change_file\"}, dataFi);\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "\turl: 'tdx/updatedata.tdx',\r",
                    "\t//url: 'php/request.php',\r",
                    "\tjsonData: dataFi,\r",
                    "\tsuccess: handleSuccess,\r",
                    "\tfailure: handleFailure\r",
                    "});\r",
                    "\r",
                    "function handleSuccess(response) {\r",
                    "\tobj = Ext.decode(response.responseText);\r",
                    "\tvar request_success = obj.success;\r",
                    "\r",
                    "\tif (request_success === false) {\r",
                    "\t\tvar request_errors = obj.errors;\r",
                    "\t\tExt.Msg.show({\r",
                    "\t\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\t\tmsg: request_errors,\r",
                    "\t\t\tbuttons: Ext.Msg.OK\r",
                    "\t\t});\r",
                    "\t} else {\r",
                    "\t\t//Ext.getCmp('privilege_file_bar').moveFirst();\r",
                    "\t}\r",
                    "\treturn;\r",
                    "}\r",
                    "\r",
                    "function handleFailure(response) {\r",
                    "\tExt.Msg.show({\r",
                    "\t\ttitle:'ファイルの変更失敗',\r",
                    "\t\tmsg: 'サーバとの通信に失敗しました。',\r",
                    "\t\tbuttons: Ext.Msg.OK\r",
                    "\t});\r",
                    "}"
                ],
                "name": "itemclick",
                "scope": "me",
                "designer|targetType": "Ext.view.View",
                "designer|controlQuery": "#thumbnailViewSL"
            },
            "designerId": "ca7d708f-bb72-46f0-85c2-2be556b36d6a"
        }
    ]
}