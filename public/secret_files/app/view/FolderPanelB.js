/*
 * File: app/view/FolderPanelB.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.FolderPanelB',
{
    extend: 'Ext.tree.Panel',
    alias: 'widget.folderpanelb',

    id: 'folderPanelB',
    itemId: 'folderPanelB',
    autoScroll: true,
    maintainFlex: true,
    collapseDirection: 'bottom',
    title: 'フォルダ2',
    rootVisible: false,

    initComponent: function()
    {
        var me = this;

        var formX;
        formX = Ext.apply({session_id: this_session_id}, formX);
        formX = Ext.apply({request_type: 'get_node_list'}, formX);
        formX = Ext.apply({params: ['$HOME', 1, false]}, formX);

        Ext.applyIf(me,
        {
            viewConfig:
            {

            },
            //store: 'FolderDataStoreA',
            store: Ext.create('TeamDomain.store.FolderDataStoreB',
            {
                jsonData: formX
            }),
            listeners:
            {
                beforeitemexpand:
                {
                    fn: me.onFolderPanelBBeforeItemExpand,
                    scope: me
                },
                beforeitemcollapse:
                {
                    fn: me.onFolderPanelBBeforeItemCollapse,
                    scope: me
                },
                itemcontextmenu:
                {
                    fn: me.onFolderPanelBItemContextMenu,
                    scope: me
                },
                beforeitemdblclick:
                {
                    fn: me.onFolderPanelBBeforeItemDblClick,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onFolderPanelBBeforeItemExpand: function(nodeinterface, eOpts)
    {
        /*
        if (PartialLoad_FileList === true) {
        PartialLoad_FileList = false;
        return;
        }
        */

        var sendData = nodeinterface.raw;
        sendData = Ext.apply(
        {
            session_id: this_session_id
        }, sendData);
        sendData = Ext.apply(
        {
            request_type: 'expand_folder'
        }, sendData);

        Ext.Ajax.request(
        {
            url: 'tdx/updatedata.tdx',
            method: 'POST',
            jsonData: sendData,
            success: handleSuccess,
            failure: handleFailure
        });

        function handleSuccess(response)
        {
            var obj = Ext.decode(response.responseText);
            var request_success = obj.success;
            var request_status = obj.status;
            var request_dirty = obj.isDirty;

            if (request_success === false)
            {
                var request_errors = obj.errors;
                Ext.Msg.show(
                {
                    title: 'サブフォルダの表示失敗',
                    msg: 'Status: '.request_status,
                    buttons: Ext.Msg.OK
                });
            }
            else
            {
                if (request_dirty === true)
                {
                    Ext.getStore('FolderDataStoreB').load(); //by IMAI 2015/1/20
                }
                else if (request_status === 2050)
                {
                    PartialLoad = true; //by IMAI 2015/1/20
                    Ext.getStore('FolderDataStoreB').load(
                    { //by IMAI 2015/1/20
                        node: nodeinterface, //by IMAI 2015/1/20
                        url: 'spin/foldersB.sfl' //by IMAI 2015/1/20
                    });
                    //Ext.ComponentQuery.query('#folderPanelB')[0].selModel.doSelect(nodeinterface);
                }
            }
        }

        function handleFailure(response)
        {
            Ext.Msg.show(
            {
                title: 'サブフォルダ表示失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }

    },

    onFolderPanelBBeforeItemCollapse: function(nodeinterface, eOpts)
    {
        BeforeSelectedNodeB = LastSelectedNodeB;

        LastSelectedNodeB = nodeinterface;

        var sendData = nodeinterface.raw;

        sendData = Ext.apply(
        {
            session_id: this_session_id
        }, sendData);
        sendData = Ext.apply(
        {
            request_type: 'collapse_folder'
        }, sendData);

        Ext.Ajax.request(
        {
            url: 'tdx/updatedata.tdx',
            method: 'POST',
            jsonData: sendData,
            success: handleSuccess,
            failure: handleFailure
        });

        function handleSuccess(response)
        {
            obj = Ext.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false)
            {
                var request_errors = obj.errors;
                Ext.Msg.show(
                {
                    title: 'サブフォルダのクローズ失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            }
            else
            {
                if (LastSelectedNodeB !== BeforeSelectedNodeB)
                {
                    Ext.ComponentQuery.query('#folderPanelB')[0].selModel.doSelect(LastSelectedNodeB);
                }
            }
            return;
        }

        function handleFailure(response)
        {
            Ext.Msg.show(
            {
                title: 'サブフォルダのクローズ失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }
    },

    onFolderPanelBItemContextMenu: function(dataview, record, item, index, e, eOpts)
    {
        tree_context_menu = new Ext.menu.Menu(
        {
            items: [
                changeFolderName,
                new Ext.menu.Separator(),
                copyFolder,
                moveFolder,
                deleteFolder,
                new Ext.menu.Separator(),
                //releaseFolderOwnership,
                //acquireFolderOwnership,
                settingFolderAccessRight,
                new Ext.menu.Separator(),
                createSubFolder,
                appendFile,
                new Ext.menu.Separator(),
                searchFiles,
                new Ext.menu.Separator(),
                openTrashbox
            ]
        });

        tree_context_menu.showAt(e.getXY());
        return false;
    },

    onFolderPanelBBeforeItemDblClick: function(dataview, record, item, index, e, eOpts)
    {
        return false;
    }

});
