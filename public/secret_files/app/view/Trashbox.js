/*
 * File: app/view/Trashbox.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.Trashbox', {
	extend: 'Ext.window.Window',
	alias: 'widget.trashbox',

	height: 500,
	hidden: false,
	id: 'reCycler',
	itemId: 'reCycler',
	width: 450,
	layout: {
		type: 'fit'
	},
	title: 'ゴミ箱',
        constrain: true,
	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'fieldset',
					layout: {
						align: 'stretch',
						type: 'vbox'
					},
					title: '削除したファイルとフォルダ',
					items: [
						{
							xtype: 'gridpanel',
							flex: 1,
							itemId: 'trashList',
							margin: '5 0 10 0',
							autoScroll: true,
							store: 'RecyclerDataStore',
							selModel: Ext.create('Ext.selection.CheckboxModel', {

							}),
							dockedItems: [
								{
									xtype: 'pagingtoolbar',
									dock: 'bottom',
									weight: 2,
									displayInfo: true,
									store: 'RecyclerDataStore',
                                                                        emptyMsg: '表示できるデータがありません'
								},
								{
									xtype: 'toolbar',
									dock: 'bottom',
									weight: 1,
									ui: 'footer',
									items: [
										{
											xtype: 'button',
											handler: function(button, event) {
												var componentM = Ext.getCmp('reCycler');
												var grid = componentM.down('#trashList');

												var records = grid.getSelectionModel().getSelection(), data = [];

												if (Ext.isEmpty(records)) {
													Ext.Msg.show({
														title:'ファイル/フォルダ選択',
														msg: 'ファイル/フォルダを選択して下さい。',
														icon: Ext.Msg.ERROR,
														buttons: Ext.Msg.OK
													});
													return;
												}

												for (var i = 0; i < records.length; i++) {
													data.push(records[i].data);
												}

												var dataX = Ext.apply({session_id: this_session_id}, data);
												dataX = Ext.apply({request_type: "escape_files"},dataX);

												Ext.Ajax.request({
													url: 'tdx/updatedata.tdx',
													timeout: 0,
													jsonData: dataX,
													success: handleSuccess,
													failure: handleFailure
												});

												function handleSuccess(response) {
													obj = Ext.decode(response.responseText);
													var request_success = obj.success;

													if (request_success === false) {
														var request_errors = obj.errors;
														Ext.Msg.show({
															title:'「ゴミ箱のフォルダ/ファイルを元に戻す」の失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														requestRefresh2();
													}
													return;
												}

												function handleFailure(response) {
													Ext.Msg.show({
														title:'「ゴミ箱のフォルダ/ファイルを元に戻す」の失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}

												//ファイルリスト再読み込み用
												function requestRefresh2() {
													//console.log(data);
													sending_cont_location	= "";
													sending_hash_key		= "THIS_WAS_CALLED_FROM_TRASH";

													var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
													requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
													requestRefreshData	= Ext.apply({event_type: "property_trashbox_escape"}, requestRefreshData);
													requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

													Ext.Ajax.request({
														url: 'tdx/updatedata.tdx',
														jsonData: requestRefreshData,
														success: handleSuccess2,
														failure: handleFailure2
													});

												}

												function handleSuccess2(response) {
													obj = Ext.decode(response.responseText);

													var request_success = obj.success;
													var request_status  = obj.status;

													if (request_success === false) {
														var request_errors  = obj.errors;
														Ext.Msg.show({
															title:'「ゴミ箱のフォルダ/ファイルを元に戻す」の失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														Ext.getStore('RecyclerDataStore').load();

														Ext.getStore('FolderDataStoreA').load();
														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();
														Ext.getStore('FileDataStoreA').load();
													}
												}

												function handleFailure2(response) {
													Ext.Msg.show({
														title:'「ゴミ箱のフォルダ/ファイルを元に戻す」の失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}
											},
											margin: '5 5 0 0',
											width: 100,
											text: '元に戻す',
											tooltip: {
												html: '択したフォルダとファイルを元の位置に戻します。'
											},
											tooltipType: 'title'
										},
										{
											xtype: 'button',
											handler: function(button, event) {
												var componentM = Ext.getCmp('reCycler');
												var grid = componentM.down('#trashList');

												var records = grid.getSelectionModel().getSelection(), data = [];

												if (Ext.isEmpty(records)) {
													Ext.Msg.show({
														title:'ファイル/フォルダ選択',
														msg: 'ファイル/フォルダを選択して下さい。',
														icon: Ext.Msg.ERROR,
														buttons: Ext.Msg.OK
													});
													return;
												}

												for (var i = 0; i < records.length; i++) {
													data.push(records[i].data);
												}

												var dataX = Ext.apply({session_id: this_session_id}, data);
												dataX = Ext.apply({request_type: "throw_files"}, dataX);

												Ext.Ajax.request({
													url: 'tdx/updatedata.tdx',
													timeout: 0,
													jsonData: dataX,
													success: handleSuccess,
													failure: handleFailure
												});

												function handleSuccess(response) {
													obj = Ext.decode(response.responseText);
													var request_success = obj.success;

													if (request_success === false) {
														var request_errors = obj.errors;
														Ext.Msg.show({
															title:'ゴミ箱のフォルダ/ファイルの削除失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														//requestRefresh3();
														Ext.getStore('RecyclerDataStore').load();	
													}
													return;
												}

												function handleFailure(response) {
													Ext.Msg.show({
														title:'ゴミ箱のフォルダ/ファイルの削除失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}

												//ファイルリスト再読み込み用
												function requestRefresh3() {
													sending_cont_location	= "";
													sending_hash_key		= "THIS_WAS_CALLED_FROM_TRASH";

													var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
													requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
													requestRefreshData	= Ext.apply({event_type: "property_trashbox_throw"}, requestRefreshData);
													requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

													Ext.Ajax.request({
														url: 'tdx/updatedata.tdx',
														jsonData: requestRefreshData,
														success: handleSuccess3,
														failure: handleFailure3
													});

												}

												function handleSuccess3(response) {
													obj = Ext.decode(response.responseText);

													var request_success = obj.success;
													var request_status  = obj.status;

													if (request_success === false) {
														var request_errors  = obj.errors;
														Ext.Msg.show({
															title:'ゴミ箱のフォルダ/ファイルの削除失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														Ext.getStore('RecyclerDataStore').load();	
													}
												}

												function handleFailure3(response) {
													Ext.Msg.show({
														title:'ゴミ箱のフォルダ/ファイルの削除失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}
											},
											margin: '5 5 0 0',
											width: 100,
											text: '削除',
											tooltip: {
												html: '選択したフォルダとファイルを削除します。<br/>この操作後には、削除したフォルダとファイルを元に戻すことはできなくなります。'
											},
											tooltipType: 'title'
										},
										{
											xtype: 'button',
											handler: function(button, event) {
                                                                                                var data = [];
												var dataX = Ext.apply({session_id: this_session_id}, data);
												dataX = Ext.apply({request_type: "throw_all_files"}, dataX);

												Ext.Ajax.request({
													url: 'tdx/updatedata.tdx',
													timeout: 0,
													jsonData: dataX,
													success: handleSuccess,
													failure: handleFailure
												});
                                                                                                
                                                                                                function handleSuccess(response) {
													obj = Ext.decode(response.responseText);
													var request_success = obj.success;

													if (request_success === false) {
														var request_errors = obj.errors;
														Ext.Msg.show({
															title:'「ゴミ箱の全削除」の失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														Ext.getStore('RecyclerDataStore').load();
													}
													return;
												}

												function handleFailure(response) {
													Ext.Msg.show({
														title:'「ゴミ箱の全削除」の失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}
											},
											margin: '5 5 0 0',
											width: 100,
											text: '全削除',
											tooltip: 'ゴミ箱内のファイル・フォルダを全て削除します。',
											tooltipType: 'title'
										}                                                                                
                                                                                /*,
										{
											xtype: 'button',
											handler: function(button, e) {
												var componentM = Ext.getCmp('reCycler');
												var grid = componentM.down('#trashList');

												var records = grid.getSelectionModel().getSelection(), data = [];
												
												//if (Ext.isEmpty(records)) {
												//Ext.Msg.show({
												//title:'ファイル/フォルダ選択',
												//msg: 'ファイル/フォルダを選択して下さい。',
												//icon: Ext.Msg.ERROR,
												//buttons: Ext.Msg.OK
												//});
												//return;
												//}

												//for (var i = 0; i < records.length; i++) {
												//data.push(records[i].data);
												//}
												//
												//var dataX = Ext.apply({session_id: this_session_id}, data);
												//dataX = Ext.apply({request_type: "recover_trash_error"},dataX);

												var dataX = Ext.apply({session_id: this_session_id},{request_type: "recover_trash_error"});

												Ext.Ajax.request({
													url: 'tdx/updatedata.tdx',
													timeout: 0,
													jsonData: dataX,
													success: handleSuccess,
													failure: handleFailure
												});

												function handleSuccess(response) {
													obj = Ext.decode(response.responseText);
													var request_success = obj.success;

													if (request_success === false) {
														var request_errors = obj.errors;
														Ext.Msg.show({
															title:'ゴミ箱のリカバリーに失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														requestRefresh2();
													}
													return;
												}

												function handleFailure(response) {
													Ext.Msg.show({
														title:'「ゴミ箱のフォルダ/ファイルを元に戻す」の失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}

												//ファイルリスト再読み込み用
												function requestRefresh2() {
													//console.log(data);
													sending_cont_location	= "";
													sending_hash_key		= "THIS_WAS_CALLED_FROM_TRASH";

													var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
													requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
													requestRefreshData	= Ext.apply({event_type: "property_trashbox_escape"}, requestRefreshData);
													requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

													Ext.Ajax.request({
														url: 'tdx/updatedata.tdx',
														jsonData: requestRefreshData,
														success: handleSuccess2,
														failure: handleFailure2
													});

												}

												function handleSuccess2(response) {
													obj = Ext.decode(response.responseText);

													var request_success = obj.success;
													var request_status  = obj.status;

													if (request_success === false) {
														var request_errors  = obj.errors;
														Ext.Msg.show({
															title:'「ゴミ箱のフォルダ/ファイルをすべて元に戻す」の失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														Ext.getStore('RecyclerDataStore').load();

														Ext.getStore('FolderDataStoreA').load();
														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();

														Ext.getStore('FolderDataStoreB').load();
														Ext.getStore('TargetFolderBT').load();
														Ext.getStore('TargetFolderBTFi').load();

														Ext.getStore('FileDataStoreA').load();
														Ext.getStore('FileDataStoreB').load();
													}
												}

												function handleFailure2(response) {
													Ext.Msg.show({
														title:'「ゴミ箱のフォルダ/ファイルをすべてに戻す」の失敗',
														msg: 'サーバとの通信に失敗しました。',
														buttons: Ext.Msg.OK
													});
												}
											},
											margin: '5 5 0 0',
											width: 100,
											text: 'すべて戻す'
										}*/
									]
								}
							],
							columns: [
								{
									xtype: 'gridcolumn',
									hidden: true,
									dataIndex: 'hash_key',
									hideable: false,
									text: 'Hash_key'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									dataIndex: 'cont_location',
									hideable: false,
									text: 'Cont_location'
								},
								{
									xtype: 'gridcolumn',
									dataIndex: 'file_name',
									text: '名前',
									flex: 1
								},
								{
									xtype: 'gridcolumn',
									width: 40,
									dataIndex: 'file_type',
									text: '種類'
								},
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										var fileSizeUpper = record.data.file_size_upper;
										var fileSize      = record.data.file_size;
										var size          = fileSizeUpper * Math.pow(2, 31) + fileSize;

										if (size === "") {
											return "-";
										} else if (size < 1024) {
											return size + " B";
										} else if (size < 1048576) {
											return (Math.round(size / 1024)) + " KB";
										} else if (size < 1073741824) {
											return (Math.round(((size*10) / 1048576))/10) + " MB";
										} else if (size < 1099511627776) {
											return (Math.round(((size*100) / 1073741824))/100) + " GB";
										} else if (size < 1125899906842624) {
											return (Math.round(((size*100) / 1099511627776))/100) + " TB";
										} else {
											return (Math.round(((size*100) / 1125899906842624))/100) + " PB";
										}

									},
									width: 80,
									align: 'right',
									dataIndex: 'file_size',
									text: 'サイズ'
								},
								{
									xtype: 'gridcolumn',
									hidden: true,
									dataIndex: 'url',
									text: 'URL',
									flex: 1
								}
							]
						}
					]
				}
			],
			listeners: {
				afterrender: {
					fn: me.onReCyclerAfterRender,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onReCyclerAfterRender: function(component, eOpts) {
                console.log("ゴミ箱: afterrender -> RecyclerDataStore");
		Ext.getStore('RecyclerDataStore').load();
	}

});
