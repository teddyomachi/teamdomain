/*
 * File: app/controller/showDataProperty.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.controller.showDataProperty', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'FileView',
			selector: '#teamDomain'
		},
		{
			ref: 'FolderView',
			selector: '#teamDomain'
		},
		{
			ref: 'DomainView',
			selector: '#teamDomain'
		}
	],

	onGridpanelSelectionChangeDA: function(model, selected, eOpts) {
		var show_target_folder = 'folder_a';
		var viewDomain = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selected).length !== 0) {
			viewDomain.down('#showDomainThumbnail').update(selected[0].data);
			viewDomain.down('#showDomainProperty').loadRecord(selected[0]);
			viewDomain.down('#createFolder').loadRecord(selected[0]);
			Ext.getCmp('createFolder').getForm().setValues({
				cont_location: show_target_folder
			});

			Ext.getCmp('activeData').getForm().setValues({
				activeDomainA_name: selected[0].data.domain_name,   
				activeDomainA_hash: selected[0].data.hash_key
			});

			var editChecked = selected[0].data.domain_writable_status;

			doCheckDomain(editChecked);

		} else return;

		var dataD;
		dataD = Ext.apply({target_folder: show_target_folder}, selected[0].data);
		dataD = Ext.apply({session_id: this_session_id}, dataD);
		dataD = Ext.apply({request_type: "change_domain"}, dataD);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			//url: 'php/request.php',
			jsonData: dataD,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ドメインの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				if (show_target_folder === 'folder_a') {
					Ext.getStore('FolderDataStoreA').load();
					Ext.getStore('TargetFolderAT').load();
					Ext.getStore('TargetFolderATFi').load();

				} else if (show_target_folder === 'folder_b') {
					Ext.getStore('FolderDataStoreB').load();
					Ext.getStore('TargetFolderBT').load();
					Ext.getStore('TargetFolderBTFi').load();
				}
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ドメインの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onGridpanelSelectionChangeDB: function(model, selected, eOpts) {
		if (DomainLoadingCount === 0) {
			Ext.getCmp('activeData').getForm().setValues({
				activeDomainB_name: selected[0].data.domain_name,
				activeDomainB_hash: selected[0].data.hash_key
			});
			DomainLoadingCount = 1;
		} else {
			var show_target_folder = 'folder_b';
			var viewDomain = Ext.ComponentQuery.query('mainView')[0];

			if (Object.keys(selected).length !== 0) {
				viewDomain.down('#showDomainThumbnail').update(selected[0].data);
				viewDomain.down('#showDomainProperty').loadRecord(selected[0]);
				viewDomain.down('#createFolder').loadRecord(selected[0]);
				Ext.getCmp('createFolder').getForm().setValues({
					cont_location: show_target_folder
				});

				Ext.getCmp('activeData').getForm().setValues({
					activeDomainB_name: selected[0].data.domain_name,
					activeDomainB_hash: selected[0].data.hash_key
				});

				var editChecked = selected[0].data.domain_writable_status;

				doCheckDomain(editChecked);

			} else return;

			var dataD;
			dataD = Ext.apply({target_folder: show_target_folder}, selected[0].data);
			dataD = Ext.apply({session_id: this_session_id}, dataD);
			dataD = Ext.apply({request_type: "change_domain"}, dataD);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataD,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ドメインの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				if (show_target_folder === 'folder_a') {
					Ext.getStore('FolderDataStoreA').load();
					Ext.getStore('TargetFolderAT').load();
					Ext.getStore('TargetFolderATFi').load();
				} else if (show_target_folder === 'folder_b') {
					Ext.getStore('FolderDataStoreB').load();
					Ext.getStore('TargetFolderBT').load();
					Ext.getStore('TargetFolderBTFi').load();
				}
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ドメインの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onTreepanelSelectionChangeA: function(model, selected, eOpts) {
		LastSelectedNodeB = model.getSelection();

		var folderPanelName  = 'フォルダ1 -';
		var folderPanelTitle = 'folderPanelA';
		var listScreen = 'listDspA';
		var iconScreen = 'iconDspA';
		var thumbnailScreen = 'thumbnailDspA';

		var viewFolder = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selected).length !== 0) {
			viewFolder.down('#showFolderThumbnail').update(selected[0].data);

			viewFolder.down('#showFolderProperty').loadRecord(selected[0]);
			viewFolder.down('#releaseFolderOwnership').loadRecord(selected[0]);
			viewFolder.down('#obtainFolderOwnership').loadRecord(selected[0]);
			viewFolder.down('#createFolder').loadRecord(selected[0]);
			viewFolder.down('#createFile').loadRecord(selected[0]);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "folder_tree"
			});
			viewFolder.down('#createSubFolder').loadRecord(selected[0]);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "folder_tree"
			});
			viewFolder.down('#searchCondition').loadRecord(selected[0]);

			viewFolder.down('#ccpdFolder').loadRecord(selected[0]);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "folder_tree"
			});

			var DateCreated = selected[0].data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = selected[0].data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           selected[0].data.text,
				owner_name:     selected[0].data.owner,
				hash_key:       selected[0].data.hash_key,
				cont_location:  selected[0].data.cont_location,
				owner:          owner_right,
				other_readable: selected[0].data.other_readable,
				other_writable: selected[0].data.other_writable
			});

			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(selected[0]);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderA_name:     selected[0].data.folder_name,
				activeFolderA_hash:     selected[0].data.hash_key,
				activeFolderA_readable: selected[0].data.folder_readable_status,
				activeFolderA_writable: selected[0].data.folder_writable_status
			});
			//console.log(selected[0].data.folder_name);

			readChecked       = selected[0].data.folder_readable_status;
			writeChecked      = selected[0].data.folder_writable_status;
			var ownerChecked      = selected[0].data.ownership;
			var controllerChecked = selected[0].data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;

			showFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);

			targetStatus    = Boolean(targetStatus);
			doCheckFolder(readChecked, writeChecked, ownerChecked, controllerChecked, targetStatus, listScreen, iconScreen, thumbnailScreen);

		} else {
			return;
		}

		if (readChecked === true) {
			var dataF = Ext.apply({session_id: this_session_id}, selected[0].raw);
			dataF = Ext.apply({request_type: "change_folder"}, dataF);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataF,
				success: handleSuccess,
				failure: handleFailure
			});
		} else return;

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'フォルダの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				if (folderPanelTitle === 'folderPanelA') {
					//Ext.getCmp('fileWholeDsp').show();
					Ext.getCmp('filesA_list').moveFirst();
					if (PrivilegeEdit === true) {
						Ext.getCmp('privilege_folder_bar').moveFirst();
					}

				} else if (folderPanelTitle === 'folderPanelB') {
					Ext.getCmp('filesB_list').moveFirst();
					if (PrivilegeEdit === true) {
						Ext.getCmp('privilege_folder_bar').moveFirst();
					}
				}
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'フォルダの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onTreepanelSelectionChangeB: function(model, selected, eOpts) {
		if (Object.keys(selected).length !== 0) {
			if (FolderLoadingCountB === 1) {
				Ext.getCmp('activeData').getForm().setValues({
					activeFolderB_name:     selected[0].data.folder_name,
					activeFolderB_hash:     selected[0].data.hash_key,
					activeFolderB_readable: selected[0].data.folder_readable_status,
					activeFolderB_writable: selected[0].data.folder_writable_status
				});
			}
		}

		LastSelectedNodeB = model.getSelection();

		var folderPanelName  = 'フォルダ2 -';
		var folderPanelTitle = 'folderPanelB';
		var listScreen = 'listDspB';
		var iconScreen = 'iconDspB';
		var thumbnailScreen = 'thumbnailDspB';

		var viewFolder = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selected).length !== 0) {
			viewFolder.down('#showFolderThumbnail').update(selected[0].data);

			viewFolder.down('#showFolderProperty').loadRecord(selected[0]);
			viewFolder.down('#releaseFolderOwnership').loadRecord(selected[0]);
			viewFolder.down('#obtainFolderOwnership').loadRecord(selected[0]);
			viewFolder.down('#createFolder').loadRecord(selected[0]);
			viewFolder.down('#createFile').loadRecord(selected[0]);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "folder_tree"
			});
			viewFolder.down('#createSubFolder').loadRecord(selected[0]);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "folder_tree"
			});
			viewFolder.down('#searchCondition').loadRecord(selected[0]);

			viewFolder.down('#ccpdFolder').loadRecord(selected[0]);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "folder_tree"
			});

			var DateCreated = selected[0].data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = selected[0].data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (selected[0].data.folder_readable_status === true && selected[0].data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           selected[0].data.text,
				owner_name:     selected[0].data.owner,
				hash_key:       selected[0].data.hash_key,
				cont_location:  selected[0].data.cont_location,
				owner:          owner_right,
				other_readable: selected[0].data.other_readable,
				other_writable: selected[0].data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(selected[0]);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderB_name:     selected[0].data.folder_name,
				activeFolderB_hash:     selected[0].data.hash_key,
				activeFolderB_readable: selected[0].data.folder_readable_status,
				activeFolderB_writable: selected[0].data.folder_writable_status
			});
			//console.log(selected[0].data.folder_name);

			readChecked       = selected[0].data.folder_readable_status;
			writeChecked      = selected[0].data.folder_writable_status;
			var ownerChecked      = selected[0].data.ownership;
			var controllerChecked = selected[0].data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;

			showFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);

			targetStatus    = Boolean(targetStatus);
			doCheckFolder(readChecked, writeChecked, ownerChecked, controllerChecked, targetStatus, listScreen, iconScreen, thumbnailScreen);

		} else {
			return;
		}

		if (readChecked === true) {
			var dataF = Ext.apply({session_id: this_session_id}, selected[0].raw);
			dataF = Ext.apply({request_type: "change_folder"}, dataF);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataF,
				success: handleSuccess,
				failure: handleFailure
			});
		} else return;

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'フォルダの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				if (folderPanelTitle === 'folderPanelA') {
					Ext.getCmp('filesA_list').moveFirst();
					if (PrivilegeEdit === true) {
						Ext.getCmp('privilege_folder_bar').moveFirst();
					}

				} else if (folderPanelTitle === 'folderPanelB') {
					Ext.getCmp('filesB_list').moveFirst();
					if (PrivilegeEdit === true) {
						Ext.getCmp('privilege_folder_bar').moveFirst();
					}
				}
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'フォルダの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onGridpanelSelectionChangeFiA: function(model, selected, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selected).length !== 0) {

			if (selected[0].data.file_type === 'folder') {//以下フォルダの場合
				var viewFolder = viewFile;
				record = selected[0];

				record.data.folder_name            = selected[0].data.file_name;
				record.data.text                   = selected[0].data.file_name;
				record.data.img                    = selected[0].data.icon_image;
				record.data.updater                = selected[0].data.modifier;
				record.data.updated_at             = selected[0].data.updated_at;
				record.data.parent_readable_status = selected[0].data.folder_readable_status;
				record.data.parent_writable_status = selected[0].data.folder_writable_status;
				record.data.folder_readable_status = selected[0].data.file_readable_status;
				record.data.folder_writable_status = selected[0].data.file_writable_status;
				record.data.cls                    = selected[0].data.file_type;

				viewFolder.down('#showFolderThumbnail').update(record.data);

				viewFolder.down('#showFolderProperty').loadRecord(record);
				viewFolder.down('#releaseFolderOwnership').loadRecord(record);
				viewFolder.down('#obtainFolderOwnership').loadRecord(record);

				viewFolder.down('#createFolder').loadRecord(record);

				viewFolder.down('#createFile').loadRecord(record);
				Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
					original_place: "file_list"
				});
				viewFolder.down('#createSubFolder').loadRecord(record);
				Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
					original_place: "file_list"
				});
				viewFolder.down('#searchCondition').loadRecord(record);
				viewFolder.down('#ccpdFolder').loadRecord(record);
				Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
					original_place: "file_list"
				});

				var DateCreated = record.data.created_at;
				var DateCreated_formated;

				if (DateCreated === 0 || DateCreated === "") {
					DateCreated_formated = ' - ';
				} else {
					DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFolderProperty').getForm().setValues({
					created_at: DateCreated_formated
				});

				var DateModified = record.data.updated_at;
				var DateModified_formated;

				if (DateModified === 0 || DateModified === "") {
					DateModified_formated = ' - ';
				} else {
					DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFolderProperty').getForm().setValues({
					updated_at: DateModified_formated
				});

				var owner_right;
				if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
					owner_right = 'full';
				} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
					owner_right = 'read_only';
				} else {
					owner_right = "";
				}

				Ext.getCmp('folderPrivilege').getForm().setValues({
					text:			record.data.text,
					owner_name:		record.data.owner,
					hash_key:		record.data.hash_key,
					cont_location:	record.data.cont_location,
					owner:			owner_right,
					other_readable:	record.data.other_readable,
					other_writable:	record.data.other_writable
				});
				//Ext.getCmp('privilege_folder_bar').moveFirst();

				viewFolder.down('#searchGroupFolder').loadRecord(record);

				Ext.getCmp('activeData').getForm().setValues({
					activeFolderA_name: record.data.folder_name,
					activeFolderA_hash: record.data.hash_key,
					activeFolderA_readable: record.data.folder_readable_status,
					activeFolderA_writable: record.data.folder_writable_status
				});

				var readChecked       = record.data.folder_readable_status;
				var writeChecked      = record.data.folder_writable_status;
				var ownerChecked      = record.data.ownership;
				var controllerChecked = record.data.control_right;
				var targetStatus = Ext.getCmp('target_folder_writable').value;

			} else {//以下ファイルの場合
				record = selected[0];

				viewFile.down('#thumbnailArea').update(selected[0].data);

                                if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
					Ext.ComponentQuery.query('#enlargeBtn')[0].show();
					SelectedFileType = selected[0].data.file_type;
					SelectedFileUrl	 = selected[0].data.url;
					SelectedFileThum = selected[0].data.thumbnail_image;
				} else {
					Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
				}
				viewFile.down('#showFileProperty').loadRecord(selected[0]);
				viewFile.down('#showFileExtension').loadRecord(selected[0]);
				viewFile.down('#showFileDetails').loadRecord(selected[0]);
				viewFile.down('#openFile').loadRecord(selected[0]);
				viewFile.down('#openVer').loadRecord(selected[0]);
				viewFile.down('#openApp').loadRecord(selected[0]);
				viewFile.down('#ccpdFile').loadRecord(selected[0]);
				viewFile.down('#checkOut').loadRecord(selected[0]);
				viewFile.down('#changeLock').loadRecord(selected[0]);
				viewFile.down('#changeOwner').loadRecord(selected[0]);
				viewFile.down('#sendMail').loadRecord(selected[0]);

				var owner_right;
				if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
					owner_right = 'full';
				} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
					owner_right = 'read_only';
				} else {
					owner_right = "";
				}

				if (!record.data.other_readable) {record.data.other_readable = false;}
				if (!record.data.other_writable) {record.data.other_writable = false;}

				Ext.getCmp('filePrivilege').getForm().setValues({
					file_name:      record.data.file_name,
					owner_name:		record.data.owner,
					hash_key:       record.data.hash_key,
					cont_location:  record.data.cont_location,
					owner_access:   owner_right,
					other_readable: record.data.other_readable,
					other_writable: record.data.other_writable
				});

				viewFile.down('#searchGroupFile').loadRecord(selected[0]);

				var folderReadChecked     = selected[0].data.folder_readable_status;
				var folderWriteChecked    = selected[0].data.folder_writable_status;
				if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

				var fileReadChecked       = selected[0].data.file_readable_status;
				var fileWriteChecked      = selected[0].data.file_writable_status;

				var fileOwnershipChecked  = selected[0].data.ownership;
				var fileControllerChecked = selected[0].data.control_right;

				var fileLockChecked       = selected[0].data.lock;
				var fileOpenChecked       = selected[0].data.open_status;

				var lcUserId              = selected[0].data.id_lc_by;

				var fileSizeUpper = selected[0].data.file_size_upper;
				var fileSize      = selected[0].data.file_size;
				var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

				if (fileSizeReal === 0 || fileSizeReal === "") {
					file_size_formatted = '0 B';
				} else {
					file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
					file_size_formatted = file_size_formatted + ' B';
				}

				Ext.getCmp('showFileProperty').getForm().setValues({
					file_exact_disp_size: file_size_formatted
				});

				var DateCreated = selected[0].data.created_at;
				var DateCreated_formated;

				if (DateCreated === 0 || DateCreated === "") {
					DateCreated_formated = ' - ';
				} else {
					DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFileProperty').getForm().setValues({
					created_at: DateCreated_formated
				});

				var DateModified = selected[0].data.updated_at;
				var DateModified_formated;

				if (DateModified === 0 || DateModified === "") {
					DateModified_formated = ' - ';
				} else {
					DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFileProperty').getForm().setValues({
					updated_at: DateModified_formated
				});

				/*var DateProduced = selected[0].data.produced_date;
				var DateProduced_formated;

				if (DateProduced === 0 || DateProduced === "") {
					DateProduced_formated = ' - ';
				} else {
					DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFileExtension').getForm().setValues({
					produced_date: DateProduced_formated
				});*/

				var targetStatus = Ext.getCmp('target_folder_writable_status').value;
				//console.log(targetStatus);

				if (Ext.isEmpty(targetStatus)) {
					targetStatus = true;
				} else {
					targetStatus = Boolean(targetStatus);
				}

				doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

				//if (fileControllerChecked === true) {
				var dataFi = Ext.apply({session_id: this_session_id}, selected[0].raw);
				dataFi = Ext.apply({request_type: "change_file"}, dataFi);

				Ext.Ajax.request({
					url: 'tdx/updatedata.tdx',
					//url: 'php/request.php',
					jsonData: dataFi,
					success: handleSuccess,
					failure: handleFailure
				});
				//} else return;
			}
		} else {
			return;
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onGridpanelSelectionChangeFiB: function(model, selected, eOpts) {
		var targetStatus = Ext.getCmp('target_folder_writable_status').value;

		if (Ext.isEmpty(targetStatus)) { targetStatus = true;}

		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selected).length !== 0) {

			if (selected[0].data.file_type === 'folder') {
				var viewFolder = viewFile;
				record = selected[0];
				record.data.folder_name            = selected[0].data.file_name;
				record.data.text                   = selected[0].data.file_name;
				record.data.img                    = selected[0].data.icon_image;
				record.data.updater                = selected[0].data.modifier;
				record.data.updated_at             = selected[0].data.updated_at;
				record.data.parent_readable_status = selected[0].data.folder_readable_status;
				record.data.parent_writable_status = selected[0].data.folder_writable_status;
				record.data.folder_readable_status = selected[0].data.file_readable_status;
				record.data.folder_writable_status = selected[0].data.file_writable_status;
				record.data.cls                    = selected[0].data.file_type;

				viewFolder.down('#showFolderThumbnail').update(record.data);

				viewFolder.down('#showFolderProperty').loadRecord(record);
				viewFolder.down('#releaseFolderOwnership').loadRecord(record);
				viewFolder.down('#obtainFolderOwnership').loadRecord(record);
				viewFolder.down('#createFolder').loadRecord(record);
				viewFolder.down('#createFile').loadRecord(record);
				Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
					original_place: "file_list"
				});
				viewFolder.down('#createSubFolder').loadRecord(record);
				Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
					original_place: "file_list"
				});
				viewFolder.down('#searchCondition').loadRecord(record);

				viewFolder.down('#ccpdFolder').loadRecord(record);
				Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
					original_place: "file_list"
				});

				var DateCreated = record.data.created_at;
				var DateCreated_formated;

				if (DateCreated === 0 || DateCreated === "") {
					DateCreated_formated = ' - ';
				} else {
					DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
				}
				Ext.getCmp('showFolderProperty').getForm().setValues({
					created_at: DateCreated_formated
				});

				var DateModified = record.data.updated_at;
				var DateModified_formated;

				if (DateModified === 0 || DateModified === "") {
					DateModified_formated = ' - ';
				} else {
					DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFolderProperty').getForm().setValues({
					updated_at: DateModified_formated
				});

				var owner_right;
				if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
					owner_right = 'full';
				} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
					owner_right = 'read_only';
				} else {
					owner_right = "";
				}

				Ext.getCmp('folderPrivilege').getForm().setValues({
					text:           record.data.text,
					owner_name:		record.data.owner,
					hash_key:       record.data.hash_key,
					cont_location:  record.data.cont_location,
					owner:          owner_right,
					other_readable: record.data.other_readable,
					other_writable: record.data.other_writable
				});
				//Ext.getCmp('privilege_folder_bar').moveFirst();

				viewFolder.down('#searchGroupFolder').loadRecord(record);

				Ext.getCmp('activeData').getForm().setValues({
					activeFolderB_name:     record.data.folder_name,
					activeFolderB_hash:     record.data.hash_key,
					activeFolderB_readable: record.data.folder_readable_status,
					activeFolderB_writable: record.data.folder_writable_status
				});

				var readChecked       = record.data.folder_readable_status;
				var writeChecked      = record.data.folder_writable_status;
				var ownerChecked      = record.data.ownership;
				var controllerChecked = record.data.control_right;
				var targetStatus = Ext.getCmp('target_folder_writable').value;

			} else {
				record = selected[0];
				viewFile.down('#showThumbnail').update(selected[0].data);
				viewFile.down('#showFileProperty').loadRecord(selected[0]);
				viewFile.down('#showFileExtension').loadRecord(selected[0]);
				viewFile.down('#showFileDetails').loadRecord(selected[0]);
				viewFile.down('#openFile').loadRecord(selected[0]);
				viewFile.down('#openVer').loadRecord(selected[0]);
				viewFile.down('#openApp').loadRecord(selected[0]);
				viewFile.down('#ccpdFile').loadRecord(selected[0]);
				viewFile.down('#checkOut').loadRecord(selected[0]);
				viewFile.down('#changeLock').loadRecord(selected[0]);
				viewFile.down('#changeOwner').loadRecord(selected[0]);
				viewFile.down('#sendMail').loadRecord(selected[0]);

				var owner_right;
				if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
					owner_right = 'full';
				} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
					owner_right = 'read_only';
				} else {
					owner_right = "";
				}

				if (!record.data.other_readable) {record.data.other_readable = false;}
				if (!record.data.other_writable) {record.data.other_writable = false;}

				Ext.getCmp('filePrivilege').getForm().setValues({
					file_name:      record.data.file_name,
					owner_name:		record.data.owner,
					hash_key:       record.data.hash_key,
					cont_location:  record.data.cont_location,
					owner_access:   owner_right,
					other_readable: record.data.other_readable,
					other_writable: record.data.other_writable
				});
				//Ext.getCmp('privilege_file_bar').moveFirst();

				viewFile.down('#searchGroupFile').loadRecord(selected[0]);

				var folderReadChecked     = selected[0].data.folder_readable_status;
				var folderWriteChecked    = selected[0].data.folder_writable_status;
				if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

				var fileReadChecked       = selected[0].data.file_readable_status;
				var fileWriteChecked      = selected[0].data.file_writable_status;
				var fileOwnershipChecked  = selected[0].data.ownership;
				var fileControllerChecked = selected[0].data.control_right;

				var fileLockChecked       = selected[0].data.lock;
				var fileOpenChecked       = selected[0].data.open_status;

				var lcUserId              = selected[0].data.id_lc_by;

				var fileSizeUpper = selected[0].data.file_size_upper;
				var fileSize      = selected[0].data.file_size;
				var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

				if (fileSizeReal === 0 || fileSizeReal === "") {
					file_size_formatted = '0 B';
				} else {
					file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
					file_size_formatted = file_size_formatted + ' B';
				}

				Ext.getCmp('showFileProperty').getForm().setValues({
					file_exact_disp_size: file_size_formatted
				});

				var DateCreated = selected[0].data.created_at;
				var DateCreated_formated;

				if (DateCreated === 0 || DateCreated === "") {
					DateCreated_formated = ' - ';
				} else {
					DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFileProperty').getForm().setValues({
					created_at: DateCreated_formated
				});

				var DateModified = selected[0].data.updated_at;
				var DateModified_formated;

				if (DateModified === 0 || DateModified === "") {
					DateModified_formated = ' - ';
				} else {
					DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFileProperty').getForm().setValues({
					updated_at: DateModified_formated
				});

				/*var DateProduced = selected[0].data.produced_date;
				var DateProduced_formated;

				if (DateProduced === 0 || DateProduced === "") {
					DateProduced_formated = ' - ';
				} else {
					DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
				}

				Ext.getCmp('showFileExtension').getForm().setValues({
					produced_date: DateProduced_formated
				});*/

				var targetStatus = Ext.getCmp('target_folder_writable_status').value;
				//console.log(targetStatus);

				if (Ext.isEmpty(targetStatus)) {
					targetStatus = true;
				} else {
					targetStatus = Boolean(targetStatus);
				}

				doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

				var dataFi = Ext.apply({session_id: this_session_id}, selected[0].raw);
				dataFi = Ext.apply({request_type: "change_file"}, dataFi);

				Ext.Ajax.request({
					url: 'tdx/updatedata.tdx',
					//url: 'php/request.php',
					jsonData: dataFi,
					success: handleSuccess,
					failure: handleFailure
				});
			}
		} else return;

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}

	},

	onGridpanelSelectionChangeFiS: function(model, selected, eOpts) {
		var targetStatus = Ext.getCmp('target_folder_writable_status').value;
		if (Ext.isEmpty(targetStatus)) {
                    targetStatus = true;
                }

		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selected).length !== 0) {
			record = selected[0];
			viewFile.down('#thumbnailArea').update(selected[0].data);

                        if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
                               Ext.ComponentQuery.query('#enlargeBtn')[0].show();
                               SelectedFileType = selected[0].data.file_type;
                               SelectedFileUrl  = selected[0].data.url;
                               SelectedFileThum = selected[0].data.thumbnail_image;
                        } else {
                               Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
                        }	

			//viewFile.down('#showThumbnail').update(selected[0].data);
			//viewFile.down('#showThumbnail').loadRecord(selected[0]);
			viewFile.down('#showFileProperty').loadRecord(selected[0]);
			viewFile.down('#showFileExtension').loadRecord(selected[0]);
			viewFile.down('#showFileDetails').loadRecord(selected[0]);
			viewFile.down('#openFile').loadRecord(selected[0]);
			viewFile.down('#openVer').loadRecord(selected[0]);
			viewFile.down('#openApp').loadRecord(selected[0]);
			viewFile.down('#ccpdFile').loadRecord(selected[0]);
			viewFile.down('#checkOut').loadRecord(selected[0]);
			viewFile.down('#changeLock').loadRecord(selected[0]);
			viewFile.down('#changeOwner').loadRecord(selected[0]);
			viewFile.down('#sendMail').loadRecord(selected[0]);

                        //Ext.getCmp('showThumbnail').getForm().setValues({
                        //}

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(selected[0]);

			var folderReadChecked     = selected[0].data.folder_readable_status;
			var folderWriteChecked    = selected[0].data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = selected[0].data.file_readable_status;
			var fileWriteChecked      = selected[0].data.file_writable_status;
			var fileOwnershipChecked  = selected[0].data.ownership;
			var fileControllerChecked = selected[0].data.control_right;

			var fileLockChecked       = selected[0].data.lock;
			var fileOpenChecked       = selected[0].data.open_status;

			var lcUserId              = selected[0].data.id_lc_by;

			var fileSizeUpper = selected[0].data.file_size_upper;
			var fileSize      = selected[0].data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = selected[0].data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = selected[0].data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			/*var DateProduced = selected[0].data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			});*/

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, selected[0].raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		} else return;

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onTreeviewSelectionChangeCMDA: function(dataview, selections, eOpts) {
		var folderPanelName  = '';
		folderPanelName  = 'フォルダ1 -';
		var folderPanelTitle = 'targetA';
		var originalReadStatus;
		var originalWriteStatus;

		if (Ext.isEmpty(originalReadStatus))  { originalReadStatus = true;}
		if (Ext.isEmpty(originalWriteStatus)) { originalWriteStatus = true;}

		originalReadStatus  = Ext.getCmp('folder_readable_status').value;
		originalWriteStatus = Ext.getCmp('folder_writable_status').value;

		var viewFolder = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selections).length !== 0) {
			viewFolder.down('#ccpdFolder').loadRecord(selections[0]);

			var readChecked  = selections[0].data.target_folder_readable_status;
			var writeChecked = selections[0].data.target_folder_writable_status;
			var ownerChecked = selections[0].data.target_ownership;

			showFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);

			originalReadStatus    = Boolean(originalReadStatus);
			originalWriteStatus   = Boolean(originalWriteStatus);
			writeChecked          = Boolean(writeChecked);
			doCheckTargetFolder(originalReadStatus, originalWriteStatus, writeChecked);

		} else return;
	},

	onTreeviewSelectionChangeCMDB: function(dataview, selections, eOpts) {
		var folderPanelName  = '';
		folderPanelName  = 'フォルダ2 -';
		var folderPanelTitle = 'targetB';
		var originalReadStatus;
		var originalWriteStatus;

		if (Ext.isEmpty(originalReadStatus))  { originalReadStatus = true;}
		if (Ext.isEmpty(originalWriteStatus)) { originalWriteStatus = true;}

		originalReadStatus  = Ext.getCmp('folder_readable_status').value;
		originalWriteStatus = Ext.getCmp('folder_writable_status').value;

		var viewFolder = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selections).length !== 0) {

			viewFolder.down('#ccpdFolder').loadRecord(selections[0]);

			var readChecked  = selections[0].data.target_folder_readable_status;
			var writeChecked = selections[0].data.target_folder_writable_status;
			var ownerChecked = selections[0].data.target_ownership;

			showFolderTitle(readChecked, writeChecked, ownerChecked, folderPanelName, folderPanelTitle);

			originalReadStatus    = Boolean(originalReadStatus);
			originalWriteStatus   = Boolean(originalWriteStatus);
			writeChecked          = Boolean(writeChecked);
			doCheckTargetFolder(originalReadStatus, originalWriteStatus, writeChecked);

		} else return;
	},

	onTreeviewSelectionChangeCMDFiA: function(dataview, selections, eOpts) {
		var folderPanelName  = '';
		folderPanelName  = 'フォルダ1 -';
		var folderPanelTitle = 'targetFiA';

		var viewFolder = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selections).length !== 0) {
			viewFolder.down('#ccpdFile').loadRecord(selections[0]);

			var targetReadChecked      = selections[0].data.target_folder_readable_status;
			var targetWriteChecked     = selections[0].data.target_folder_writable_status;
			var targetOwnerChecked     = selections[0].data.target_ownership;
			var fileOpenChecked  = selections[0].data.target_open_status;

			showFolderTitle(targetReadChecked, targetWriteChecked, targetOwnerChecked, folderPanelName, folderPanelTitle);

			//var targetReadChecked  = readChecked;
			//var targetWriteChecked = writeChecked;
			var fileLockChecked    = Ext.getCmp('lock_status').value;
			fileLockChecked    = parseInt(fileLockChecked, 10);
			var fileWriteChecked   = Ext.getCmp('file_writable').value;
			fileWriteChecked   = Boolean(fileWriteChecked);

			var originalReadChecked  = Ext.getCmp('folder_readable_status').value;
			var originalWriteChecked = Ext.getCmp('folder_writable_status').value;

			if (Ext.isEmpty(originalReadChecked))  { originalReadChecked  = true;}
			if (Ext.isEmpty(originalWriteChecked)) { originalWriteChecked = true;}

			originalReadChecked   = Boolean(originalReadChecked);
			originalWriteChecked  = Boolean(originalWriteChecked);

			doCheckTargetFolderFi(originalReadChecked, originalWriteChecked, targetWriteChecked, fileLockChecked, fileWriteChecked, fileOpenChecked);

		} else return;
	},

	onTreebiewSelectionChangeCMDFiB: function(dataview, selections, eOpts) {
		var folderPanelName  = '';
		folderPanelName  = 'フォルダ2 -';
		var folderPanelTitle = 'targetFiB';

		var viewFolder = Ext.ComponentQuery.query('mainView')[0];

		if (Object.keys(selections).length !== 0) {

			viewFolder.down('#ccpdFile').loadRecord(selections[0]);

			var targetReadChecked      = selections[0].data.target_folder_readable_status;
			var targetWriteChecked     = selections[0].data.target_folder_writable_status;
			var targetOwnerChecked     = selections[0].data.target_ownership;
			var fileOpenChecked  = selections[0].data.target_open_status;

			showFolderTitle(targetReadChecked, targetWriteChecked, targetOwnerChecked, folderPanelName, folderPanelTitle);

			//var targetReadChecked  = readChecked;
			//var targetWriteChecked = writeChecked;
			var fileLockChecked    = Ext.getCmp('lock_status').value;
			fileLockChecked    = parseInt(fileLockChecked, 10);
			var fileWriteChecked   = Ext.getCmp('file_writable').value;
			fileWriteChecked   = Boolean(fileWriteChecked);

			var originalReadChecked  = Ext.getCmp('folder_readable_status').value;
			var originalWriteChecked = Ext.getCmp('folder_writable_status').value;

			if (Ext.isEmpty(originalReadChecked))  { originalReadChecked  = true;}
			if (Ext.isEmpty(originalWriteChecked)) { originalWriteChecked = true;}

			originalReadChecked   = Boolean(originalReadChecked);
			originalWriteChecked  = Boolean(originalWriteChecked);

			doCheckTargetFolderFi(originalReadChecked, originalWriteChecked, targetWriteChecked, fileLockChecked, fileWriteChecked, fileOpenChecked);

		} else return;
	},

	onDataviewItemClickAI: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (record.data.file_type === 'folder') {
			var viewFolder = viewFile;

			record.data.folder_name            = record.data.file_name;
			record.data.text                   = record.data.file_name;
			record.data.img                    = record.data.icon_image;
			record.data.updater                = record.data.modifier;
			record.data.updated_at             = record.data.updated_at;
			record.data.parent_readable_status = record.data.folder_readable_status;
			record.data.parent_writable_status = record.data.folder_writable_status;
			record.data.folder_readable_status = record.data.file_readable_status;
			record.data.folder_writable_status = record.data.file_writable_status;
			record.data.cls                    = record.data.file_type;

			viewFolder.down('#showFolderThumbnail').update(record.data);

			viewFolder.down('#showFolderProperty').loadRecord(record);
			viewFolder.down('#releaseFolderOwnership').loadRecord(record);
			viewFolder.down('#obtainFolderOwnership').loadRecord(record);
			viewFolder.down('#createFolder').loadRecord(record);
			viewFolder.down('#createFile').loadRecord(record);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#createSubFolder').loadRecord(record);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#searchCondition').loadRecord(record);

			viewFolder.down('#ccpdFolder').loadRecord(record);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "file_list"
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           record.data.text,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner:          owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(record);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderA_name:     record.data.folder_name,
				activeFolderA_hash:     record.data.hash_key,
				activeFolderA_readable: record.data.folder_readable_status,
				activeFolderA_writable: record.data.folder_writable_status
			});

			var readChecked       = record.data.folder_readable_status;
			var writeChecked      = record.data.folder_writable_status;
			var ownerChecked      = record.data.ownership;
			var controllerChecked = record.data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;

		} else {
			viewFile.down('#thumbnailArea').update(record.data);

                        if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
				Ext.ComponentQuery.query('#enlargeBtn')[0].show();
				SelectedFileType = record.data.file_type;
				SelectedFileUrl	 = record.data.url;
				SelectedFileThum = record.data.thumbnail_image;
			} else {
				Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
			}

			//viewFile.down('#showThumbnail').update(record.data);

			viewFile.down('#showFileProperty').loadRecord(record);
			viewFile.down('#showFileExtension').loadRecord(record);
			viewFile.down('#showFileDetails').loadRecord(record);
			viewFile.down('#ccpdFile').loadRecord(record);
			viewFile.down('#openFile').loadRecord(record);
			viewFile.down('#openVer').loadRecord(record);
			viewFile.down('#openApp').loadRecord(record);
			viewFile.down('#checkOut').loadRecord(record);
			viewFile.down('#changeLock').loadRecord(record);
			viewFile.down('#changeOwner').loadRecord(record);
			viewFile.down('#sendMail').loadRecord(record);

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(record);

			var folderReadChecked     = record.data.folder_readable_status;
			var folderWriteChecked    = record.data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = record.data.file_readable_status;
			var fileWriteChecked      = record.data.file_writable_status;
			var fileOwnershipChecked  = record.data.ownership;
			var fileControllerChecked = record.data.control_right;

			var fileLockChecked       = record.data.lock;
			var fileOpenChecked       = record.data.open_status;

			var lcUserId              = record.data.id_lc_by;

			var fileSizeUpper = record.data.file_size_upper;
			var fileSize      = record.data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			/*var DateProduced = record.data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			});*/

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickATB: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (record.data.file_type === 'folder') {
			var viewFolder = viewFile;
			record.data.folder_name            = record.data.file_name;
			record.data.text                   = record.data.file_name;
			record.data.img                    = record.data.icon_image;
			record.data.updater                = record.data.modifier;
			record.data.updated_at             = record.data.modified_at;
			record.data.parent_readable_status = record.data.folder_readable_status;
			record.data.parent_writable_status = record.data.folder_writable_status;
			record.data.folder_readable_status = record.data.file_readable_status;
			record.data.folder_writable_status = record.data.file_writable_status;
			record.data.cls                    = record.data.file_type;

			viewFolder.down('#showFolderThumbnail').update(record.data);

			viewFolder.down('#showFolderProperty').loadRecord(record);
			viewFolder.down('#releaseFolderOwnership').loadRecord(record);
			viewFolder.down('#obtainFolderOwnership').loadRecord(record);
			viewFolder.down('#createFolder').loadRecord(record);
			viewFolder.down('#createFile').loadRecord(record);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#createSubFolder').loadRecord(record);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#searchCondition').loadRecord(record);

			viewFolder.down('#ccpdFolder').loadRecord(record);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "file_list"
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           record.data.text,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner:          owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(record);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderA_name:     record.data.folder_name,
				activeFolderA_hash:     record.data.hash_key,
				activeFolderA_readable: record.data.folder_readable_status,
				activeFolderA_writable: record.data.folder_writable_status
			});

			var readChecked       = record.data.folder_readable_status;
			var writeChecked      = record.data.folder_writable_status;
			var ownerChecked      = record.data.ownership;
			var controllerChecked = record.data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;

		} else {

			viewFile.down('#thumbnailArea').update(record.data);

                        if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
				Ext.ComponentQuery.query('#enlargeBtn')[0].show();
				SelectedFileType = record.data.file_type;
				SelectedFileUrl	 = record.data.url;
				SelectedFileThum = record.data.thumbnail_image;
			} else {
				Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
			}

			//viewFile.down('#showThumbnail').update(record.data);

			viewFile.down('#showFileProperty').loadRecord(record);
			viewFile.down('#showFileExtension').loadRecord(record);
			viewFile.down('#showFileDetails').loadRecord(record);
			viewFile.down('#ccpdFile').loadRecord(record);
			viewFile.down('#openFile').loadRecord(record);
			viewFile.down('#openVer').loadRecord(record);
			viewFile.down('#openApp').loadRecord(record);
			viewFile.down('#checkOut').loadRecord(record);
			viewFile.down('#changeLock').loadRecord(record);
			viewFile.down('#changeOwner').loadRecord(record);
			viewFile.down('#sendMail').loadRecord(record);

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(record);

			var folderReadChecked     = record.data.folder_readable_status;
			var folderWriteChecked    = record.data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = record.data.file_readable_status;
			var fileWriteChecked      = record.data.file_writable_status;
			var fileOwnershipChecked  = record.data.ownership;
			var fileControllerChecked = record.data.control_right;

			var fileLockChecked       = record.data.lock;
			var fileOpenChecked       = record.data.open_status;

			var lcUserId              = record.data.id_lc_by;

			var fileSizeUpper = record.data.file_size_upper;
			var fileSize      = record.data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			/*var DateProduced = record.data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			});*/

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickATL: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (record.data.file_type === 'folder') {
			var viewFolder = viewFile;
			record.data.folder_name            = record.data.file_name;
			record.data.text                   = record.data.file_name;
			record.data.img                    = record.data.icon_image;
			record.data.updater                = record.data.modifier;
			record.data.updated_at             = record.data.modified_at;
			record.data.parent_readable_status = record.data.folder_readable_status;
			record.data.parent_writable_status = record.data.folder_writable_status;
			record.data.folder_readable_status = record.data.file_readable_status;
			record.data.folder_writable_status = record.data.file_writable_status;
			record.data.cls                    = record.data.file_type;

			viewFolder.down('#showFolderThumbnail').update(record.data);

			viewFolder.down('#showFolderProperty').loadRecord(record);
			viewFolder.down('#releaseFolderOwnership').loadRecord(record);
			viewFolder.down('#obtainFolderOwnership').loadRecord(record);
			viewFolder.down('#createFolder').loadRecord(record);
			viewFolder.down('#createFile').loadRecord(record);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#createSubFolder').loadRecord(record);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#searchCondition').loadRecord(record);

			viewFolder.down('#ccpdFolder').loadRecord(record);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "file_list"
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           record.data.text,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner:          owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(record);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderA_name:     record.data.folder_name,
				activeFolderA_hash:     record.data.hash_key,
				activeFolderA_readable: record.data.folder_readable_status,
				activeFolderA_writable: record.data.folder_writable_status
			});

			var readChecked       = record.data.folder_readable_status;
			var writeChecked      = record.data.folder_writable_status;
			var ownerChecked      = record.data.ownership;
			var controllerChecked = record.data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;

		} else {
			viewFile.down('#thumbnailArea').update(record.data);

                        if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
				Ext.ComponentQuery.query('#enlargeBtn')[0].show();
				SelectedFileType = record.data.file_type;
				SelectedFileUrl	 = record.data.url;
				SelectedFileThum = record.data.thumbnail_image;
			} else {
				Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
			}

			//viewFile.down('#showThumbnail').update(record.data);
			viewFile.down('#showFileProperty').loadRecord(record);
			viewFile.down('#showFileExtension').loadRecord(record);
			viewFile.down('#showFileDetails').loadRecord(record);
			viewFile.down('#ccpdFile').loadRecord(record);
			viewFile.down('#openFile').loadRecord(record);
			viewFile.down('#openVer').loadRecord(record);
			viewFile.down('#openApp').loadRecord(record);
			viewFile.down('#checkOut').loadRecord(record);
			viewFile.down('#changeLock').loadRecord(record);
			viewFile.down('#changeOwner').loadRecord(record);
			viewFile.down('#sendMail').loadRecord(record);

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(record);

			var folderReadChecked     = record.data.folder_readable_status;
			var folderWriteChecked    = record.data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = record.data.file_readable_status;
			var fileWriteChecked      = record.data.file_writable_status;
			var fileOwnershipChecked  = record.data.ownership;
			var fileControllerChecked = record.data.control_right;

			var fileLockChecked       = record.data.lock;
			var fileOpenChecked       = record.data.open_status;

			var lcUserId              = record.data.id_lc_by;

			var fileSizeUpper = record.data.file_size_upper;
			var fileSize      = record.data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});
                        
			/*var DateProduced = record.data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				//DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			}); */

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickBI: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (record.data.file_type === 'folder') {
			var viewFolder = viewFile;
			record.data.folder_name            = record.data.file_name;
			record.data.text                   = record.data.file_name;
			record.data.img                    = record.data.icon_image;
			record.data.updater                = record.data.modifier;
			record.data.updated_at             = record.data.modified_at;
			record.data.parent_readable_status = record.data.folder_readable_status;
			record.data.parent_writable_status = record.data.folder_writable_status;
			record.data.folder_readable_status = record.data.file_readable_status;
			record.data.folder_writable_status = record.data.file_writable_status;
			record.data.cls                    = record.data.file_type;

			viewFolder.down('#showFolderThumbnail').update(record.data);
			viewFolder.down('#showFolderProperty').loadRecord(record);
			viewFolder.down('#releaseFolderOwnership').loadRecord(record);
			viewFolder.down('#obtainFolderOwnership').loadRecord(record);
			viewFolder.down('#createFolder').loadRecord(record);
			viewFolder.down('#createFile').loadRecord(record);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#createSubFolder').loadRecord(record);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#searchCondition').loadRecord(record);

			viewFolder.down('#ccpdFolder').loadRecord(record);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "file_list"
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           record.data.text,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner:          owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(record);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderB_name:     record.data.folder_name,
				activeFolderB_hash:     record.data.hash_key,
				activeFolderB_readable: record.data.folder_readable_status,
				activeFolderB_writable: record.data.folder_writable_status
			});

			var readChecked       = record.data.folder_readable_status;
			var writeChecked      = record.data.folder_writable_status;
			var ownerChecked      = record.data.ownership;
			var controllerChecked = record.data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;
		} else {
			viewFile.down('#showThumbnail').update(record.data);
			viewFile.down('#showFileProperty').loadRecord(record);
			viewFile.down('#showFileExtension').loadRecord(record);
			viewFile.down('#showFileDetails').loadRecord(record);
			viewFile.down('#ccpdFile').loadRecord(record);
			viewFile.down('#openFile').loadRecord(record);
			viewFile.down('#openVer').loadRecord(record);
			viewFile.down('#openApp').loadRecord(record);
			viewFile.down('#checkOut').loadRecord(record);
			viewFile.down('#changeLock').loadRecord(record);
			viewFile.down('#changeOwner').loadRecord(record);
			viewFile.down('#sendMail').loadRecord(record);

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(record);

			var folderReadChecked     = record.data.folder_readable_status;
			var folderWriteChecked    = record.data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = record.data.file_readable_status;
			var fileWriteChecked      = record.data.file_writable_status;
			var fileOwnershipChecked  = record.data.ownership;
			var fileControllerChecked = record.data.control_right;

			var fileLockChecked       = record.data.lock;
			var fileOpenChecked       = record.data.open_status;

			var lcUserId              = record.data.id_lc_by;

			var fileSizeUpper = record.data.file_size_upper;
			var fileSize      = record.data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			/*var DateProduced = record.data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			});*/

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickBTB: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (record.data.file_type === 'folder') {
			var viewFolder = viewFile;
			record.data.folder_name            = record.data.file_name;
			record.data.text                   = record.data.file_name;
			record.data.img                    = record.data.icon_image;
			record.data.updater                = record.data.modifier;
			record.data.updated_at             = record.data.modified_at;
			record.data.parent_readable_status = record.data.folder_readable_status;
			record.data.parent_writable_status = record.data.folder_writable_status;
			record.data.folder_readable_status = record.data.file_readable_status;
			record.data.folder_writable_status = record.data.file_writable_status;
			record.data.cls                    = record.data.file_type;

			viewFolder.down('#showFolderThumbnail').update(record.data);

			viewFolder.down('#showFolderProperty').loadRecord(record);
			viewFolder.down('#releaseFolderOwnership').loadRecord(record);
			viewFolder.down('#obtainFolderOwnership').loadRecord(record);
			viewFolder.down('#createFolder').loadRecord(record);
			viewFolder.down('#createFile').loadRecord(record);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#createSubFolder').loadRecord(record);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#searchCondition').loadRecord(record);

			viewFolder.down('#ccpdFolder').loadRecord(record);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "file_list"
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});


			var owner_right;
			if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           record.data.text,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner:          owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(record);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderB_name:     record.data.folder_name,
				activeFolderB_hash:     record.data.hash_key,
				activeFolderB_readable: record.data.folder_readable_status,
				activeFolderB_writable: record.data.folder_writable_status
			});

			var readChecked       = record.data.folder_readable_status;
			var writeChecked      = record.data.folder_writable_status;
			var ownerChecked      = record.data.ownership;
			var controllerChecked = record.data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;
		} else {
			viewFile.down('#showThumbnail').update(record.data);
			viewFile.down('#showFileProperty').loadRecord(record);
			viewFile.down('#showFileExtension').loadRecord(record);
			viewFile.down('#showFileDetails').loadRecord(record);
			viewFile.down('#ccpdFile').loadRecord(record);
			viewFile.down('#openFile').loadRecord(record);
			viewFile.down('#openVer').loadRecord(record);
			viewFile.down('#openApp').loadRecord(record);
			viewFile.down('#checkOut').loadRecord(record);
			viewFile.down('#changeLock').loadRecord(record);
			viewFile.down('#changeOwner').loadRecord(record);
			viewFile.down('#sendMail').loadRecord(record);

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(record);

			var folderReadChecked     = record.data.folder_readable_status;
			var folderWriteChecked    = record.data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = record.data.file_readable_status;
			var fileWriteChecked      = record.data.file_writable_status;
			var fileOwnershipChecked  = record.data.ownership; 
			var fileControllerChecked = record.data.control_right;

			var fileLockChecked       = record.data.lock;
			var fileOpenChecked       = record.data.open_status;

			var lcUserId              = record.data.id_lc_by;

			var fileSizeUpper = record.data.file_size_upper;
			var fileSize      = record.data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			/*var DateProduced = record.data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			});*/

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickSI: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		//viewFile.down('#showThumbnail').update(record.data);
                viewFile.down('#thumbnailArea').update(record.data);
                
                if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
                   Ext.ComponentQuery.query('#enlargeBtn')[0].show();
                   SelectedFileType = record.data.file_type;
                   SelectedFileUrl  = record.data.url;
                   SelectedFileThum = record.data.thumbnail_image;
                } else {
                   Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
                }
                //viewFile.down('#showThumbnail').loadRecord(record);

		viewFile.down('#showFileProperty').loadRecord(record);
		viewFile.down('#showFileExtension').loadRecord(record);
		viewFile.down('#showFileDetails').loadRecord(record);
		viewFile.down('#ccpdFile').loadRecord(record);
		viewFile.down('#openFile').loadRecord(record);
		viewFile.down('#openVer').loadRecord(record);
		viewFile.down('#openApp').loadRecord(record);
		viewFile.down('#checkOut').loadRecord(record);
		viewFile.down('#changeLock').loadRecord(record);
		viewFile.down('#changeOwner').loadRecord(record);
		viewFile.down('#sendMail').loadRecord(record);

		var owner_right;
		if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
			owner_right = 'full';
		} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
			owner_right = 'read_only';
		} else {
			owner_right = "";
		}

		if (!record.data.other_readable) {record.data.other_readable = false;}
		if (!record.data.other_writable) {record.data.other_writable = false;}

		Ext.getCmp('filePrivilege').getForm().setValues({
			file_name:      record.data.file_name,
			owner_name:		record.data.owner,
			hash_key:       record.data.hash_key,
			cont_location:  record.data.cont_location,
			owner_access:   owner_right,
			other_readable: record.data.other_readable,
			other_writable: record.data.other_writable
		});
		//Ext.getCmp('privilege_file_bar').moveFirst();

		viewFile.down('#searchGroupFile').loadRecord(record);

		var folderReadChecked     = record.data.folder_readable_status;
		var folderWriteChecked    = record.data.folder_writable_status;
		if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

		var fileReadChecked       = record.data.file_readable_status;
		var fileWriteChecked      = record.data.file_writable_status;
		var fileOwnershipChecked  = record.data.ownership;
		var fileControllerChecked = record.data.control_right;

		var fileLockChecked       = record.data.lock;
		var fileOpenChecked       = record.data.open_status;

		var lcUserId              = record.data.id_lc_by;

		var fileSizeUpper = record.data.file_size_upper;
		var fileSize      = record.data.file_size;
		var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

		if (fileSizeReal === 0 || fileSizeReal === "") {
			file_size_formatted = '0 B';
		} else {
			file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
			file_size_formatted = file_size_formatted + ' B';
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			file_exact_disp_size: file_size_formatted
		});

		var DateCreated = record.data.created_at;
		var DateCreated_formated;

		if (DateCreated === 0 || DateCreated === "") {
			DateCreated_formated = ' - ';
		} else {
			DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			created_at: DateCreated_formated
		});

		var DateModified = record.data.updated_at;
		var DateModified_formated;

		if (DateModified === 0 || DateModified === "") {
			DateModified_formated = ' - ';
		} else {
			DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			updated_at: DateModified_formated
		});

		/*var DateProduced = record.data.produced_date;
		var DateProduced_formated;

		if (DateProduced === 0 || DateProduced === "") {
			DateProduced_formated = ' - ';
		} else {
			DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileExtension').getForm().setValues({
			produced_date: DateProduced_formated
		});*/

		var targetStatus = Ext.getCmp('target_folder_writable_status').value;
		//console.log(targetStatus);

		if (Ext.isEmpty(targetStatus)) {
			targetStatus = true;
		} else {
			targetStatus = Boolean(targetStatus);
		}

		doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

		var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
		dataFi = Ext.apply({request_type: "change_file"}, dataFi);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			//url: 'php/request.php',
			jsonData: dataFi,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickBTL: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		if (record.data.file_type === 'folder') {
			var viewFolder = viewFile;
			record.data.folder_name            = record.data.file_name;
			record.data.text                   = record.data.file_name;
			record.data.img                    = record.data.icon_image;
			record.data.updater                = record.data.modifier;
			record.data.updated_at             = record.data.modified_at;
			record.data.parent_readable_status = record.data.folder_readable_status;
			record.data.parent_writable_status = record.data.folder_writable_status;
			record.data.folder_readable_status = record.data.file_readable_status;
			record.data.folder_writable_status = record.data.file_writable_status;
			record.data.cls                    = record.data.file_type;

			viewFolder.down('#showFolderThumbnail').update(record.data);
			viewFolder.down('#showFolderProperty').loadRecord(record);
			viewFolder.down('#releaseFolderOwnership').loadRecord(record);
			viewFolder.down('#obtainFolderOwnership').loadRecord(record);
			viewFolder.down('#createFolder').loadRecord(record);
			viewFolder.down('#createFile').loadRecord(record);
			Ext.ComponentQuery.query('#createFile')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#createSubFolder').loadRecord(record);
			Ext.ComponentQuery.query('#createSubFolder')[0].getForm().setValues({
				original_place: "file_list"
			});
			viewFolder.down('#searchCondition').loadRecord(record);

			viewFolder.down('#ccpdFolder').loadRecord(record);
			Ext.ComponentQuery.query('#ccpdFolder')[0].getForm().setValues({
				original_place: "file_list"
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}
			Ext.getCmp('showFolderProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFolderProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			var owner_right;
			if (record.data.folder_readable_status === true && record.data.folder_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.folder_readable_status === true && record.data.folder_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			Ext.getCmp('folderPrivilege').getForm().setValues({
				text:           record.data.text,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner:          owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_folder_bar').moveFirst();

			viewFolder.down('#searchGroupFolder').loadRecord(record);

			Ext.getCmp('activeData').getForm().setValues({
				activeFolderB_name:     record.data.folder_name,
				activeFolderB_hash:     record.data.hash_key,
				activeFolderB_readable: record.data.folder_readable_status,
				activeFolderB_writable: record.data.folder_writable_status
			});

			var readChecked       = record.data.folder_readable_status;
			var writeChecked      = record.data.folder_writable_status;
			var ownerChecked      = record.data.ownership;
			var controllerChecked = record.data.control_right;
			var targetStatus = Ext.getCmp('target_folder_writable').value;
		} else {
			viewFile.down('#showThumbnail').update(record.data);
			viewFile.down('#showFileProperty').loadRecord(record);
			viewFile.down('#showFileExtension').loadRecord(record);
			viewFile.down('#showFileDetails').loadRecord(record);
			viewFile.down('#ccpdFile').loadRecord(record);
			viewFile.down('#openFile').loadRecord(record);
			viewFile.down('#openVer').loadRecord(record);
			viewFile.down('#openApp').loadRecord(record);
			viewFile.down('#checkOut').loadRecord(record);
			viewFile.down('#changeLock').loadRecord(record);
			viewFile.down('#changeOwner').loadRecord(record);
			viewFile.down('#sendMail').loadRecord(record);

			var owner_right;
			if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
				owner_right = 'full';
			} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
				owner_right = 'read_only';
			} else {
				owner_right = "";
			}

			if (!record.data.other_readable) {record.data.other_readable = false;}
			if (!record.data.other_writable) {record.data.other_writable = false;}

			Ext.getCmp('filePrivilege').getForm().setValues({
				file_name:      record.data.file_name,
				owner_name:		record.data.owner,
				hash_key:       record.data.hash_key,
				cont_location:  record.data.cont_location,
				owner_access:   owner_right,
				other_readable: record.data.other_readable,
				other_writable: record.data.other_writable
			});
			//Ext.getCmp('privilege_file_bar').moveFirst();

			viewFile.down('#searchGroupFile').loadRecord(record);

			var folderReadChecked     = record.data.folder_readable_status;
			var folderWriteChecked    = record.data.folder_writable_status;
			if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

			var fileReadChecked       = record.data.file_readable_status;
			var fileWriteChecked      = record.data.file_writable_status;
			var fileOwnershipChecked  = record.data.ownership;
			var fileControllerChecked = record.data.control_right;

			var fileLockChecked       = record.data.lock;
			var fileOpenChecked       = record.data.open_status;

			var lcUserId              = record.data.id_lc_by;

			var fileSizeUpper = record.data.file_size_upper;
			var fileSize      = record.data.file_size;
			var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

			if (fileSizeReal === 0 || fileSizeReal === "") {
				file_size_formatted = '0 B';
			} else {
				file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
				file_size_formatted = file_size_formatted + ' B';
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				file_exact_disp_size: file_size_formatted
			});

			var DateCreated = record.data.created_at;
			var DateCreated_formated;

			if (DateCreated === 0 || DateCreated === "") {
				DateCreated_formated = ' - ';
			} else {
				DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				created_at: DateCreated_formated
			});

			var DateModified = record.data.updated_at;
			var DateModified_formated;

			if (DateModified === 0 || DateModified === "") {
				DateModified_formated = ' - ';
			} else {
				DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileProperty').getForm().setValues({
				updated_at: DateModified_formated
			});

			/*var DateProduced = record.data.produced_date;
			var DateProduced_formated;

			if (DateProduced === 0 || DateProduced === "") {
				DateProduced_formated = ' - ';
			} else {
				DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
			}

			Ext.getCmp('showFileExtension').getForm().setValues({
				produced_date: DateProduced_formated
			});*/

			var targetStatus = Ext.getCmp('target_folder_writable_status').value;
			//console.log(targetStatus);

			if (Ext.isEmpty(targetStatus)) {
				targetStatus = true;
			} else {
				targetStatus = Boolean(targetStatus);
			}

			doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

			var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
			dataFi = Ext.apply({request_type: "change_file"}, dataFi);

			Ext.Ajax.request({
				url: 'tdx/updatedata.tdx',
				//url: 'php/request.php',
				jsonData: dataFi,
				success: handleSuccess,
				failure: handleFailure
			});
		}

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickSTB: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];

		//viewFile.down('#showThumbnail').update(record.data);
		viewFile.down('#thumbnailArea').update(record.data);
		                 
                if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
		   Ext.ComponentQuery.query('#enlargeBtn')[0].show();
		   SelectedFileType = record.data.file_type;
		   SelectedFileUrl  = record.data.url;
		   SelectedFileThum = record.data.thumbnail_image;
		} else {
		   Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
		}

		viewFile.down('#showFileProperty').loadRecord(record);
		viewFile.down('#showFileExtension').loadRecord(record);
		viewFile.down('#showFileDetails').loadRecord(record);
		viewFile.down('#ccpdFile').loadRecord(record);
		viewFile.down('#openFile').loadRecord(record);
		viewFile.down('#openVer').loadRecord(record);
		viewFile.down('#openApp').loadRecord(record);
		viewFile.down('#checkOut').loadRecord(record);
		viewFile.down('#changeLock').loadRecord(record);
		viewFile.down('#changeOwner').loadRecord(record);
		viewFile.down('#sendMail').loadRecord(record);

		var owner_right;
		if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
			owner_right = 'full';
		} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
			owner_right = 'read_only';
		} else {
			owner_right = "";
		}

		if (!record.data.other_readable) {record.data.other_readable = false;}
		if (!record.data.other_writable) {record.data.other_writable = false;}

		Ext.getCmp('filePrivilege').getForm().setValues({
			file_name:      record.data.file_name,
			owner_name:		record.data.owner,
			hash_key:       record.data.hash_key,
			cont_location:  record.data.cont_location,
			owner_access:   owner_right,
			other_readable: record.data.other_readable,
			other_writable: record.data.other_writable
		});
		//Ext.getCmp('privilege_file_bar').moveFirst();

		viewFile.down('#searchGroupFile').loadRecord(record);

		var folderReadChecked     = record.data.folder_readable_status;
		var folderWriteChecked    = record.data.folder_writable_status;
		if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

		var fileReadChecked       = record.data.file_readable_status;
		var fileWriteChecked      = record.data.file_writable_status;
		var fileOwnershipChecked  = record.data.ownership;
		var fileControllerChecked = record.data.control_right;

		var fileLockChecked       = record.data.lock;
		var fileOpenChecked       = record.data.open_status;

		var lcUserId              = record.data.id_lc_by;

		var fileSizeUpper = record.data.file_size_upper;
		var fileSize      = record.data.file_size;
		var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

		if (fileSizeReal === 0 || fileSizeReal === "") {
			file_size_formatted = '0 B';
		} else {
			file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
			file_size_formatted = file_size_formatted + ' B';
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			file_exact_disp_size: file_size_formatted
		});

		var DateCreated = record.data.created_at;
		var DateCreated_formated;

		if (DateCreated === 0 || DateCreated === "") {
			DateCreated_formated = ' - ';
		} else {
			DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			created_at: DateCreated_formated
		});

		var DateModified = record.data.updated_at;
		var DateModified_formated;

		if (DateModified === 0 || DateModified === "") {
			DateModified_formated = ' - ';
		} else {
			DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			updated_at: DateModified_formated
		});

		/*var DateProduced = record.data.produced_date;
		var DateProduced_formated;

		if (DateProduced === 0 || DateProduced === "") {
			DateProduced_formated = ' - ';
		} else {
			DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileExtension').getForm().setValues({
			produced_date: DateProduced_formated
		});*/

		var targetStatus = Ext.getCmp('target_folder_writable_status').value;
		//console.log(targetStatus);

		if (Ext.isEmpty(targetStatus)) {
			targetStatus = true;
		} else {
			targetStatus = Boolean(targetStatus);
		}

		doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

		var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
		dataFi = Ext.apply({request_type: "change_file"}, dataFi);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			//url: 'php/request.php',
			jsonData: dataFi,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onDataviewItemClickSTL: function(dataview, record, item, index, e, eOpts) {
		var viewFile = Ext.ComponentQuery.query('mainView')[0];
                viewFile.down('#thumbnailArea').update(record.data);

                if (record.data.t_file_type == 'mp4' || record.data.t_file_type == 'ogg') {
                   Ext.ComponentQuery.query('#enlargeBtn')[0].show();
                   SelectedFileType = record.data.file_type;
                   SelectedFileUrl  = record.data.url;
                   SelectedFileThum = record.data.thumbnail_image;
                } else {
                   Ext.ComponentQuery.query('#enlargeBtn')[0].hide();
                }

		//viewFile.down('#showThumbnail').update(record.data);
		viewFile.down('#showFileProperty').loadRecord(record);
		viewFile.down('#showFileExtension').loadRecord(record);
		viewFile.down('#showFileDetails').loadRecord(record);
		viewFile.down('#ccpdFile').loadRecord(record);
		viewFile.down('#openFile').loadRecord(record);
		viewFile.down('#openVer').loadRecord(record);
		viewFile.down('#openApp').loadRecord(record);
		viewFile.down('#checkOut').loadRecord(record);
		viewFile.down('#changeLock').loadRecord(record);
		viewFile.down('#changeOwner').loadRecord(record);
		viewFile.down('#sendMail').loadRecord(record);

		var owner_right;
		if (record.data.file_readable_status === true && record.data.file_writable_status === true) {
			owner_right = 'full';
		} else if (record.data.file_readable_status === true && record.data.file_writable_status === false) {
			owner_right = 'read_only';
		} else {
			owner_right = "";
		}

		if (!record.data.other_readable) {record.data.other_readable = false;}
		if (!record.data.other_writable) {record.data.other_writable = false;}

		Ext.getCmp('filePrivilege').getForm().setValues({
			file_name:      record.data.file_name,
			owner_name:		record.data.owner,
			hash_key:       record.data.hash_key,
			cont_location:  record.data.cont_location,
			owner_access:   owner_right,
			other_readable: record.data.other_readable,
			other_writable: record.data.other_writable
		});
		//Ext.getCmp('privilege_file_bar').moveFirst();

		viewFile.down('#searchGroupFile').loadRecord(record);

		var folderReadChecked     = record.data.folder_readable_status;
		var folderWriteChecked    = record.data.folder_writable_status;
		if (Ext.isEmpty(folderWriteChecked)) { folderWriteChecked = true;}

		var fileReadChecked       = record.data.file_readable_status;
		var fileWriteChecked      = record.data.file_writable_status;
		var fileOwnershipChecked  = record.data.ownership;
		var fileControllerChecked = record.data.control_right;

		var fileLockChecked       = record.data.lock;
		var fileOpenChecked       = record.data.open_status;

		var lcUserId              = record.data.id_lc_by;

		var fileSizeUpper = record.data.file_size_upper;
		var fileSize      = record.data.file_size;
		var fileSizeReal  = fileSizeUpper * Math.pow(2, 31) + fileSize;

		if (fileSizeReal === 0 || fileSizeReal === "") {
			file_size_formatted = '0 B';
		} else {
			file_size_formatted = Ext.util.Format.number(fileSizeReal,'0,000');
			file_size_formatted = file_size_formatted + ' B';
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			file_exact_disp_size: file_size_formatted
		});

		var DateCreated = record.data.created_at;
		var DateCreated_formated;

		if (DateCreated === 0 || DateCreated === "") {
			DateCreated_formated = ' - ';
		} else {
			DateCreated_formated = Ext.util.Format.date(DateCreated,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			created_at: DateCreated_formated
		});

		var DateModified = record.data.updated_at;
		var DateModified_formated;

		if (DateModified === 0 || DateModified === "") {
			DateModified_formated = ' - ';
		} else {
			DateModified_formated = Ext.util.Format.date(DateModified,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileProperty').getForm().setValues({
			updated_at: DateModified_formated
		});

		/*var DateProduced = record.data.produced_date;
		var DateProduced_formated;

		if (DateProduced === 0 || DateProduced === "") {
			DateProduced_formated = ' - ';
		} else {
			DateProduced_formated = Ext.util.Format.date(DateProduced,'Y-m-d H:i:s O');
		}

		Ext.getCmp('showFileExtension').getForm().setValues({
			produced_date: DateProduced_formated
		});*/

		var targetStatus = Ext.getCmp('target_folder_writable_status').value;
		//console.log(targetStatus);

		if (Ext.isEmpty(targetStatus)) {
			targetStatus = true;
		} else {
			targetStatus = Boolean(targetStatus);
		}

		doCheckFile(folderReadChecked, folderWriteChecked, fileReadChecked, fileWriteChecked, fileOwnershipChecked, fileControllerChecked, fileLockChecked, fileOpenChecked, targetStatus, lcUserId, this_op_id);

		var dataFi = Ext.apply({session_id: this_session_id}, record.raw);
		dataFi = Ext.apply({request_type: "change_file"}, dataFi);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			//url: 'php/request.php',
			jsonData: dataFi,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'ファイルの変更失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
				//Ext.getCmp('privilege_file_bar').moveFirst();
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'ファイルの変更失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	init: function(application) {
		this.control({
			"#domainGridPanelA": {
				selectionchange: this.onGridpanelSelectionChangeDA
			},
			"#domainGridPanelB": {
				selectionchange: this.onGridpanelSelectionChangeDB
			},
			"#folderPanelA": {
				selectionchange: this.onTreepanelSelectionChangeA
			},
			"#folderPanelB": {
				selectionchange: this.onTreepanelSelectionChangeB
			},
			"#listGridPanelA": {
				selectionchange: this.onGridpanelSelectionChangeFiA
			},
			"#listGridPanelB": {
				selectionchange: this.onGridpanelSelectionChangeFiB
			},
			"#searchedListGridPanel": {
				selectionchange: this.onGridpanelSelectionChangeFiS
			},
			"#targetA": {
				selectionchange: this.onTreeviewSelectionChangeCMDA
			},
			"#targetB": {
				selectionchange: this.onTreeviewSelectionChangeCMDB
			},
			"#targetFiA": {
				selectionchange: this.onTreeviewSelectionChangeCMDFiA
			},
			"#targetFiB": {
				selectionchange: this.onTreebiewSelectionChangeCMDFiB
			},
			"#iconViewA": {
				itemclick: this.onDataviewItemClickAI
			},
			"#thumbnailViewAB": {
				itemclick: this.onDataviewItemClickATB
			},
			"#thumbnailViewAL": {
				itemclick: this.onDataviewItemClickATL
			},
			"#iconViewB": {
				itemclick: this.onDataviewItemClickBI
			},
			"#thumbnailViewBB": {
				itemclick: this.onDataviewItemClickBTB
			},
			"#iconViewS": {
				itemclick: this.onDataviewItemClickSI
			},
			"#thumbnailViewBL": {
				itemclick: this.onDataviewItemClickBTL
			},
			"#thumbnailViewSB": {
				itemclick: this.onDataviewItemClickSTB
			},
			"#thumbnailViewSL": {
				itemclick: this.onDataviewItemClickSTL
			}
		});
	}

});
