/*
 * File: app/view/optionWin.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.urlLinkCreate', {
    extend: 'Ext.window.Window',
    alias: 'widget.urlLinkCreate',
    height: 300,
    hidden: false,
    id: 'urlLinkCreate',
    itemId: 'urlLinkCreate',
    width: 461,
    layout: {
        type: 'fit'
    },
    title: 'URLリンク送信',
    constrain: true,
    initComponent: function () {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    id: 'urlLinkForm',
                    itemId: 'urlLinkForm',
                    padding: 10,
                    items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            fieldLabel: 'パスフレーズ',
                            labelAlign: 'right',
                            labelWidth: 100,
                            id: 'urlLink_pf',
                            name: 'urlLink_pf',
                            value: '',
                            validateOnChange: true,
                            validateOnBlur: true,
                            allowBlank: false,
                            maxLength: 40,
                            //minLength:6,
                            validator: function ()
                            {
                                var value = Ext.getCmp('urlLink_pf').value;
                                if (value.match(/[^ A-Za-z0-9]+/))
                                {
                                    var msg = '半角英数字と半角スペースしか許可されません。';
                                    return msg;
                                }
                                if (value.trim().length < 6)
                                {
                                    var msg = 'このフィールドの最小値は6です。';
                                    return msg;
                                }
                                return true;
                            },
                            listeners:
                                    {
                                        validitychange: function (me, isValid, options)
                                        {
                                            if (isValid === true)
                                            {
                                                pf_flag = true;
                                            }
                                            else
                                            {
                                                pf_flag = false;
                                            }
                                        }
                                    }
                        },
                        {
                            xtype: 'datefield',
                            fieldLabel: '期限日付',
                            labelAlign: 'right',
                            labelWidth: 100,
                            format: 'Y/m/d',
                            id: 'urllink_limit_day',
                            name: 'urllink_limit_day',
                            allowBlank: false,
                            listeners:
                                    {
                                        validitychange: function (me, isValid, options)
                                        {
                                            if (isValid === true)
                                            {
                                                date_flag = true;
                                            }
                                            else
                                            {
                                                date_flag = false;
                                            }
                                        }
                                    }
                        },
                        {
                            xtype: 'timefield',
                            fieldLabel: '期限時間',
                            labelAlign: 'right',
                            labelWidth: 100,
                            format: 'H:i',
                            id: 'urllink_limit_time',
                            name: 'urllink_limit_time',
                            allowBlank: false,
                            listeners:
                                    {
                                        validitychange: function (me, isValid, options)
                                        {
                                            if (isValid === true)
                                            {
                                                time_flag = true;
                                            }
                                            else
                                            {
                                                time_flag = false;
                                            }
                                        }
                                    }
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            height: 100,
                            id: 'urllink_adr',
                            margin: 0,
                            fieldLabel: 'アドレス',
                            labelAlign: 'right',
                            labelWidth: 100,
                            name: 'urllink_adr',
                            allowBlank: false,
                            listeners:
                                    {
                                        validitychange: function (me, isValid, options)
                                        {
                                            if (isValid === true)
                                            {
                                                addr_flag = true;
                                            }
                                            else
                                            {
                                                addr_flag = false;
                                            }
                                        }
                                    }
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            items: [
                                {
                                    xtype: 'tbfill'
                                },
                                {
                                    xtype: 'button',
                                    width: 100,
                                    text: '作成',
                                    tooltip: 'パスコード、期限、ファイル名より送信URLを作成します。',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick2,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    width: 100,
                                    text: 'キャンセル',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        beforerender: {
                            fn: me.onChangePwFormBeforeRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },
    onChangePwFormBeforeRender: function (component, eOpts) {
        pf_flag = false;
        date_flag = false;
        time_flag = false;
        addr_flag = false;
        component.getForm().setValues({
            operator_id: this_op_id,
            operator_name: this_op_name
        });

    },
    onButtonClick2: function (button, e, eOpts) {
        if (pf_flag && date_flag && time_flag && addr_flag)
        {
            this.hide();
            var form_data = Ext.getCmp('urlLinkForm').getForm().getValues();

            //var grid = Ext.getCmp('listGridPanelA');
            var grid = Ext.getCmp(TargetComp);
            var model = grid.getSelectionModel();
            var length = model.getSelection().length;
            var file_data = [];
            var send_data;

            for (i = 0; i < length; i++)
            {
                var record = model.getSelection()[i];

                file_data[i] = Ext.apply({cont_location: record.data.cont_location}, file_data[i]);
                file_data[i] = Ext.apply({hash_key: record.data.hash_key}, file_data[i]);
                file_data[i] = Ext.apply({file_name: record.data.file_name}, file_data[i]);
            }
            send_data = Ext.apply({session_id: this_session_id}, send_data);
            send_data = Ext.apply({request_type: 'create_urlLink'}, send_data);
            send_data = Ext.apply({urlLink_pf: form_data['urlLink_pf']}, send_data);
            send_data = Ext.apply({urlLink_adr: form_data['urllink_adr']}, send_data);
            send_data = Ext.apply({urlLink_limit_day: form_data['urllink_limit_day']}, send_data);
            send_data = Ext.apply({urlLink_limit_time: form_data['urllink_limit_time']}, send_data);
            send_data = Ext.apply({file_data: file_data}, send_data);
            Ext.Ajax.request({
                url: 'tdx/updatedata.tdx',
                jsonData: send_data,
                method: 'POST',
                success: handleSuccess,
                failure: handleFailure
            });
        }
        else
        {
            Ext.Msg.show({
                title: '入力エラー',
                msg: '入力内容が不正です。',
                buttons: Ext.Msg.OK
            });
        }

        function handleSuccess(response) {
            obj = Ext.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.show({
                    title: 'URLリンクの作成失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            } else {
                console.log(obj.test);
                data = [];
                for (i = 0; i < obj.urlLink.length; i++)
                {
                    data[i] = Ext.apply({value: obj.urlLink[i]}, data[i]);
                    data[i] = Ext.apply({file_name: obj.fileName[i]}, data[i]);
                }
                Ext.create('Ext.data.Store',
                        {
                            id: 'SendUrlLinkStore',
                            fields: ['file_name', 'value'],
                            data: data
                        });
                Ext.create('TeamDomain.view.urlLinkSend').show();
            }
            return;
        }

        function handleFailure(response) {
            Ext.Msg.show({
                title: 'URLリンクの作成失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }

        //Ext.create('TeamDomain.view.urlLinkSend').show();
    },
    onButtonClick1: function (button, e, eOpts) {
        this.close();
    }

});