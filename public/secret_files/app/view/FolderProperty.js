/*
 * File: app/view/FolderProperty.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.FolderProperty', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.folderproperty',

	id: 'folderProperty',
	margin: '10 10 0 10',
	layout: {
		align: 'stretch',
		type: 'vbox'
	},
	title: 'フォルダ',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'panel',
					height: 138,
					id: 'showFolderThumbnail',
					padding: '',
					tpl: [
						'<img src="data/{img}" height="128px" style="float: center" />'
					],
					bodyPadding: 5
				},
				{
					xtype: 'tabpanel',
					flex: 1,
					activeTab: 0,
					items: [
						{
							xtype: 'form',
							frame: true,
							id: 'showFolderProperty',
							autoScroll: true,
							bodyPadding: 5,
							title: 'プロパティ',
							items: [
								{
									xtype: 'hiddenfield',
									anchor: '100%',
									fieldLabel: 'Label',
									name: 'cont_location'
								},
								{
									xtype: 'hiddenfield',
									anchor: '100%',
									fieldLabel: 'Label',
									name: 'hash_key'
								},
								{
									xtype: 'textfield',
									id: 'show_folder_name',
									margin: 0,
									width: 320,
									fieldLabel: 'フォルダ名',
									labelWidth: 90,
									name: 'text',
									validateOnChange: false,
									validateOnBlur: false,
									allowBlank: false,
									enforceMaxLength: true,
									maxLength: 80
								},
								{
									xtype: 'button',
									handler: function() {
										if (Busy === true) { return; }
										Busy = true;
										var formX = this.up().getForm().getFieldValues();

										if (formX.text === '') {
											Busy = false;
											Ext.Msg.show({
												title:'フォルダ選択',
												msg: 'フォルダを選択してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										formX = Ext.apply({session_id: this_session_id},formX);
										formX = Ext.apply({request_type: 'change_folder_name'}, formX);

										Ext.Ajax.request({
											url: 'tdx/updatedata.tdx',
											method: 'POST',
											jsonData: formX,
											success: handleSuccess,
											failure: handleFailure
										});

										function handleSuccess(response) {
											obj = Ext.decode(response.responseText);
											var request_success = obj.success;

											if (request_success === false) {
												Busy = false;
												var request_errors = obj.errors;
												Ext.Msg.show({
													title:'フォルダ名変更失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												requestRefresh();
											}
											return;
										}

										function handleFailure(response) {
											Busy = false;
											Ext.Msg.show({
												title:'フォルダ名変更失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}

										//ファイルリスト再読み込み用
										function requestRefresh() {
											sending_cont_location	= formX.cont_location;
											sending_hash_key		= formX.hash_key;

											var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
											requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
											requestRefreshData	= Ext.apply({event_type: "property_change_folder_name"}, requestRefreshData);
											requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

											Ext.Ajax.request({
												url: 'tdx/updatedata.tdx',
												jsonData: requestRefreshData,
												success: handleSuccess2,
												failure: handleFailure2
											});

										}

										function handleSuccess2(response) {
											obj = Ext.decode(response.responseText);

											var request_success = obj.success;
											var request_status  = obj.status;

											if (request_success === false) {
												Busy = false;
												var request_errors  = obj.errors;
												Ext.Msg.show({
													title:'フォルダ名変更失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												//新規にフォルダを作成した場合に、表示に関連するのは該当Locationだけではないので、以下3カ所をコメントアウトし、条件分岐をなくした。
												//厳密には、選択しているワークエリアやツリーの表示状態に依存するが、処理が大変なので、一括リロードとする。
												var thisDomain		= Ext.ComponentQuery.query('#activeData')[0].items.items[1].value;
												var anotherDomain	= Ext.ComponentQuery.query('#activeData')[0].items.items[3].value;
												//console.log(thisDomain);
												//console.log(anotherDomain);


												if (thisDomain === anotherDomain) {
													//選択しているワークエリアが同一ならば、以下を実行する。
													if (formX.cont_location === 'folder_a') {
														//もし、作業対象のフォルダツリーがAならば、先にBを読み、その後にコールバックでAを読む。
														//この処理によって、プロパティペイン側は、Aを表示することになる。
														Ext.getStore('FolderDataStoreB').load({
															callback: function() {
																Ext.getStore('FolderDataStoreA').load();
															}
														});

														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();

														//Ext.getStore('TargetFolderBT').load();
														//Ext.getStore('TargetFolderBTFi').load();

														Ext.getStore('FileDataStoreA').load();
														Ext.getStore('FileDataStoreB').load();

													} else if (formX.cont_location === 'folder_b') {
														//もし、作業対象のフォルダツリーがBならば、先にAを読み、その後にコールバックでBを読む。
														//この処理によって、プロパティペイン側は、Bを表示することになる。
														Ext.getStore('FolderDataStoreA').load({
															callback: function() {
																Ext.getStore('FolderDataStoreB').load();
															}
														});

														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();

														//Ext.getStore('TargetFolderBT').load();
														//Ext.getStore('TargetFolderBTFi').load();

														Ext.getStore('FileDataStoreA').load();
														Ext.getStore('FileDataStoreB').load();
													}
												} else {
													//選択しているドメインが同一でないならば、以下を実行する。
													if (formX.cont_location === 'folder_a') {
														Ext.getStore('FolderDataStoreA').load();
														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();
														Ext.getStore('FileDataStoreA').load();
													} else {
														Ext.getStore('FolderDataStoreB').load();
														//Ext.getStore('TargetFolderBT').load();
														//Ext.getStore('TargetFolderBTFi').load();
														Ext.getStore('FileDataStoreB').load();
													}
												}
												Busy = false;

												/*
												if (formX.cont_location === 'folder_a') {
												Ext.getStore('FolderDataStoreA').load();
												Ext.getStore('TargetFolderAT').load();
												Ext.getStore('TargetFolderATFi').load();
												} else if (formX.cont_location === 'folder_b') {
												Ext.getStore('FolderDataStoreB').load();
												Ext.getStore('TargetFolderBT').load();
												Ext.getStore('TargetFolderBTFi').load();
												}
												*/
											}
										}

										function handleFailure2(response) {
											Busy = false;
											Ext.Msg.show({
												title:'フォルダ名変更失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}
									},
									id: 'btn_change_folder_name',
									margin: '5 0 5 210',
									width: 100,
									text: 'フォルダ名変更',
									tooltip: {
										html: 'フォルダ名を変更する場合には、現在のフォルダ名を上書きしてから、このボタンを押して下さい。'
									}
								},
								{
									xtype: 'displayfield',
									margin: 0,
									width: 320,
									fieldLabel: '所有者',
									labelWidth: 90,
									name: 'owner'
								},
								{
									xtype: 'displayfield',
									width: 320,
									fieldLabel: '所有権',
									labelWidth: 90,
									name: 'ownership'
								},
								{
									xtype: 'displayfield',
									margin: 0,
									width: 320,
									fieldLabel: '読み取り権限',
									labelWidth: 90,
									name: 'folder_readable_status'
								},
								{
									xtype: 'displayfield',
									width: 320,
									fieldLabel: '書き込み権限',
									labelWidth: 90,
									name: 'folder_writable_status'
								},
								{
									xtype: 'displayfield',
									margin: 0,
									width: 320,
									fieldLabel: '作成日時',
									labelWidth: 90,
									name: 'created_at'
								},
								{
									xtype: 'displayfield',
									margin: 0,
									width: 320,
									fieldLabel: '作成者',
									labelWidth: 90,
									name: 'creator'
								},
								{
									xtype: 'displayfield',
									margin: 0,
									width: 320,
									fieldLabel: '更新日時',
									labelWidth: 90,
									name: 'updated_at'
								},
								{
									xtype: 'displayfield',
									margin: '0 0 5 0',
									width: 320,
									fieldLabel: '更新者',
									labelWidth: 90,
									name: 'updater'
								},
								{
									xtype: 'displayfield',
									hidden: true,
									margin: 0,
									width: 320,
									fieldLabel: '使用領域',
									labelWidth: 90,
									name: 'usedSpace'
								},
								{
									xtype: 'displayfield',
									hidden: true,
									margin: 0,
									width: 320,
									fieldLabel: '空き領域',
									labelWidth: 90,
									name: 'restSpace'
								},
								{
									xtype: 'displayfield',
									hidden: true,
									margin: 0,
									width: 320,
									fieldLabel: '容量',
									labelWidth: 90,
									name: 'capacity'
								},
								{
									xtype: 'displayfield',
									hidden: true,
									margin: 0,
									width: 320,
									fieldLabel: '使用率',
									labelWidth: 90,
									name: 'usedRate'
								}
							]
						},
						{
							xtype: 'tabpanel',
							id: 'operateFolder',
							title: '操作',
							activeTab: 0,
							maxTabWidth: 120,
							minTabWidth: 100,
							items: [
								{
									xtype: 'form',
									frame: true,
									id: 'ccpdFolder',
									itemId: 'ccpdFolder',
									autoScroll: true,
									layout: {
										align: 'stretch',
										type: 'vbox'
									},
									bodyPadding: 5,
									title: '移動/削除',
									items: [
										{
											xtype: 'fieldset',
											margin: '0 0 0 0',
											padding: '0 10 0 10',
											title: 'このフォルダを移動、または削除',
											items: [
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'original_place'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'cont_location'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'hash_key'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													id: 'folder_writable_status',
													fieldLabel: 'Label',
													name: 'folder_writable_status'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													id: 'folder_readable_status',
													fieldLabel: 'Label',
													name: 'folder_readable_status'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													id: 'target_folder_writable',
													fieldLabel: 'Label',
													name: 'target_folder_writable_status'
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													height: 20,
													id: 'folder_name',
													name: 'folder_name'
												}
											]
										},
										{
											xtype: 'fieldset',
											hidden: true,
											margin: '2 0 0 0',
											padding: '0 10 0 10',
											title: 'コピー、移動するフォルダの名前を変更できます。',
											items: [
												{
													xtype: 'textfield',
													anchor: '100%',
													id: 'new_folder_name',
													name: 'new_folder_name',
													blankText: '新しいフォルダ名を入力して下さい。',
													emptyText: '新しいフォルダ名を入力して下さい。'
												}
											]
										},
										{
											xtype: 'fieldcontainer',
											margin: '3 0 0 0',
											layout: {
												type: 'anchor'
											},
											items: [
												{
													xtype: 'button',
													handler: function() {
														var formX = this.up('form').getForm().getFieldValues();

														if (formX.folder_name === '' || formX.target_folder === '') {
															Ext.Msg.show({
																title:'フォルダの選択',
																msg: 'コピーするフォルダ/コピー先フォルダを選択してください',
																icon: Ext.Msg.ERROR,
																buttons: Ext.Msg.OK
															});
															return;
														}

														formX = Ext.apply({session_id: this_session_id}, formX);
														formX = Ext.apply({request_type: 'copy_folder'}, formX);

														Ext.Ajax.request({
															url: 'tdx/updatedata.tdx',
															method: 'POST',
															jsonData: formX,
															success: handleSuccess,
                              timeout: 7200000,
															failure: handleFailure
														});

														Ext.Msg.show({
															title: 'フォルダコピー中',
															msg: 'フォルダコピー中です'
														});

														function handleSuccess(response) {
															obj = Ext.decode(response.responseText);
															var request_success = obj.success;

															if (request_success === false) {
																var request_errors = obj.errors;
																Ext.Msg.hide();
																Ext.Msg.show({
																	title:'フォルダのコピー失敗',
																	msg: request_errors,
																	buttons: Ext.Msg.OK
																});
															} else {
																requestRefresh();
																Ext.Msg.hide();
															}
															return;
														}

														function handleFailure(response) {
															Ext.Msg.hide();
															Ext.Msg.show({
																title:'フォルダのコピー失敗',
																msg: 'サーバとの通信に失敗しました',
																buttons: Ext.Msg.OK
															});
														}

														function requestRefresh() {
															sending_cont_location	= formX.cont_location;
															sending_hash_key		= formX.hash_key;

															var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
															requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
															requestRefreshData	= Ext.apply({event_type: "property_copy_folder"}, requestRefreshData);
															requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

															Ext.Ajax.request({
																url: 'tdx/updatedata.tdx',
																jsonData: requestRefreshData,
																success: handleSuccess2,
																failure: handleFailure2
															});

														}

														function handleSuccess2(response) {
															obj = Ext.decode(response.responseText);

															var request_success = obj.success;
															var request_status  = obj.status;

															if (request_success === false) {
																var request_errors  = obj.errors;
																Ext.Msg.show({
																	title:'フォルダのコピー失敗',
																	msg: request_errors,
																	buttons: Ext.Msg.OK
																});
															} else {
																Ext.getStore('FolderDataStoreA').load();
																Ext.getStore('TargetFolderAT').load();
																Ext.getStore('TargetFolderATFi').load();

																Ext.getStore('FolderDataStoreB').load();
																//Ext.getStore('TargetFolderBT').load();
																//Ext.getStore('TargetFolderBTFi').load();

																Ext.getStore('FileDataStoreA').load();
																Ext.getStore('FileDataStoreB').load();
															}
														}

														function handleFailure2(response) {
															Ext.Msg.show({
																title:'フォルダのコピー失敗',
																msg: 'サーバとの通信に失敗しました',
																buttons: Ext.Msg.OK
															});
														}
													},
													id: 'btn_copy_folder',
													margin: '0 0 0 5',
													width: 100,
													text: 'コピー',
													tooltip: {
														html: '左ペインのフォルダツリーでコピーするフォルダを選択し、下のフォルダツリーでコピー先のフォルダを選択してからこのボタンを押して下さい。'
													}
												},
												{
													xtype: 'button',
													handler: function() {
														var formX = this.up('form').getForm().getFieldValues();

														if (formX.folder_name === '' || formX.target_folder === '') {
															Ext.Msg.show({
																title:'フォルダの選択',
																msg: '移動するフォルダ/移動先フォルダを選択してください',
																icon: Ext.Msg.ERROR,
																buttons: Ext.Msg.OK
															});
															return;
														}

														formX = Ext.apply({session_id: this_session_id}, formX);
														formX = Ext.apply({request_type: 'move_folder'}, formX);

														Ext.Ajax.request({
															url: 'tdx/updatedata.tdx',
															method: 'POST',
															jsonData: formX,
															success: handleSuccess,
                              timeout: 7200000,
															failure: handleFailure
														});

														Ext.Msg.show({
															title: 'フォルダ移動中',
															msg: 'フォルダ移動中です'
														});

														function handleSuccess(response) {
															obj = Ext.decode(response.responseText);
															var request_success = obj.success;

															if (request_success === false) {
																var request_errors = obj.errors;
																Ext.Msg.hide();
																Ext.Msg.show({
																	title:'フォルダの移動失敗',
																	msg: request_errors,
																	buttons: Ext.Msg.OK
																});
															} else {
																Ext.Msg.hide();
																requestRefresh();
															}
															return;
														}

														function handleFailure(response) {
															Ext.Msg.hide();
															Ext.Msg.show({
																title:'フォルダの移動失敗',
																msg: 'サーバとの通信に失敗しました',
																buttons: Ext.Msg.OK
															});
														}

														function requestRefresh() {
															sending_cont_location	= formX.cont_location;
															sending_hash_key		= formX.hash_key;

															var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
															requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
															requestRefreshData	= Ext.apply({event_type: "property_move_folder"}, requestRefreshData);
															requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

															Ext.Ajax.request({
																url: 'tdx/updatedata.tdx',
																jsonData: requestRefreshData,
																success: handleSuccess2,
																failure: handleFailure2
															});

														}

														function handleSuccess2(response) {
															obj = Ext.decode(response.responseText);

															var request_success = obj.success;
															var request_status  = obj.status;

															if (request_success === false) {
																var request_errors  = obj.errors;
																Ext.Msg.show({
																	title:'フォルダの移動失敗',
																	msg: request_errors,
																	buttons: Ext.Msg.OK
																});
															} else {
																Ext.getStore('FolderDataStoreA').load();
																Ext.getStore('TargetFolderAT').load();
																Ext.getStore('TargetFolderATFi').load();

																Ext.getStore('FolderDataStoreB').load();
																//Ext.getStore('TargetFolderBT').load();
																//Ext.getStore('TargetFolderBTFi').load();

																Ext.getStore('FileDataStoreA').load();
																Ext.getStore('FileDataStoreB').load();
															}
														}

														function handleFailure2(response) {
															Ext.Msg.show({
																title:'フォルダの移動失敗',
																msg: 'サーバとの通信に失敗しました',
																buttons: Ext.Msg.OK
															});
														}
													},
													id: 'btn_move_folder',
													margin: '0 0 0 5',
													width: 100,
													text: '移動',
													tooltip: {
														html: '左ペインのフォルダツリーで移動するフォルダを選択し、下のフォルダツリーで移動先のフォルダを選択してからこのボタンを押して下さい。'
													}
												},
												{
													xtype: 'button',
													handler: function() {
														var formX = this.up('form').getForm().getFieldValues();

														if (formX.folder_name === '') {
															Ext.Msg.show({
																title:'フォルダの選択',
																msg: '削除するフォルダを選択してください',
																icon: Ext.Msg.ERROR,
																buttons: Ext.Msg.OK
															});
															return;
														}

														formX = Ext.apply({session_id: this_session_id}, formX);
														formX = Ext.apply({request_type: 'delete_folder'}, formX);

														Ext.Ajax.request({
															url: 'tdx/updatedata.tdx',
															method: 'POST',
															jsonData: formX,
                                                                                                                        timeout: 0,
															success: handleSuccess,
															failure: handleFailure
														});

														Ext.Msg.show({
															title: 'フォルダ削除中',
															msg: 'フォルダ削除中です'
														});

														function handleSuccess(response) {
															obj = Ext.decode(response.responseText);
															var request_success = obj.success;

															if (request_success === false) {
																var request_errors = obj.errors;
																Ext.Msg.hide();
																Ext.Msg.show({
																	title:'フォルダの削除失敗',
																	msg: request_errors,
																	buttons: Ext.Msg.OK
																});
															} else {
																//requestRefresh();
                                                                                                                                Ext.getStore('FolderDataStoreA').load();
																Ext.getStore('TargetFolderAT').load();
																Ext.getStore('TargetFolderATFi').load();

																Ext.getStore('FolderDataStoreB').load();
																//Ext.getStore('TargetFolderBT').load();
																//Ext.getStore('TargetFolderBTFi').load();

																Ext.getStore('FileDataStoreA').load();
																Ext.getStore('FileDataStoreB').load();
																Ext.getStore('RecyclerDataStore').load();
																Ext.Msg.hide();
															}
															return;
														}

														function handleFailure(response) {
															Ext.Msg.hide();
															Ext.Msg.show({
																title:'フォルダの削除失敗',
																msg: 'サーバとの通信に失敗しました',
																buttons: Ext.Msg.OK
															});
														}

														function requestRefresh() {
															sending_cont_location	= formX.cont_location;
															sending_hash_key		= formX.hash_key;

															var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
															requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
															requestRefreshData	= Ext.apply({event_type: "property_delete_folder"}, requestRefreshData);
															requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

															Ext.Ajax.request({
																url: 'tdx/updatedata.tdx',
																jsonData: requestRefreshData,
																success: handleSuccess2,
																failure: handleFailure2
															});

														}

														function handleSuccess2(response) {
															obj = Ext.decode(response.responseText);

															var request_success = obj.success;
															var request_status  = obj.status;

															if (request_success === false) {
																var request_errors  = obj.errors;
																Ext.Msg.show({
																	title:'フォルダの削除失敗',
																	msg: request_errors,
																	buttons: Ext.Msg.OK
																});
															} else {
																Ext.getStore('FolderDataStoreA').load();
																Ext.getStore('TargetFolderAT').load();
																Ext.getStore('TargetFolderATFi').load();

																Ext.getStore('FolderDataStoreB').load();
																//Ext.getStore('TargetFolderBT').load();
																//Ext.getStore('TargetFolderBTFi').load();

																Ext.getStore('FileDataStoreA').load();
																Ext.getStore('FileDataStoreB').load();
																Ext.getStore('RecyclerDataStore').load();	
															}
														}

														function handleFailure2(response) {
															Ext.Msg.show({
																title:'フォルダの削除失敗',
																msg: 'サーバとの通信に失敗しました',
																buttons: Ext.Msg.OK
															});
														}
													},
													id: 'btn_delete_folder',
													margin: '0 0 0 5',
													width: 100,
													text: '削除',
													tooltip: {
														html: '左ペインのフォルダツリーで削除するフォルダを選択してからこのボタンを押して下さい。'
													}
												}
											]
										},
										{
											xtype: 'fieldset',
											flex: 1,
											height: 230,
											margin: '5 0 0 0',
											padding: '0 10 0 10',
											maintainFlex: true,
											layout: {
												align: 'stretch',
												padding: 0,
												type: 'vbox'
											},
											title: '移動先フォルダの指定',
											items: [
												{
													xtype: 'displayfield',
													height: 20,
													name: 'text'
												},
												{
													xtype: 'hiddenfield',
													fieldLabel: 'Label',
													name: 'target_hash_key'
												},
												{
													xtype: 'hiddenfield',
													fieldLabel: 'Label',
													name: 'target_cont_location'
												},
												{
													xtype: 'container',
													flex: 1,
													autoRender: true,
													frame: false,
													height: 150,
													id: 'targetFolderTrees',
													margin: '0 0 12 0',
													layout: {
														align: 'stretch',
														type: 'hbox'
													},
													items: [
														{
															xtype: 'treepanel',
															flex: 1,
															id: 'targetA',
															autoScroll: true,
															title: 'フォルダ1',
															sortableColumns: false,
															store: 'TargetFolderAT',
															rootVisible: false,
															viewConfig: {
																loadMask: false,
																rootVisible: false
															},
															columns: [
																{
																	xtype: 'treecolumn',
																	height: 0,
																	dataIndex: 'text',
																	menuDisabled: true,
																	text: 'フォルダA',
																	flex: 1
																}
															],
															listeners: {
																beforeitemexpand: {
																	fn: me.onTargetABeforeItemExpand,
																	scope: me
																},
																beforeitemcollapse: {
																	fn: me.onTargetABeforeItemCollapse,
																	scope: me
																},
																beforeitemdblclick: {
																	fn: me.onTargetABeforeItemDblClick,
																	scope: me
																}
															}
														}/*,
														{
															xtype: 'treepanel',
															flex: 1,
															id: 'targetB',
                                                                                                                        hidden: true,
															autoScroll: true,
															title: 'フォルダ2',
															sortableColumns: false,
															//store: 'TargetFolderBT',
															rootVisible: false,
															viewConfig: {
																loadMask: false,
																rootVisible: false
															},
															columns: [
																{
																	xtype: 'treecolumn',
																	height: 0,
																	dataIndex: 'text',
																	text: 'フォルダB',
																	flex: 1
																}
															],
															listeners: {
																beforeitemexpand: {
																	fn: me.onTargetBBeforeItemExpand,
																	scope: me
																},
																beforeitemcollapse: {
																	fn: me.onTargetBBeforeItemCollapse,
																	scope: me
																},
																beforeitemdblclick: {
																	fn: me.onTargetBBeforeItemDblClick,
																	scope: me
																}
															}
														}*/
													]
												}
											]
										}
									],
									tabConfig: {
										xtype: 'tab',
										flex: 1
									}
								},
								{
									xtype: 'form',
									frame: true,
									hidden: true,
									id: 'releaseFolderOwnership',
									autoScroll: true,
									bodyPadding: 5,
									title: '所有権のリリース',
									items: [
										{
											xtype: 'fieldset',
											margin: '0 0 0 0',
											padding: '0 10 0 10',
											title: '対象フォルダ名',
											items: [
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'cont_location'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'hash_key'
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													name: 'text'
												}
											]
										},
										{
											xtype: 'fieldset',
											margin: '5 0 0 0',
											padding: '0 10 0 10',
											title: 'リリース対象',
											items: [
												{
													xtype: 'radiogroup',
													height: 69,
													id: 'target_folders_release',
													layout: {
														align: 'stretch',
														type: 'vbox'
													},
													items: [
														{
															xtype: 'radiofield',
															flex: 1,
															name: 'target',
															boxLabel: 'フォルダのみ',
															checked: true,
															inputValue: 'folder'
														},
														{
															xtype: 'radiofield',
															flex: 1,
															name: 'target',
															boxLabel: 'フォルダ内のファイル',
															inputValue: 'file'
														},
														{
															xtype: 'radiofield',
															name: 'target',
															boxLabel: 'フォルダとフォルダ内ファイル',
															inputValue: 'folder_file'
														}
													]
												}
											]
										},
										{
											xtype: 'fieldset',
											margin: '5 0 0 0',
											padding: '0 10 0 10',
											title: 'リリース範囲',
											items: [
												{
													xtype: 'radiogroup',
													height: 48,
													id: 'range_folders_release',
													layout: {
														align: 'stretch',
														type: 'vbox'
													},
													items: [
														{
															xtype: 'radiofield',
															flex: 1,
															name: 'range',
															boxLabel: 'このフォルダ',
															checked: true,
															inputValue: 'this_folder'
														},
														{
															xtype: 'radiofield',
															name: 'range',
															boxLabel: 'このフォルダとその下位のフォルダ(全階層)',
															inputValue: 'all_folders'
														}
													]
												}
											]
										},
										{
											xtype: 'button',
											handler: function() {
												var formX = this.up().getForm().getFieldValues();

												if (formX.text === '') {
													Ext.Msg.show({
														title:'所有権リリースフォルダの選択',
														msg: '所有権をリリースするフォルダを選択してください',
														icon: Ext.Msg.ERROR,
														buttons: Ext.Msg.OK
													});
													return;
												}

												formX = Ext.apply({session_id: this_session_id}, formX);
												formX = Ext.apply({request_type: 'release_folder_ownership'}, formX);

												Ext.Ajax.request({
													url: 'tdx/updatedata.tdx',
													method: 'POST',
													jsonData: formX,
													success: handleSuccess,
													failure: handleFailure
												});

												function handleSuccess(response) {
													obj = Ext.decode(response.responseText);
													var request_success = obj.success;

													if (request_success === false) {
														var request_errors = obj.errors;
														Ext.Msg.show({
															title:'所有権のリリース失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														if (formX.cont_location === 'folder_a') {
															Ext.getStore('FolderDataStoreA').load();
															Ext.getStore('TargetFolderAT').load();
															Ext.getStore('TargetFolderATFi').load();
														} else if (formX.cont_location === 'folder_b') {
															Ext.getStore('FolderDataStoreB').load();
															//Ext.getStore('TargetFolderBT').load();
															//Ext.getStore('TargetFolderBTFi').load();
														}
													}
													return;
												}

												function handleFailure(response) {
													Ext.Msg.show({
														title:'所有権のリリース失敗',
														msg: 'サーバとの通信に失敗しました',
														buttons: Ext.Msg.OK
													});
												}
											},
											id: 'btn_release_ownership',
											margin: '10 0 0 205',
											width: 100,
											text: 'リリース',
											tooltip: {
												html: '所有権をリリースするフォルダのリリース対象とリリース範囲を指定してから、このボタンを押して下さい。'
											}
										}
									]
								},
								{
									xtype: 'form',
									frame: true,
									hidden: true,
									id: 'obtainFolderOwnership',
									autoScroll: true,
									bodyPadding: 5,
									title: '所有権の取得',
									items: [
										{
											xtype: 'fieldset',
											padding: '0 10 0 10',
											title: '対象フォルダ名',
											items: [
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'cont_location'
												},
												{
													xtype: 'hiddenfield',
													anchor: '100%',
													fieldLabel: 'Label',
													name: 'hash_key'
												},
												{
													xtype: 'displayfield',
													anchor: '100%',
													name: 'text'
												}
											]
										},
										{
											xtype: 'fieldcontainer',
											items: [
												{
													xtype: 'label',
													text: 'の所有権を取得しようとしています。'
												}
											]
										},
										{
											xtype: 'fieldcontainer',
											height: 26,
											margin: '10 0 0 0',
											items: [
												{
													xtype: 'label',
													text: '所有権を取得すると、このフォルダの配下で所有権がリリースされているすべてのフォルダ・ファイルが自分の所有となります。'
												}
											]
										},
										{
											xtype: 'fieldcontainer',
											margin: '40 0 0 0',
											fieldLabel: '',
											items: [
												{
													xtype: 'label',
													text: '所有権を取得しますか?'
												}
											]
										},
										{
											xtype: 'button',
											handler: function() {
												var formX = this.up().getForm().getFieldValues();

												if (formX.text === '') {
													Ext.Msg.show({
														title:'所有権取得フォルダの選択',
														msg: '所有権を取得するフォルダを選択してください',
														icon: Ext.Msg.ERROR,
														buttons: Ext.Msg.OK
													});
													return;
												}

												formX = Ext.apply({session_id: this_session_id}, formX);
												formX = Ext.apply({request_type: 'get_folder_ownership'}, formX);

												Ext.Ajax.request({
													url: 'tdx/updatedata.tdx',
													method: 'POST',
													jsonData: formX,
													success: handleSuccess,
													failure: handleFailure
												});

												function handleSuccess(response) {
													obj = Ext.decode(response.responseText);
													var request_success = obj.success;

													if (request_success === false) {
														var request_errors = obj.errors;
														Ext.Msg.show({
															title:'所有権の取得失敗',
															msg: request_errors,
															buttons: Ext.Msg.OK
														});
													} else {
														if (formX.cont_location === 'folder_a') {
															Ext.getStore('FolderDataStoreA').load();
															Ext.getStore('TargetFolderAT').load();
															Ext.getStore('TargetFolderATFi').load();
														} else if (formX.cont_location === 'folder_b') {
															Ext.getStore('FolderDataStoreB').load();
															//Ext.getStore('TargetFolderBT').load();
															//Ext.getStore('TargetFolderBTFi').load();
														}
													}
													return;
												}

												function handleFailure(response) {
													Ext.Msg.show({
														title:'所有権の取得失敗',
														msg: 'サーバとの通信に失敗しました',
														buttons: Ext.Msg.OK
													});
												}
											},
											id: 'btn_get_ownership',
											margin: '10 0 0 205',
											width: 100,
											text: 'はい',
											tooltip: {
												html: 'フォルダの所有権を取得するときは、このボタンを押して下さい。'
											}
										}
									]
								}
							]
						},
						{
							xtype: 'form',
							frame: true,
							id: 'createSubFolder',
							itemId: 'createSubFolder',
							autoScroll: true,
							bodyPadding: 5,
							title: 'フォルダ作成',
							items: [
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									title: 'このフォルダの配下に新たにフォルダを作成',
									items: [
										{
											xtype: 'hiddenfield',
											anchor: '100%',
											fieldLabel: 'Label',
											name: 'original_place'
										},
										{
											xtype: 'hiddenfield',
											anchor: '100%',
											fieldLabel: 'Label',
											name: 'cont_location'
										},
										{
											xtype: 'hiddenfield',
											anchor: '100%',
											fieldLabel: 'Label',
											name: 'hash_key'
										},
										{
											xtype: 'displayfield',
											anchor: '100%',
											height: 20,
											name: 'text'
										}
									]
								},
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									title: '新しいフォルダの名前を入力',
									items: [
										{
											xtype: 'textfield',
											anchor: '100%',
											id: 'new_folder',
											name: 'new_folder',
											validateOnChange: false,
											validateOnBlur: false,
											allowBlank: false,
											enforceMaxLength: true,
											maxLength: 80
										}
									]
								},
								{
									xtype: 'button',
									handler: function() {
										if (Busy === true) { return; }
										Busy = true;
										var formX = this.up().getForm().getFieldValues();

										if (formX.text === '') {
											Busy = false;
											Ext.Msg.show({
												title:'サブフォルダ作成対象フォルダの選択',
												msg: 'サブフォルダを作成するフォルダを選択してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										if (formX.new_folder === '') {
											Busy = false;
											Ext.Msg.show({
												title:'サブフォルダ名の入力',
												msg: 'サブフォルダ名を入力してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										formX = Ext.apply({session_id: this_session_id}, formX);
										formX = Ext.apply({request_type: 'create_sub_folder'}, formX);


										Ext.Ajax.request({
											url: 'tdx/updatedata.tdx',
											method: 'POST',
											jsonData: formX,
											success: handleSuccess,
											failure: handleFailure
										});

										function handleSuccess(response) {
											obj = Ext.decode(response.responseText);
											var request_success = obj.success;

											if (request_success === false) {
												Busy = false;
												var request_errors = obj.errors;
												Ext.Msg.show({
													title:'サブフォルダの作成失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												requestRefresh();
											}
											return;
										}

										function handleFailure(response) {
											Busy = false;
											Ext.Msg.show({
												title:'サブフォルダの作成失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}

										function requestRefresh() {
											sending_cont_location	= formX.cont_location;
											sending_hash_key		= formX.hash_key;

											var requestRefreshData	= Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
											requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
											requestRefreshData	= Ext.apply({event_type: "property_create_subfolder"}, requestRefreshData);
											requestRefreshData	= Ext.apply({request_type: "update_folder_list"}, requestRefreshData);

											Ext.Ajax.request({
												url: 'tdx/updatedata.tdx',
												jsonData: requestRefreshData,
												success: handleSuccess2,
												failure: handleFailure2
											});

										}

										function handleSuccess2(response) {
											obj = Ext.decode(response.responseText);

											var request_success = obj.success;
											var request_status  = obj.status;

											if (request_success === false) {
												Busy = false;
												var request_errors  = obj.errors;
												Ext.Msg.show({
													title:'サブフォルダの作成失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												//新規にフォルダを作成した場合に、表示に関連するのは該当Locationだけではないので、以下3カ所をコメントアウトし、条件分岐をなくした。
												//厳密には、選択しているワークエリアやツリーの表示状態に依存するが、処理が大変なので、一括リロードとする。
												var thisDomain		= Ext.ComponentQuery.query('#activeData')[0].items.items[1].value;
												var anotherDomain	= Ext.ComponentQuery.query('#activeData')[0].items.items[3].value;
												if (thisDomain === anotherDomain) {
													//選択しているワークエリアが同一ならば、以下を実行する。
													if (formX.cont_location === 'folder_a') {
														//もし、作業対象のフォルダツリーがAならば、先にBを読み、その後にコールバックでAを読む。
														//この処理によって、プロパティペイン側は、Aを表示することになる。
														Ext.getStore('FolderDataStoreB').load({
															callback: function() {
																Ext.getStore('FolderDataStoreA').load();
															}
														});

														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();

														//Ext.getStore('TargetFolderBT').load();
														//Ext.getStore('TargetFolderBTFi').load();

														Ext.getStore('FileDataStoreA').load();
														Ext.getStore('FileDataStoreB').load();

													} else if (formX.cont_location === 'folder_b') {
														//もし、作業対象のフォルダツリーがBならば、先にAを読み、その後にコールバックでBを読む。
														//この処理によって、プロパティペイン側は、Bを表示することになる。
														Ext.getStore('FolderDataStoreA').load({
															callback: function() {
																Ext.getStore('FolderDataStoreB').load();
															}
														});

														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();

														//Ext.getStore('TargetFolderBT').load();
														//Ext.getStore('TargetFolderBTFi').load();

														Ext.getStore('FileDataStoreA').load();
														Ext.getStore('FileDataStoreB').load();
													}
												} else {
													//選択しているドメインが同一でないならば、以下を実行する。
													if (formX.cont_location === 'folder_a') {
														Ext.getStore('FolderDataStoreA').load();
														Ext.getStore('TargetFolderAT').load();
														Ext.getStore('TargetFolderATFi').load();
														Ext.getStore('FileDataStoreA').load();
													} else {
														Ext.getStore('FolderDataStoreB').load();
														//Ext.getStore('TargetFolderBT').load();
														//Ext.getStore('TargetFolderBTFi').load();
														Ext.getStore('FileDataStoreB').load();
													}
												}
												Busy = false;
											}
										}

										function handleFailure2(response) {
											Busy = false;
											Ext.Msg.show({
												title:'サブフォルダの作成失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}
									},
									id: 'btn_create_subfolder',
									margin: '0 0 0 205',
									width: 100,
									text: '作成',
									tooltip: {
										html: '新しいフォルダの名前を入力してから、このボタンを押して下さい。'
									}
								}
							]
						},
						{
							xtype: 'form',
							frame: true,
							id: 'createFile',
							itemId: 'createFile',
							autoScroll: true,
							bodyPadding: 5,
							title: 'ファイル追加',
							items: [
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									layout: {
										type: 'auto'
									},
									title: 'このフォルダの配下にファイルを追加',
									items: [
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'request_type',
											value: 'upload_file'
										},
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'session_id'
										},
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'original_place'
										},
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'cont_location'
										},
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'hash_key'
										},
										{
											xtype: 'checkboxfield',
											hidden: true,
											name: 'folder_readable_status',
											value: false,
											inputValue: 'true',
											uncheckedValue: 'false'
										},
										{
											xtype: 'checkboxfield',
											hidden: true,
											name: 'folder_writable_status',
											value: false,
											inputValue: 'true',
											uncheckedValue: 'false'
										},
										{
											xtype: 'displayfield',
											height: 20,
											width: 303,
											name: 'text'
										}
									]
								},
								{
									xtype: 'fieldset',
									padding: '0 10 0 10',
									title: 'ファイルを選択',
									items: [
										{
											xtype: 'filefield',
											anchor: '100%',
											id: 'uploadFile',
											itemId: 'uploadFile',
											name: 'upload_file',
											validateOnChange: false,
											validateOnBlur: false,
											allowBlank: false,
											buttonText: 'ファイル選択',
											listeners: {
												change: {
													fn: me.onUploadFileChange,
													scope: me
												}
											}
										},
										{
											xtype: 'hiddenfield',
											fieldLabel: 'Label',
											name: 'another_name'
										}
									]
								},
								{
									xtype: 'button',
									handler: function(button, event) {
										if (Busy === true) { return; }
										Busy = true;

										var formX = this.up().getForm().getFieldValues();

										if (formX.text === '') {
											Busy = false;
											Ext.Msg.show({
												title:'フォルダ選択',
												msg: 'フォルダの選択を確認してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										}

										var formY = this.up('form').getForm();

										var up_filename = formY._fields.items[8].value;

										if (Ext.isEmpty(up_filename)) {
											Busy = false;
											Ext.Msg.show({
												title:'追加ファイル選択',
												msg: '追加ファイルを選択してください',
												icon: Ext.Msg.ERROR,
												buttons: Ext.Msg.OK
											});
											return;
										} else {
											up_filename = up_filename.replace('C:\\fakepath\\', '');
											if (up_filename.length > 80) {
												Busy = false;
												Ext.Msg.show({
													title:'ファイル名長オーバー',
													msg: 'ファイル名は80文字までです。短くしてください',
													icon: Ext.Msg.ERROR,
													buttons: Ext.Msg.OK
												});
												return;
											}

											var dataY = Ext.apply({session_id: this_session_id}, formX);
											dataY = Ext.apply({upload_filename: up_filename}, dataY);
											dataY = Ext.apply({request_type: "upload_file"}, dataY);

											Ext.Ajax.request({
												url: 'tdx/updatedata.tdx',
												jsonData: dataY,
												success: handleSuccess,
												failure: handleFailure
											});
										}

										function handleSuccess(response) {
											obj = Ext.decode(response.responseText);

											var request_success      = obj.success;
											var request_hashkey      = obj.hashkey;
											var request_redirect_uri = obj.redirect_uri;
											var new_filename         = this_session_id + request_hashkey;

											if (request_success === false) {
												Busy = false;
												var request_errors = obj.errors;
												Ext.Msg.show({
													title:'ファイル送信失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												Ext.getCmp('createFile').getForm().setValues({
													another_name: new_filename
												});
												sendFile(formY, up_filename, request_redirect_uri);
											}
											return;
										}

										function handleFailure(response) {
											Busy = false;
											Ext.Msg.show({
												title:'ファイル追加失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
											return;
										}

										function sendFile(formY, up_filename, request_redirect_uri) {
											formY.submit({
												url: request_redirect_uri,
												waitTitle: 'ファイル追加',
												waitMsg: 'ファイルを追加中です...',
                                                                                                timeout: 7200000,
												success: function(form, action){
												/*	if(action.result.success === true){*/
														if (formX.folder_readable_status === false && formX.folder_writable_status === true) {
															Ext.Msg.show({
																title:'ファイルの追加完了',
																msg: up_filename +'<br/> をサーバに追加しました',
																buttons: Ext.Msg.OK
															});
														}
														requestRefresh();

														//以下は、レフレッシュタイミング調整のため、ここでは実行しないこととした。
														/*
														if (formX.cont_location === 'folder_a') {
														Ext.getStore('FileDataStoreA').load();
														} else if (formX.cont_location === 'folder_b') {
														Ext.getStore('FileDataStoreB').load();
														}
														*/
														formY._fields.items[8].value = '';
													}
												/*}*/,

												failure: function(response){
													Busy = false;
													if (action.failureType === CONNECT_FAILURE) {
														Ext.Msg.alert('Error', 'Status:'+action.response.status+': '+ action.response.statusText);
													} else if (action.failureType === SERVER_INVALID){
														Ext.Msg.alert('Invalid', action.result.errormsg);
													} else {
														Ext.Msg.show({
															title:'ファイルの追加失敗',
															msg: up_filename +'<br/> のアップロードに失敗しました',
															buttons: Ext.Msg.OK
														});
													}
												}
											});
										}

										function requestRefresh() {
											sending_session_id		= formX.session_id;
											sending_cont_location	= formX.cont_location;
											sending_hash_key		= formX.hash_key;
											var requestRefreshData	= Ext.apply({session_id: sending_session_id}, {cont_location: sending_cont_location});
											requestRefreshData	= Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
											requestRefreshData	= Ext.apply({event_type: "property_upload_file"}, requestRefreshData);
											requestRefreshData	= Ext.apply({request_type: "update_file_list"}, requestRefreshData);

											Ext.Ajax.request({
												url: 'tdx/updatedata.tdx',
												jsonData: requestRefreshData,
												success: handleSuccess2,
												failure: handleFailure2
											});

										}

										function handleSuccess2(response) {
											obj = Ext.decode(response.responseText);
											var request_success = obj.success;
											var request_status  = obj.status;

											if (request_success === false) {
												Busy = false;
												var request_errors  = obj.errors;
												Ext.Msg.show({
													title:'ファイル送信失敗',
													msg: request_errors,
													buttons: Ext.Msg.OK
												});
											} else {
												if (formX.cont_location === 'folder_a') {
													Ext.getStore('FileDataStoreA').load();
													Ext.getStore('FileDataStoreB').load();
												} else if (formX.cont_location === 'folder_b') {
													Ext.getStore('FileDataStoreA').load();
													Ext.getStore('FileDataStoreB').load();
												}
												Busy = false;
											}
										}

										function handleFailure2(response) {
											Busy = false;
											Ext.Msg.show({
												title:'ファイル追加失敗',
												msg: 'サーバとの通信に失敗しました',
												buttons: Ext.Msg.OK
											});
										}

									},
									id: 'btn_upload_file',
									margin: '0 0 0 205',
									width: 100,
									text: '追加',
									tooltip: {
										html: 'ファイルを追加するフォルダを確認してから、「ファイル選択」ボタンを押して、追加するファイルを選択して下さい。<br/>確認が済んだら、このボタンを押して下さい。'
									}
								}
							]
						},
						{
							xtype: 'panel',
							disabled: true,
							hidden: true,
							autoScroll: true,
							layout: {
								type: 'fit'
							},
							bodyPadding: 5,
							title: 'インポート・エクスポート',
							tabConfig: {
								xtype: 'tab',
								frame: false
							}
						}
					],
                                        listeners: {
                                                afterrender: {
                                                        fn: me.onMainViewAfterRender,
                                                        scope: me
                                                }
                                        }                                        
				}
			]
		});

		me.callParent(arguments);
	},

	onTargetABeforeItemExpand: function(nodeinterface, eOpts) {
		var sendData = nodeinterface.raw;
		sendData = Ext.apply({session_id: this_session_id}, sendData);
		sendData = Ext.apply({request_type: 'expand_target_folder'}, sendData);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			method: 'POST',
			jsonData: sendData,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;
			var request_status  = obj.status;
			var request_dirty   = obj.isDirty;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'サブフォルダの表示失敗',
					msg: 'Status: '.request_status,
					buttons: Ext.Msg.OK
				});
			} else {
				if (request_dirty === true) {
					Ext.getStore('TargetFolderAT').load();
				} else if (request_status === 2050) {
					Ext.getStore('TargetFolderAT').load({
						node: nodeinterface,
						url: 'spin/foldersAT.sfl'
					});
				}
			}
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'サブフォルダのクローズ失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onTargetABeforeItemCollapse: function(nodeinterface, eOpts) {
		var sendData = nodeinterface.raw;

		sendData = Ext.apply({session_id: this_session_id}, sendData);
		sendData = Ext.apply({request_type: 'collapse_target_folder'}, sendData);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			method: 'POST',
			jsonData: sendData,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'サブフォルダのクローズ失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {

			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'サブフォルダのクローズ失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onTargetABeforeItemDblClick: function(dataview, record, item, index, e, eOpts) {
		return false;
	},

	onTargetBBeforeItemExpand: function(nodeinterface, eOpts) {
		var sendData = nodeinterface.raw;
		sendData = Ext.apply({session_id: this_session_id}, sendData);
		sendData = Ext.apply({request_type: 'expand_target_folder'}, sendData);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			method: 'POST',
			jsonData: sendData,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;
			var request_status  = obj.status;
			var request_dirty   = obj.isDirty;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'サブフォルダの表示失敗',
					msg: 'Status: '.request_status,
					buttons: Ext.Msg.OK
				});
			} else {
				if (request_dirty === true) {
					//Ext.getStore('TargetFolderBT').load();
				} else if (request_status === 2050) {
					//Ext.getStore('TargetFolderBT').load({
					//	node: nodeinterface,
					//	url: 'spin/foldersBT.sfl'
					//});
				}
			}
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'サブフォルダ表示失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}

	},

	onTargetBBeforeItemCollapse: function(nodeinterface, eOpts) {
		var sendData = nodeinterface.raw;

		sendData = Ext.apply({session_id: this_session_id}, sendData);
		sendData = Ext.apply({request_type: 'collapse_target_folder'}, sendData);

		Ext.Ajax.request({
			url: 'tdx/updatedata.tdx',
			method: 'POST',
			jsonData: sendData,
			success: handleSuccess,
			failure: handleFailure
		});

		function handleSuccess(response) {
			obj = Ext.decode(response.responseText);
			var request_success = obj.success;

			if (request_success === false) {
				var request_errors = obj.errors;
				Ext.Msg.show({
					title:'サブフォルダのクローズ失敗',
					msg: request_errors,
					buttons: Ext.Msg.OK
				});
			} else {
			}
			return;
		}

		function handleFailure(response) {
			Ext.Msg.show({
				title:'サブフォルダのクローズ失敗',
				msg: 'サーバとの通信に失敗しました',
				buttons: Ext.Msg.OK
			});
		}
	},

	onTargetBBeforeItemDblClick: function(dataview, record, item, index, e, eOpts) {
		return false;
	},

	onUploadFileChange: function(filefield, value, eOpts) {            
		value = value.replace('C:\\fakepath\\', '');

	}

});
