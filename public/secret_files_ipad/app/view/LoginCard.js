/*
 * File: app/view/LoginCard.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BoomBoxMobile.view.LoginCard', {
	extend: 'Ext.Container',
	alias: 'widget.logincard',

	config: {
		itemId: 'loginCard',
		layout: {
			pack: 'center',
			type: 'hbox'
		},
		items: [
			{
				xtype: 'container',
				height: 315,
				itemId: 'loginPane',
				width: 500,
				layout: {
					type: 'fit'
				},
				items: [
					{
						xtype: 'titlebar',
						docked: 'top',
						title: 'BOOMBOX  - ログイン -'
					},
					{
						xtype: 'formpanel',
						itemId: 'loginForm',
						items: [
							{
								xtype: 'image',
								height: 36,
								margin: 10,
								src: './images/title_UT_s2.png'
							},
							{
								xtype: 'label',
								hidden: true,
								html: 'UIDとPWを入力して下さい。',
								margin: 20
							},
							{
								xtype: 'textfield',
								margin: 20,
								label: 'ユーザ名',
								name: 'uid'
							},
							{
								xtype: 'passwordfield',
								margin: 20,
								label: 'パスワード',
								name: 'upw'
							},
							{
								xtype: 'button',
								centered: false,
								height: 50,
								itemId: 'loginBtn',
								margin: 20,
								text: 'ログイン'
							}
						]
					}
				]
			},
			{
				xtype: 'toolbar',
				docked: 'bottom',
				items: [
					{
						xtype: 'label',
						docked: 'right',
						html: '(c) 2018 MAKEWAVE JAPAN Co.,Ltd.All rights reserved.',
						margin: 10
					}
				]
			}
		],
		listeners: [
			{
				fn: 'onMybuttonTap',
				event: 'tap',
				delegate: '#loginBtn'
			}
		]
	},

	onMybuttonTap: function(button, e, eOpts) {
		//buttonのup()(上位のコンポーネントから)、getValues()(すべてのvalueを取ってきて)、values(配列)に代入する。
		var myParent = button.up();
		var values   = myParent.getValues();

		//入力チェック
		if (!values.uid) {
			Ext.Msg.show({
				title:'IDを入力して下さい。',
				msg:'*印のついたすべてのデータを入力して下さい',
				buttons: Ext.Msg.OK
			});
			return;
		}

		if (!values.upw) {
			Ext.Msg.show({
				title:'PWを入力して下さい。',
				msg:'*印のついたすべてのデータを入力して下さい',
				buttons: Ext.Msg.OK
			});
			return;
		}

		//送信データのセット
		var sendingData = Ext.apply({request_type: "login"}, values);

		//送信処理
		Ext.Ajax.request({
			//change here
			//url: 'php/login.php',
			url: 'tdx/login.tdx',
			jsonData: sendingData,
			success: handleSuccess,
			failure: handleFailure
		});

		// Ajax通信成功時の処理
		function handleSuccess(response) {
			var obj = Ext.decode(response.responseText);
			var request_success = obj.success;
			var request_message = obj.message;
			SessionId = obj.session;

			if (request_success === true) {
				myParent.reset();
				targetCard = Ext.ComponentQuery.query('#viewport')[0];
				targetCard.setActiveItem(1).show();
				Ext.getStore('DomainStore').load();
			} else {
				Ext.Msg.alert(
				'認証できませんでした',
				request_message,
				Ext.emptyFn
				);
				myParent.reset();
				return;
			}
		}

		// Ajax通信失敗時の処理
		function handleFailure(response) {
			Ext.Msg.show({
				title:'Network ERROR',
				msg: 'Error Message',
				buttons: Ext.Msg.OK
			});
			return;
		}

	}

});