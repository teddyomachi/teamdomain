/*
 * File: app/store/SearchOptionStore.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.store.SearchOptionStore', {
	extend: 'Ext.data.Store',

	requires: [
		'TeamDomain.model.SearchOptionData'
	],

	constructor: function(cfg) {
		var me = this;
		cfg = cfg || {};
		me.callParent([Ext.apply({
                        // autoLoad: true,
			model: 'TeamDomain.model.SearchOptionData',
			storeId: 'SearchOptionStore',
                        listeners: {
				load: {
					fn: me.onJsonstoreLoad,
					scope: me
				},
				beforeload: {
					fn: me.onJsonstoreBeforeLoad,
					scope: me
				}
			},
			proxy: {
				type: 'ajax',
                                extraParams: {
					extraParams: 'extraParams'
				},
				url: 'spin/search_option.sfl',
                                headers: {
					hash_key: 'test'
				},
				reader: {
					type: 'json',
					root: 'option'
				},
                                listeners: {
					exception: {
						fn: me.onAjaxException,
						scope: me
					}
				}
			}
		}, cfg)]);
	},
        onJsonstoreLoad: function(store, records, successful, operation, eOpts) {
            //var storeid = store.storeid;
            //console.log("SearchOption.sfl: onJsonstoreLoad: store: " , store);
            //console.log("SearchOption.sfl: onJsonstoreLoad: record: " , records);
            //console.log("SearchOption.sfl: onJsonstoreLoad: successful: " , successful);
            //console.log("SearchOption.sfl: onJsonstoreLoad: operation: " , operation);
            //console.log("SearchOption.sfl: onJsonstoreLoad: eOpts: " + eOpts);
	},

	onJsonstoreBeforeLoad: function(store, operation, eOpts) {
            var hash_key = "";
            if (operation.storeoption) {
                hash_key = operation.storeoption;
            } else {
                hash_key = "object not exist";
            }
            // console.log("SearchOption.sfl: onJsonstoreBeforeLoad: hash_key: %s", hash_key);
            return hash_key;
            //var file_name2 = records.data.file_name;
            //console.log("SearchOption.sfl: onJsonstoreBeforeLoad: hash_key: %s", hash_key);
            // console.log("SearchOption.sfl: onJsonstoreBeforeLoad: %s", file_name2);
            // console.log("SearchOption.sfl: onJsonstoreBeforeLoadLoad: store: ", store);
            // console.log("SearchOption.sfl: onJsonstoreBeforeLoadLoad: operation: ", operation);
            // console.log("SearchOption.sfl: onJsonstoreBeforeLoadLoad: eOpts: ", eOpts);
            

	},
        onAjaxException: function(proxy, response, operation, eOpts) {
            var exception_response = response;
            console.log("SearchOption.sfl: onAjaxException: ", exception_response);
	},

	selectFile: function(hash_key) {
            var hash_key_value = "";
            if (hash_key) {
                hash_key_value = hash_key;
            } else {
                hash_key_value = "value not exist";
            }
            //console.log("SearchOption.sfl: selectFile: %s", hash_key_value);
            return hash_key_value;
	}

        
});