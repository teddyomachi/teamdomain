/*
 * File: app/view/DomainGridPanelB.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.DomainGridPanelB', {
	extend: 'Ext.grid.Panel',
	alias: 'widget.domaingridpanelb',

	stateful: false,
	height: 50,
	id: 'domainGridPanelB',
	itemId: 'domainGridPanelB',
	hideHeaders: true,
	scroll: 'none',
	store: 'DomainDataStoreB',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			columns: [
				{
					xtype: 'gridcolumn',
					dataIndex: 'domain_name',
					text: 'Domain_name',
					flex: 1
				},
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: 'domain_link',
					text: 'Domain_link'
				}
			],
			listeners: {
				afterrender: {
					fn: me.onDomainGridPanelBAfterRender,
					delay: 100,
					scope: me
				},
				itemcontextmenu: {
					fn: me.onDomainGridPanelBItemContextMenu,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onDomainGridPanelBAfterRender: function(component, eOpts) {

		Ext.getStore('DomainDataStoreB').load({
			callback: function(records, operation, success) {
				var this_domains = Ext.getStore('DomainDataStoreB').data;
				var data_length = this_domains.length;

				var thisActiveDomainB = '';
				for (i = 0; i < data_length; i++) {
					if (this_domains.items[i].data.selected === true) {
						thisActiveDomainB = this_domains.items[i];
					}
				}

				if (thisActiveDomainB === '') {
					thisActiveDomainB = this_domains.items[0];
				}

				component.selModel.doSelect(thisActiveDomainB);
			}
		});

	},

	onDomainGridPanelBItemContextMenu: function(dataview, record, item, index, e, eOpts) {
		/*
		tree_context_menu = new Ext.menu.Menu({
		items: [
		changeDomainName,
		createRootFolder,
		new Ext.menu.Separator(),
		openTrashbox
		]
		});

		tree_context_menu.showAt(e.getXY());
		return false;
		*/
	}

});