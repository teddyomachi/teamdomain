/*
 * File: app/view/FileWholeDsp.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.FileWholeDsp', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.filewholedsp',
    id: 'fileWholeDsp',
    layout: {
        type: 'border'
    },
    initComponent: function () {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'tabpanel',
                    flex: 1,
                    region: 'center',
                    id: 'filesA',
                    title: 'ワークエリア',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            id: 'listDspA',
                            layout: {
                                //type: 'fit'
                                type: 'anchor',
                            },
                            title: 'List表示',
                            listeners: {
                                activate: {
                                    fn: me.onListActive,
                                    scope: me
                                }
                            },
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            id: 'btn_workarea_disp',
                                            icon: 'data/small_icon/folder.png',
                                            tooltip: 'フォルダを表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onWorkAreaDispBtnClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_max_disp',
                                            margin: '0 0 0 5',
                                            icon: 'data/small_icon/ZoomDai.png',
                                            tooltip: '大きく表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onListMaxDispBtnClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_mdl_disp',
                                            icon: 'data/small_icon/ZoomTyu.png',
                                            tooltip: 'デフォルト表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onListMdlDispBtnClick,
                                                    scope: me
                                                }
                                            }

                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_min_disp',
                                            icon: 'data/small_icon/ZoomSyo.png',
                                            tooltip: '小さく表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onListMinDispBtnClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_workarea_menu',
                                            margin: '0 0 0 5',
                                            icon: 'data/small_icon/system_config.png',
                                            tooltip: 'ワークエリアメニュー',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onWorkAreaMenuDisp,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }

                            ],
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    id: 'listGridPanelA',
                                    autoScroll: true,
                                    anchor: '100% 100%',
                                    //hidden: true,
                                    store: 'FileDataStoreA',
                                    viewConfig: {
                                        emptyText: 'データがありません',
                                        plugins: [
                                            Ext.create('Ext.grid.plugin.DragDrop', {
                                                ddGroup: 'WholeListDsp',
                                                dragGroup: 'listGridPanelA'
//												dropGroup: 'listGridPanelB'
                                            })
                                        ],
                                        listeners: {
                                            beforedrop: {
                                                fn: me.onGriddragdroppluginBeforeDropA,
                                                scope: me
                                            }
                                        }
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                                                return '<img src="' + record.data.thumbnail_image + '" style="max-width:25px;max-height: 25px"/>';
                                                /*
                                                 if (record.data.file_type === 'folder') {
                                                 return '<img src="data/small_icon/folder.png" />';
                                                 } else {
                                                 return '<img src="data/small_icon/file.png" />';
                                                 }
                                                 */

                                            },
                                            padding: 0,
                                            width: 35,
                                            dataIndex: 'type',
                                            text: 'TP'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {

                                                if (record.data.lock === 1) {
                                                    return '<img src="data/small_icon/my_locked.png" />';
                                                } else if (record.data.lock == 2) {
                                                    return '<img src="data/small_icon/locked.png" />';
                                                    /*
                                                     } else if (record.data.lock == 4) {
                                                     return '<img src="data/small_icon/sco.png" />';
                                                     } else if (record.data.lock == 8) {
                                                     return '<img src="data/small_icon/eco.png" />';
                                                     */
                                                } else {
                                                    return;
                                                }


                                            },
                                            /* hidden: true,*/
                                            padding: 0,
                                            width: 50,
                                            dataIndex: 'lc',
                                            /* hideable: false,*/
                                            text: 'ロック'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                                                return '<img src="' + record.data.thumbnail_image + '" style="max-width:25px;max-height: 25px"/>';
                                            },
                                            hidden: true,
                                            padding: 0,
                                            width: 30,
                                            dataIndex: 'icon',
                                            hideable: false,
                                            text: 'icon'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            width: 61,
                                            dataIndex: 'name_lc_by',
                                            hideable: false,
                                            text: '操作者名'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                                                var dispType;
                                                if (record.data.file_type === 'folder') {
                                                    dispType = 'フォルダ';
                                                } else {
                                                    dispType = 'ファイル';
                                                }

                                                var cretae_disp;
                                                if (record.data.created_date === 0 || record.data.created_date === "") {
                                                    cretae_disp = ' - ';
                                                } else {
                                                    cretae_disp = Ext.util.Format.date(record.data.created_date, 'Y-m-d H:i:s O');
                                                }

                                                var update_disp;
                                                if (record.data.updated_at === 0 || record.data.updated_at === "") {
                                                    update_disp = ' - ';
                                                } else {
                                                    update_disp = Ext.util.Format.date(record.data.updated_at, 'Y-m-d H:i:s O');
                                                }


                                                var val;
                                                val = dispType + '名:' + value + '&lt;br /&gt;'
                                                        + 'サイズ：' + record.data.file_size + '&lt;br /&gt;'
                                                        + 'バージョン：' + record.data.file_version + '&lt;br /&gt;'
                                                        + '所有者：' + record.data.owner + '&lt;br /&gt;'
                                                        + '所有権：' + record.data.ownership + '&lt;br /&gt;'
                                                        + '読み取り権限：' + record.data.file_readable_status + '&lt;br /&gt;'
                                                        + '書き込み権限：' + record.data.file_writable_status + '&lt;br /&gt;'
                                                        + '作成日時：' + cretae_disp + '&lt;br /&gt;'
                                                        + '作成者：' + record.data.creator + '&lt;br /&gt;'
                                                        + '更新日時：' + update_disp + '&lt;br /&gt;'
                                                        + '更新者：' + record.data.modifier + '&lt;br /&gt;';

                                                metaData.tdAttr = 'data-qtip="' + val + '"';
                                                return value;
                                            },
                                            minWidth: 150,
                                            width: 150,
                                            dataIndex: 'file_name',
                                            text: '名前',
                                            flex: 1
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 50,
                                            dataIndex: 'file_type',
//											dataIndex: 't_file_type',
                                            text: '種類'
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            width: 30,
                                            align: 'right',
                                            dataIndex: 'file_version',
                                            text: 'Ver',
                                            format: '0'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 100,
                                            align: 'right',
                                            renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                                                var file_size = record.data.file_size;
                                                var file_type = record.data.file_type;
                                                var fileSizeUpper = record.data.file_size_upper;
                                                var size = fileSizeUpper * Math.pow(2, 31) + file_size;
                                                if (file_type === "folder") {
                                                    return "-";
                                                } else if (size < 1024) {
                                                    return "1 KB";
                                                } else if (size < 1048576) {
                                                    return (Math.round(size / 1024)) + " KB";
                                                } else {
                                                    return (Math.round(size / 1024 / 1024)) + " MB";
                                                }
                                            },
                                            dataIndex: 'file_size',
                                            text: 'サイズ'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            width: 100,
                                            dataIndex: 'keyword',
                                            hideable: false,
                                            text: 'キーワード'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 180,
                                            dataIndex: 'description',
                                            text: '説明'
                                        },
                                        {
                                            xtype: 'datecolumn',
                                            width: 140,
                                            //dataIndex: 'created_date',
                                            dataIndex: 'created_at',
                                            text: '作成日',
                                            format: 'Y-m-d H:i:s'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 80,
                                            dataIndex: 'creator',
                                            text: '作成者'
                                        },
                                        {
                                            xtype: 'datecolumn',
                                            width: 140,
                                            //dataIndex: 'modified_date',
                                            dataIndex: 'updated_at',
                                            text: '更新日',
                                            format: 'Y-m-d H:i:s'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 80,
                                            dataIndex: 'modifier',
                                            text: '更新者'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            width: 250,
                                            dataIndex: 'url',
                                            hideable: false,
                                            text: 'URL'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            width: 80,
                                            dataIndex: 'owner',
                                            text: '所有者'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            width: 25,
                                            dataIndex: 'ownership',
                                            text: '所有権'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            width: 25,
                                            dataIndex: 'check',
                                            hideable: false,
                                            text: 'チェックイン'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            hidden: true,
                                            dataIndex: 'thumnail_image',
                                            hideable: false,
                                            text: 'image'
                                        },
                                        {
                                            xtype: 'booleancolumn',
                                            hidden: true,
                                            dataIndex: 'file_writable_status',
                                            hideable: false,
                                            text: 'file_writable_status'
                                        }
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'pagingtoolbar',
                                            dock: 'bottom',
                                            autoRender: true,
                                            id: 'filesA_list',
                                            displayInfo: true,
                                            store: 'FileDataStoreA'
                                        }
                                    ],
                                    selModel: Ext.create('Ext.selection.RowModel', {
                                        mode: 'MULTI',
                                        allowDeselect: true
                                    }),
                                    listeners: {
                                        itemcontextmenu: {
                                            fn: me.onListGridPanelAItemContextMenu,
                                            scope: me
                                        },
                                        itemclick: function(me, record, item, index, e, options)
                                        {
                                            SetActiveData(me, record, e, index);
                                        }
                                    }
                                },
                                {
                            xtype: 'gridpanel',
                            id: 'listGridPanelB',
                            autoScroll: true,
                            anchor: '100% 100%',
                            //hidden: true,
                            //store: 'FileDataStoreA',
                            flex: 1,
                            store: Ext.create('TeamDomain.store.FileDataStoreA'),
                            viewConfig:
                            {
                                emptyText: 'データがありません'
                            },
                            columns: [
                            {
                                xtype: 'gridcolumn',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view)
                                {
                                    var thumbnail = '';
                                    if ('1' === record.data.node_type)
                                    {
                                        // フォルダ
                                        thumbnail = './file_type_icon/FolderDocument.png';
                                    }
                                    else if ('2' === record.data.node_type)
                                    {
                                        // ファイル
                                        thumbnail = './file_type_icon/text.png';
                                    }
                                    else if ('5' === record.data.node_type)
                                    {
                                        // フォルダのシンボリックリンク
                                        thumbnail = './file_type_icon/text.png';
                                    }
                                    else if ('6' === record.data.node_type)
                                    {
                                        // ファイルのシンボリックリンク
                                        thumbnail = './file_type_icon/text.png';
                                    }
                                    return '<img src="' + thumbnail + '" style="max-width:25px;max-height: 25px"/>';
                                },
                                padding: 0,
                                width: 35,
                                dataIndex: 'type',
                                text: 'TP'
                            },
                            {
                                xtype: 'gridcolumn',
                                minWidth: 150,
                                width: 150,
                                dataIndex: 'text',
                                text: '名前',
                                flex: 1
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 100,
                                align: 'right',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view)
                                {
                                    var file_size = record.data.size;
                                    var file_type = record.data.node_type;

                                    if (file_type === "1")
                                    {
                                        return "-";
                                    }
                                    else if (file_size < 1024)
                                    {
                                        return "1 KB";
                                    }
                                    else if (file_size < 1048576)
                                    {
                                        return (Math.round(file_size / 1024)) + " KB";
                                    }
                                    else
                                    {
                                        return (Math.round(file_size / 1024 / 1024)) + " MB";
                                    }
                                },
                                dataIndex: 'size',
                                text: 'サイズ'
                            },
                            {
                                xtype: 'gridcolumn',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view)
                                {
                                    if (typeof value === "string")
                                    {
                                        value = parseInt(value);
                                    }
                                    var dtDate = new Date(value * 1000);
                                    return Ext.util.Format.date(dtDate, 'Y-M-d H:i:s');
                                },
                                width: 140,
                                dataIndex: 'created_unix_time',
                                text: '作成日'
                            },
                            {
                                xtype: 'gridcolumn',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view)
                                {
                                    if (typeof value === "string")
                                    {
                                        value = parseInt(value);
                                    }
                                    var dtDate = new Date(value * 1000);
                                    return Ext.util.Format.date(dtDate, 'Y-M-d H:i:s');
                                },
                                width: 140,
                                dataIndex: 'modified_unix_time',
                                text: '更新日'
                            }],
                            dockedItems: [
                            {
                                xtype: 'pagingtoolbar',
                                dock: 'bottom',
                                autoRender: true,
                                id: 'filesB_list',
                                displayInfo: true,
                                store: 'FileDataStoreA'
                            }],
                            selModel: Ext.create('Ext.selection.RowModel',
                            {
                                mode: 'MULTI',
                                allowDeselect: true
                            }),
                            listeners:
                            {
                                itemcontextmenu:
                                {
                                    fn: me.onListGridPanelAItemContextMenu,
                                    scope: me
                                },
                                itemclick: function(me, record, item, index, e, options)
                                {
                                    SetActiveData(me, record, e, index);
                                }
                            }
                        }
                            ]
                        },
                        {
                            xtype: 'panel',
                            autoScroll: true,
                            layout: {
                                type: 'fit'
                            },
                            id: 'thumbnailDspA',
                            title: 'Thumbnail表示',
                            listeners: {
                                activate: {
                                    fn: me.onThumbnailActive,
                                    scope: me
                                }
                            },
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            id: 'btn_workarea_disp_b',
                                            icon: 'data/small_icon/folder.png',
                                            tooltip: 'フォルダを表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onWorkAreaDispBtnClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_max_disp_b',
                                            margin: '0 0 0 5',
                                            icon: 'data/small_icon/ZoomDai.png',
                                            tooltip: '大きく表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onBoxMaxDispBtnClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_mdl_disp_b',
                                            icon: 'data/small_icon/ZoomTyu.png',
                                            tooltip: 'デフォルト表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onBoxMdlDispBtnClick,
                                                    scope: me
                                                }
                                            }

                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_min_disp_b',
                                            icon: 'data/small_icon/ZoomSyo.png',
                                            tooltip: '小さく表示します。',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onBoxMinDispBtnClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'btn_workarea_menu_b',
                                            margin: '0 0 0 5',
                                            icon: 'data/small_icon/system_config.png',
                                            tooltip: 'ワークエリアメニュー',
                                            tooltipType: 'title',
                                            listeners: {
                                                click: {
                                                    fn: me.onWorkAreaMenuDisp,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            items: [
                                {
                                    xtype: 'panel',
                                    id: 'thumbnailGridPanelA',
                                    autoScroll: true,
                                    layout: {
                                        type: 'fit'
                                    },
                                    items: [
                                        {
                                            xtype: 'dataview',
                                            prepareData: function (data) {
                                                var box_class = 'thumb-wrapAB';
                                                var icon_width = '200';
                                                var icon_height = '140';
                                                if (boxDispSizeA === 'max') {
                                                    box_class = 'thumb-wrapAB-max';
                                                    icon_width = '300';
                                                    icon_height = '240';
                                                } else if (boxDispSizeA === 'min') {
                                                    box_class = 'thumb-wrapAB-min';
                                                    icon_width = '80';
                                                    icon_height = '50';
                                                }

                                                var lock_check = "";
                                                if (data.lock === 0) {
                                                    lock_check = "small_icon/no_locked.png";
                                                }
                                                if (data.lock === 1) {
                                                    lock_check = "small_icon/my_locked.png";
                                                }
                                                if (data.lock === 2) {
                                                    lock_check = "small_icon/locked.png";
                                                }
                                                if (data.lock === 4) {
                                                    lock_check = "small_icon/sco.png";
                                                }
                                                if (data.lock === 8) {
                                                    lock_check = "small_icon/eco.png";
                                                }

                                                var fileSizeUpper = data.file_size_upper;
                                                var fileSize = data.file_size;
                                                var size = fileSizeUpper * Math.pow(2, 31) + fileSize;
                                                var rounded_size;

                                                if (size === "" || size === 0) {
                                                    rounded_size = "-";
                                                } else if (size < 1024) {
                                                    rounded_size = size + " B";
                                                } else if (size < 1048576) {
                                                    rounded_size = (Math.round(size / 1024)) + " KB";
                                                } else if (size < 1073741824) {
                                                    rounded_size = (Math.round(((size * 10) / 1048576)) / 10) + " MB";
                                                } else if (size < 1099511627776) {
                                                    rounded_size = (Math.round(((size * 100) / 1073741824)) / 100) + " GB";
                                                } else if (size < 1125899906842624) {
                                                    rounded_size = (Math.round(((size * 100) / 1099511627776)) / 100) + " TB";
                                                } else {
                                                    rounded_size = (Math.round(((size * 100) / 1125899906842624)) / 100) + " PB";
                                                }

                                                Ext.apply(data, {
                                                    shortName: Ext.util.Format.ellipsis(data.file_name, 20),
                                                    lock_check_img: lock_check,
                                                    file_disp_size: rounded_size,
                                                    box_class: box_class,
                                                    icon_width: icon_width,
                                                    icon_height: icon_height
                                                });

                                                return data;
                                            },
                                            id: 'thumbnailViewAB',
                                            tpl: [
                                                '<tpl for=".">',
                                                '	<div class="{box_class}">',
                                                '		<tpl>',
                                                '			<tpl if="t_file_type == \'mp4\'">',
                                                '					<video class="each-block" controls width="{icon_width}px" height="{icon_height}px">',
                                                '						<source src="{thumbnail_image}" type=\'video/mp4; codecs="avc1.42E01E, mp4a.40.2"\' />',
                                                '					//	<p>動画を再生するには<br/>videoタグをサポートした<br/>ブラウザが必要です。</p>',
                                                '					</video>',
                                                '			</tpl>',
                                                '			<tpl if="t_file_type == \'ogg\'">',
                                                '					<video class="each-block" controls width="{icon_width}px" height="{icon_height}px">',
                                                '						<source src="{thumbnail_image}" type=\'video/ogg; codecs="theora, vorbis"\' />',
                                                '					//	<p>動画を再生するには<br/>videoタグをサポートした<br/>ブラウザが必要です。</p>',
                                                '					</video>',
                                                '			</tpl>',
                                                '			<tpl if="t_file_type == \'png\'">',
                                                '					<span class="icon-block">',
                                                '						<img src="{thumbnail_image}" style="max-width:{icon_width}px;max-height: {icon_height}px" />',
                                                '					</span><br/>',
                                                '			</tpl>',
                                                '		</tpl>',
                                                '		<caption>',
                                                '			<ul>',
                                                '				<li>ファイル名: {file_name}</li>',
                                                '				<li>サイズ: {file_disp_size}</li>',
                                                '                           <tpl if="box_class != \'thumb-wrapAB-min\'">',
                                                '				        <li><span>更新日時: {modified_date:date("Y-m-d H:i:s")}</span><span><img src="data/{lock_check_img}" /></span></li>',
                                                '                           </tpl>',
                                                '			</ul>',
                                                '		</caption>',
                                                '	</div>',
                                                '</tpl>',
                                                '<div class="x-clear"></div>'
                                            ],
                                            emptyText: 'データがありません',
                                            itemSelector: 'div.thumb-wrapAB',
                                            multiSelect: true,
                                            overItemCls: 'x-item-over',
                                            singleSelect: true,
                                            store: 'FileDataStoreA',
                                            trackOver: true,
                                            listeners: {
                                                itemdblclick: {
                                                    fn: me.onThumbnailViewABItemDblClick,
                                                    scope: me
                                                },
                                                itemcontextmenu: {
                                                    fn: me.onThumbnailViewABItemContextMenu,
                                                    scope: me
                                                },
                                                itemclick: function(me, record, item, index, e, options)
                                                {
                                                    SetActiveData(me, record, e, index);
                                                }
                                            }
                                        }
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'pagingtoolbar',
                                            dock: 'bottom',
                                            id: 'filesA_thumbBlock',
                                            displayInfo: true,
                                            store: 'FileDataStoreA'
                                        }
                                    ]
                                }
                            ]


                        }
                    ]
                },
                {
                    xtype: 'searchdsp',
                    flex: 1,
                    region: 'east',
                    collapseDirection: 'right',
                    collapsed: true,
                    collapsible: true,
                    title: 'ファイル検索結果'
                },
                {
                    xtype: 'domainproperty',
                    tabConfig: {
                        xtype: 'tab',
                        hidden: true
                    }
                }

            ]
        });

        me.callParent(arguments);

    },
    onGriddragdroppluginBeforeDropA: function (node, data, overModel, dropPosition, dropFunction, eOpts) {
        var recordCounter = data.records.length;

        var file_writable;
        var lockStatus;
        var openStatus;
        var sendRight = [];
        var errorFiles = '';
        var errorMessage;
        var errorStatus = false;
        var targetFolderHash;
        var targetFolderName;
        var dataX = [];
        var dataY;
        var dataZ;
        var folderIncluded = false;

        var activeFolders = Ext.getCmp('activeData').getForm().getFieldValues();

        if (data.records[0].data.cont_location === 'folder_b') {
            originalContLocation = 'folder_b';
            targetFolderHash = activeFolders.activeFolderA_hash;
            targetFolderName = activeFolders.activeFolderA_name;
            targetFolderWrite = activeFolders.activeFolderA_writable;
            originalFolderName = activeFolders.activeFolderB_name;
            originalFolderWrite = activeFolders.activeFolderB_writable;
        } else {
            originalContLocation = 'folder_a';
            targetFolderHash = activeFolders.activeFolderB_hash;
            targetFolderName = activeFolders.activeFolderB_name;
            targetFolderWrite = activeFolders.activeFolderB_writable;
            originalFolderName = activeFolders.activeFolderA_name;
            originalFolderWrite = activeFolders.activeFolderA_writable;
        }

        if (originalFolderWrite === false) {
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: '元フォルダの変更権がないので、フフォルダ・ァイル移動はできません',
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
            });
            return false;
        }

        if (targetFolderWrite === false) {
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: 'フォルダ・ファイルの移動先フォルダの書き込み権がないので、フォルダ・ファイル移動はできません',
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
            });
            return false;
        }

        for (var i = 0; i < recordCounter; i++) {
            sendingFileName = data.records[i].data.file_name;
            file_writable = data.records[i].data.file_writable_status;
            lockStatus = data.records[i].data.lock;
            openStatus = data.records[i].data.open_status;
            fileType = data.records[i].data.file_type;

            if (file_writable === false) {
                errorFiles = errorFiles + '・' + sendingFileName + 'は移動権限がありません<br/>';
                errorStatus = true;
            } else if (lockStatus === 1 && openStatus === true) {
                errorFiles = errorFiles + '・' + sendingFileName + 'は開いています<br/>';
                errorStatus = true;
            } else if (lockStatus === 2) {
                errorFiles = errorFiles + '・' + sendingFileName + 'はロックされています<br/>';
                errorStatus = true;
            } else if (lockStatus === 4 || lockStatus === 8) {
                errorFiles = errorFiles + '・' + sendingFileName + 'はチェックアウトされています<br/>';
                errorStatus = true;
            } else if (fileType === "folder") {
                //errorFiles  = errorFiles + '・' + sendingFileName + 'はフォルダです(フォルダは移動できません)<br/>';
                //errorStatus = true;
                folderIncluded = true;
            }
        }

        if (errorStatus === true) {
            errorMessage = '選択し直して下さい<br/>' + errorFiles;
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動',
                msg: errorMessage,
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
            });
            return false;
        }

        for (var j = 0; j < recordCounter; j++) {
            dataX.push(data.records[j].data);
        }
        dataY = Ext.apply({original_cont_location: originalContLocation}, dataX);
        dataY = Ext.apply({original_foldername: originalFolderName}, dataY);
        dataY = Ext.apply({original_folder_write: originalFolderWrite}, dataY);
        dataY = Ext.apply({target_hash: targetFolderHash}, dataY);
        dataY = Ext.apply({target_folder: targetFolderName}, dataY);
        dataY = Ext.apply({session_id: this_session_id}, dataY);
        dataY = Ext.apply({request_type: "move_files"}, dataY);
        dataZ = Ext.encode(dataY);

        Ext.Ajax.request({
            url: 'tdx/updatedata.tdx',
            jsonData: dataZ,
            method: 'POST',
            success: handleSuccess,
            failure: handleFailure
        });

        Ext.Msg.show({
            title: 'フォルダ・ファイル移動中',
            msg: 'フォルダ・ファイル移動中です'
        });

        function handleSuccess(response) {
            obj = Ext.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.hide();
                Ext.Msg.show({
                    title: 'フォルダ・ファイル移動失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
                Ext.getStore('FileDataStoreA').load();
                Ext.getStore('FileDataStoreB').load();
            } else {
                requestRefresh();
                Ext.Msg.hide();
            }
        }

        function handleFailure(response) {
            Ext.Msg.hide();
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: 'フォルダ・ファイル移動に失敗しました',
                buttons: Ext.Msg.OK
            });
            Ext.getStore('FileDataStoreA').load();
            Ext.getStore('FileDataStoreB').load();
        }

        function requestRefresh() {
            sending_cont_location = data.records[0].data.cont_location;
            sending_hash_key = data.records[0].data.hash_key;

            var requestRefreshData = Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
            requestRefreshData = Ext.apply(requestRefreshData, {target_folder_hash_key: targetFolderHash});
            requestRefreshData = Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
            requestRefreshData = Ext.apply({event_type: "dd_file_b2a"}, requestRefreshData);
            requestRefreshData = Ext.apply({request_type: "update_file_list"}, requestRefreshData);

            Ext.Ajax.request({
                url: 'tdx/updatedata.tdx',
                jsonData: requestRefreshData,
                success: handleSuccess2,
                failure: handleFailure2
            });
        }

        function handleSuccess2(response) {
            obj = Ext.decode(response.responseText);

            var request_success = obj.success;
            var request_status = obj.status;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.show({
                    title: 'フォルダ・ファイル移動失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            } else {
                if (folderIncluded === false) {
                    Ext.getStore('FileDataStoreA').load();
                    Ext.getStore('FileDataStoreB').load();
                } else {
                    Ext.getStore('FileDataStoreA').load();
                    Ext.getStore('FileDataStoreB').load();

                    Ext.getStore('FolderDataStoreA').load();
                    Ext.getStore('FolderDataStoreB').load();

                    Ext.getStore('TargetFolderAT').load();
                    //Ext.getStore('TargetFolderBT').load();

                    Ext.getStore('TargetFolderATFi').load();
                    //Ext.getStore('TargetFolderBTFi').load();
                }
                Ext.ComponentQuery.query('#showFileProperty')[0].getForm().reset();
                Ext.ComponentQuery.query('#openFile')[0].getForm().reset();
                Ext.ComponentQuery.query('#ccpdFile')[0].getForm().reset();
                Ext.ComponentQuery.query('#showThumbnail')[0].update();
            }
        }

        function handleFailure2(response) {
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }
    },
    onListGridPanelAItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        TargetComp='listGridPanelA';
        select_record = record;
        SetActiveData(dataview, record, e, index);

        Ext.getCmp('opend_by').setValue('listGridPanelA');
        var grid = Ext.getCmp('listGridPanelA');
        var model = grid.getSelectionModel();

        if (model.getCount() === 1) {
            if (record.data.file_type === 'folder') {
                var readable = select_record.data.folder_readable_status;
                var writable = select_record.data.folder_writable_status;
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                new Ext.menu.Separator(),
                                //appendFileAgent,
                                downloadFileAgent,
                                //addSynchronousFolder,
                                //delSynchronousFolder,
                                //addArchiveFolder,
                                //delArchiveFolder,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //createSubFolder,
                                //settingFolderAccessRight,
                                createAlias,
                                //changeFolderName,
                                //sendUrlLink,
                                displayPropertyFolder
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                //copyFile,
                                pasteFile,
                                /*optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                */
                                new Ext.menu.Separator(),
                                appendFileAgent,
                                /*downloadFileAgent,
                                addSynchronousFolder,
                                delSynchronousFolder,
                                addArchiveFolder,
                                delArchiveFolder,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                new Ext.menu.Separator(),
                                appendFileAgent,
                                downloadFileAgent,
                                addSynchronousFolder,
                                delSynchronousFolder,
                                addArchiveFolder,
                                delArchiveFolder,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                //pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                //new Ext.menu.Separator(),
                                //appendFile,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                //changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                //appendFileAgent
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                //copyFile,
                                pasteFile,
                                //optClipboard,
                                new Ext.menu.Separator(),
                                //searchFiles,
                                //new Ext.menu.Separator(),
                                appendFile,
                                /*new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                */
                                //appendFileAgent
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                new Ext.menu.Separator(),
                                appendFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                //appendFileAgent
                            ]
                        });
                    }
                }
            } else {
                var readable = select_record.data.file_readable_status;
                var writable = select_record.data.file_writable_status;
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                //openFileAgent,
                                downloadFileAgent,
                                downloadFileGeneration,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //checkInOut,
                                //fileLockUnlock,
                                //changeFileName,
                                //sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),

                                openFileAgent,
                                downloadFileAgent,
                                downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                settingFolderAccessRight,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                //cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //downloadFile,
                                //downloadFileGeneration,
                                new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //fileLockUnlock,
                                //changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //downloadFile,
                                //downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //downloadFile,
                                //downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                settingFolderAccessRight,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }

                }
            }
        } else {
            var records = model.getSelection();
            var readable = true;
            var writable = true;
            var isFolder = false;
            for (var i = 0; i < model.getCount(); i++) {
                if (records[i].data.file_type === 'folder') {
                    isFolder = true;
                    if(records[i].data.folder_readable_status == false)
                    {
                        readable = false;
                    }
                    if(records[i].data.folder_writable_status == false)
                    {
                        writable = false;
                    }
                    //break;
                }
                else
                {
                    if(records[i].data.file_readable_status == false)
                    {
                        readable = false;
                    }
                    if(records[i].data.file_writable_status == false)
                    {
                        writable = false;
                    }
                }
            }
            if (isFolder) {
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFileAgent,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                //new Ext.menu.Separator(),
                                //sendUrlLink
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                sendUrlLink
                            ]
                        });
                    }
                }
            } else {
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                new Ext.menu.Separator(),
                                //checkInOut,
                                //fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFile,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                new Ext.menu.Separator(),
                                //fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                }
            }
        }
        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onIconViewAItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var dataX = record.data;

        var readableRight = dataX.file_readable_status;
        var writableRight = dataX.file_writable_status;

        var editableStatus = dataX.lock;
        var openStatus = dataX.open_status;

        var showFileName = dataX.file_name;
        var fileType = dataX.file_type;

        var contLocation = dataX.cont_location;

        var readChecked = record.data.folder_readable_status;
        var writeChecked = record.data.folder_writable_status;

        doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

    },
    onIconViewAItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        }

        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onThumbnailViewABItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var dataX = record.data;

        var readableRight = dataX.file_readable_status;
        var writableRight = dataX.file_writable_status;

        var editableStatus = dataX.lock;
        var openStatus = dataX.open_status;

        var showFileName = dataX.file_name;
        var fileType = dataX.file_type;

        var contLocation = dataX.cont_location;

        var readChecked = record.data.folder_readable_status;
        var writeChecked = record.data.folder_writable_status;

        doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

    },
    onThumbnailViewABItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        TargetComp='thumbnailViewAB';
        select_record = record;
        SetActiveData(dataview, record, e, index);
        Ext.getCmp('opend_by').setValue('thumbnailViewAB');
        /*if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        }*/
        var grid = Ext.getCmp('thumbnailViewAB');
        var model = grid.getSelectionModel();
        /*if (model.getCount() === 1) {
            if (record.data.file_type === 'folder') {
                if (isAgentInstall) {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            cutFile,
                            copyFile,
                            pasteFile,
                            optClipboard,
                            new Ext.menu.Separator(),
                            searchFiles,
                            new Ext.menu.Separator(),
                            appendFileAgent,
                            downloadFileAgent,
                            addSynchronousFolder,
                            delSynchronousFolder,
                            addArchiveFolder,
                            delArchiveFolder,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            createSubFolder,
                            settingFolderAccessRight,
                            createAlias,
                            changeFolderName,
                            sendUrlLink,
                            displayPropertyFolder
                        ]
                    });
                } else {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            cutFile,
                            copyFile,
                            pasteFile,
                            optClipboard,
                            new Ext.menu.Separator(),
                            searchFiles,
                            new Ext.menu.Separator(),
                            appendFile,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            createSubFolder,
                            settingFolderAccessRight,
                            createAlias,
                            changeFolderName,
                            sendUrlLink,
                            displayPropertyFolder
                            //appendFileAgent
                        ]
                    });
                }
            } else {
                if (isAgentInstall) {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            multiPagePreview,
                            new Ext.menu.Separator(),
                            cutFile,
                            copyFile,
                            new Ext.menu.Separator(),
                            openFileAgent,
                            downloadFileAgent,
                            downloadFileGeneration,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            checkInOut,
                            fileLockUnlock,
                            changeFileName,
                            sendUrlLink,
                            displayPropertyFile
                        ]
                    });
                } else {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            multiPagePreview,
                            new Ext.menu.Separator(),
                            cutFile,
                            copyFile,
                            //new Ext.menu.Separator(),
                            //downloadFile,
                            //downloadFileGeneration,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            fileLockUnlock,
                            changeFileName,
                            sendUrlLink,
                            displayPropertyFile
                        ]
                    });
                }
            }
        } else {
            var records = model.getSelection();
            var isFolder = false;
            for (var i = 0; i < model.getCount(); i++) {
                if (records[i].data.file_type === 'folder') {
                    isFolder = true;
                    break;
                }
            }
            if (isFolder) {
                if (isAgentInstall) {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            cutFile,
                            copyFile,
                            new Ext.menu.Separator(),
                            downloadFileAgent,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            sendUrlLink
                        ]
                    });
                } else {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            cutFile,
                            copyFile,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            sendUrlLink
                        ]
                    });
                }
            } else {
                if (isAgentInstall) {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            cutFile,
                            copyFile,
                            new Ext.menu.Separator(),
                            openFileAgent,
                            downloadFileAgent,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            checkInOut,
                            fileLockUnlock,
                            sendUrlLink
                        ]
                    });
                } else {
                    tree_context_menu = new Ext.menu.Menu({
                        items: [
                            cutFile,
                            copyFile,
                            new Ext.menu.Separator(),
                            downloadFile,
                            new Ext.menu.Separator(),
                            trashFile,
                            new Ext.menu.Separator(),
                            fileLockUnlock,
                            sendUrlLink
                        ]
                    });
                }
            }
        }*/
        if (model.getCount() === 1) {
            if (record.data.file_type === 'folder') {
                var readable = select_record.data.folder_readable_status;
                var writable = select_record.data.folder_writable_status;
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                new Ext.menu.Separator(),
                                //appendFileAgent,
                                downloadFileAgent,
                                //addSynchronousFolder,
                                //delSynchronousFolder,
                                //addArchiveFolder,
                                //delArchiveFolder,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //createSubFolder,
                                //settingFolderAccessRight,
                                createAlias,
                                //changeFolderName,
                                //sendUrlLink,
                                displayPropertyFolder
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                //copyFile,
                                pasteFile,
                                /*optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                */
                                new Ext.menu.Separator(),
                                appendFileAgent,
                                /*downloadFileAgent,
                                addSynchronousFolder,
                                delSynchronousFolder,
                                addArchiveFolder,
                                delArchiveFolder,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                new Ext.menu.Separator(),
                                appendFileAgent,
                                downloadFileAgent,
                                addSynchronousFolder,
                                delSynchronousFolder,
                                addArchiveFolder,
                                delArchiveFolder,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                //pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                //new Ext.menu.Separator(),
                                //appendFile,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //createSubFolder,
                                //settingFolderAccessRight,
                                createAlias,
                                //changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                //appendFileAgent
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                //copyFile,
                                pasteFile,
                                //optClipboard,
                                new Ext.menu.Separator(),
                                //searchFiles,
                                //new Ext.menu.Separator(),
                                appendFile,
                                /*new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                */
                                //appendFileAgent
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                pasteFile,
                                optClipboard,
                                new Ext.menu.Separator(),
                                searchFiles,
                                new Ext.menu.Separator(),
                                appendFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                createSubFolder,
                                settingFolderAccessRight,
                                createAlias,
                                changeFolderName,
                                sendUrlLink,
                                displayPropertyFolder
                                //appendFileAgent
                            ]
                        });
                    }
                }
            } else {
                var readable = select_record.data.file_readable_status;
                var writable = select_record.data.file_writable_status;
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                //openFileAgent,
                                downloadFileAgent,
                                downloadFileGeneration,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //checkInOut,
                                //fileLockUnlock,
                                //changeFileName,
                                //sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),

                                openFileAgent,
                                downloadFileAgent,
                                downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                settingFolderAccessRight,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                //cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //downloadFile,
                                //downloadFileGeneration,
                                new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //fileLockUnlock,
                                //changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //downloadFile,
                                //downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                multiPagePreview,
                                new Ext.menu.Separator(),
                                cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //downloadFile,
                                //downloadFileGeneration,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                settingFolderAccessRight,
                                changeFileName,
                                sendUrlLink,
                                displayPropertyFile
                            ]
                        });
                    }

                }
            }
        } else {
            var records = model.getSelection();
            var readable = true;
            var writable = true;
            var isFolder = false;
            for (var i = 0; i < model.getCount(); i++) {
                if (records[i].data.file_type === 'folder') {
                    isFolder = true;
                    if(records[i].data.folder_readable_status == false)
                    {
                        readable = false;
                    }
                    if(records[i].data.folder_writable_status == false)
                    {
                        writable = false;
                    }
                    //break;
                }
                else
                {
                    if(records[i].data.file_readable_status == false)
                    {
                        readable = false;
                    }
                    if(records[i].data.file_writable_status == false)
                    {
                        writable = false;
                    }
                }
            }
            if (isFolder) {
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFileAgent,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                //new Ext.menu.Separator(),
                                //sendUrlLink
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                //new Ext.menu.Separator(),
                                //sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                sendUrlLink
                            ]
                        });
                    }
                }
            } else {
                if (isAgentInstall) {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                new Ext.menu.Separator(),
                                //checkInOut,
                                //fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                openFileAgent,
                                downloadFileAgent,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                checkInOut,
                                fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                } else {
                    if(readable == true && writable == false)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                //cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFile,
                                //new Ext.menu.Separator(),
                                //trashFile,
                                new Ext.menu.Separator(),
                                //fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                    else if(readable == false && writable == true)
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                /*cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                sendUrlLink
                                */
                            ]
                        });
                    }
                    else
                    {
                        tree_context_menu = new Ext.menu.Menu({
                            items: [
                                cutFile,
                                copyFile,
                                new Ext.menu.Separator(),
                                downloadFile,
                                new Ext.menu.Separator(),
                                trashFile,
                                new Ext.menu.Separator(),
                                fileLockUnlock,
                                sendUrlLink
                            ]
                        });
                    }
                }
            }
        }

        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onThumbnailViewALItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var dataX = record.data;

        var readableRight = dataX.file_readable_status;
        var writableRight = dataX.file_writable_status;

        var editableStatus = dataX.lock;
        var openStatus = dataX.open_status;

        var showFileName = dataX.file_name;
        var fileType = dataX.file_type;

        var contLocation = dataX.cont_location;

        var readChecked = record.data.folder_readable_status;
        var writeChecked = record.data.folder_writable_status;

        doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

    },
    onThumbnailViewALItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        }

        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onGriddragdroppluginBeforeDropB: function (node, data, overModel, dropPosition, dropFunction, eOpts) {
        var recordCounter = data.records.length;

        var file_writable;
        var lockStatus;
        var openStatus;
        var sendRight = [];
        var errorFiles = '';
        var errorMessage;
        var errorStatus = false;
        var targetFolderHash;
        var targetFolderName;
        var dataX = [];
        var dataY;
        var dataZ;
        var folderIncluded = false;

        var activeFolders = Ext.getCmp('activeData').getForm().getFieldValues();

        if (data.records[0].data.cont_location === 'folder_b') {
            originalContLocation = 'folder_b';
            targetFolderHash = activeFolders.activeFolderA_hash;
            targetFolderName = activeFolders.activeFolderA_name;
            targetFolderWrite = activeFolders.activeFolderA_writable;
            originalFolderName = activeFolders.activeFolderB_name;
            originalFolderWrite = activeFolders.activeFolderB_writable;
        } else {
            originalContLocation = 'folder_a';
            targetFolderHash = activeFolders.activeFolderB_hash;
            targetFolderName = activeFolders.activeFolderB_name;
            targetFolderWrite = activeFolders.activeFolderB_writable;
            originalFolderName = activeFolders.activeFolderA_name;
            originalFolderWrite = activeFolders.activeFolderA_writable;
        }

        if (originalFolderWrite === false) {
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: '元フォルダの変更権がないので、フォルダ・ファイル移動はできません',
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
            });
            return false;
        }

        if (targetFolderWrite === false) {
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: 'フォルダ・ファイルの移動先フォルダの書き込み権がないので、フォルダ・ファイル移動はできません',
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
            });
            return false;
        }

        for (var i = 0; i < recordCounter; i++) {
            sendingFileName = data.records[i].data.file_name;
            file_writable = data.records[i].data.file_writable_status;
            lockStatus = data.records[i].data.lock;
            openStatus = data.records[i].data.open_status;
            fileType = data.records[i].data.file_type;

            if (file_writable === false) {
                errorFiles = errorFiles + '・' + sendingFileName + 'は移動権限がありません<br/>';
                errorStatus = true;
            } else if (lockStatus === 1 && openStatus === true) {
                errorFiles = errorFiles + '・' + sendingFileName + 'は開いています<br/>';
                errorStatus = true;
            } else if (lockStatus === 2) {
                errorFiles = errorFiles + '・' + sendingFileName + 'はロックされています<br/>';
                errorStatus = true;
            } else if (lockStatus === 4 || lockStatus === 8) {
                errorFiles = errorFiles + '・' + sendingFileName + 'はチェックアウトされています<br/>';
                errorStatus = true;
            } else if (fileType === "folder") {
                //errorFiles  = errorFiles + '・' + sendingFileName + 'はフォルダです(フォルダは移動できません)<br/>';
                //errorStatus = true;
                folderIncluded = true;
            }
        }

        if (errorStatus === true) {
            errorMessage = '選択し直して下さい<br/>' + errorFiles;
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動',
                msg: errorMessage,
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
            });
            return false;
        }

        for (var j = 0; j < recordCounter; j++) {
            dataX.push(data.records[j].data);
        }

        dataY = Ext.apply({original_cont_location: originalContLocation}, dataX);
        dataY = Ext.apply({original_foldername: originalFolderName}, dataY);
        dataY = Ext.apply({original_folder_write: originalFolderWrite}, dataY);
        dataY = Ext.apply({target_hash: targetFolderHash}, dataY);
        dataY = Ext.apply({target_folder: targetFolderName}, dataY);
        dataY = Ext.apply({session_id: this_session_id}, dataY);
        dataY = Ext.apply({request_type: "move_files"}, dataY);
        dataZ = Ext.encode(dataY);

        Ext.Ajax.request({
            url: 'tdx/updatedata.tdx',
            jsonData: dataZ,
            method: 'POST',
            success: handleSuccess,
            failure: handleFailure
        });

        Ext.Msg.show({
            title: 'フォルダ・ファイル移動中',
            msg: 'フォルダ・ファイル移動中です'
        });


        function handleSuccess(response) {
            obj = Ext.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.hide();
                Ext.Msg.show({
                    title: 'フォルダ・ファイル移動失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
                Ext.getStore('FileDataStoreA').load();
                Ext.getStore('FileDataStoreB').load();
            } else {
                requestRefresh();
                Ext.Msg.hide();
            }
        }

        function handleFailure(response) {
            Ext.Msg.hide();
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: 'フォルダ・ファイル移動に失敗しました',
                buttons: Ext.Msg.OK
            });
            Ext.getStore('FileDataStoreA').load();
            Ext.getStore('FileDataStoreB').load();
        }

        function requestRefresh() {
            sending_cont_location = data.records[0].data.cont_location;
            sending_hash_key = data.records[0].data.hash_key;

            var requestRefreshData = Ext.apply({session_id: this_session_id}, {cont_location: sending_cont_location});
            requestRefreshData = Ext.apply(requestRefreshData, {target_folder_hash_key: targetFolderHash});
            requestRefreshData = Ext.apply(requestRefreshData, {hash_key: sending_hash_key});
            requestRefreshData = Ext.apply({event_type: "dd_file_a2b"}, requestRefreshData);
            requestRefreshData = Ext.apply({request_type: "update_file_list"}, requestRefreshData);

            Ext.Ajax.request({
                url: 'tdx/updatedata.tdx',
                jsonData: requestRefreshData,
                success: handleSuccess2,
                failure: handleFailure2
            });
        }

        function handleSuccess2(response) {
            obj = Ext.decode(response.responseText);

            var request_success = obj.success;
            var request_status = obj.status;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.show({
                    title: 'フォルダ・ファイル移動失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            } else {
                if (folderIncluded === false) {
                    Ext.getStore('FileDataStoreA').load();
                    Ext.getStore('FileDataStoreB').load();
                } else {
                    Ext.getStore('FileDataStoreA').load();
                    Ext.getStore('FileDataStoreB').load();

                    Ext.getStore('FolderDataStoreA').load();
                    Ext.getStore('FolderDataStoreB').load();

                    Ext.getStore('TargetFolderAT').load();
                    //Ext.getStore('TargetFolderBT').load();

                    Ext.getStore('TargetFolderATFi').load();
                    //Ext.getStore('TargetFolderBTFi').load();
                }
                Ext.ComponentQuery.query('#showFileProperty')[0].getForm().reset();
                Ext.ComponentQuery.query('#showFileProperty')[0].getForm().reset();
                Ext.ComponentQuery.query('#openFile')[0].getForm().reset();
                Ext.ComponentQuery.query('#ccpdFile')[0].getForm().reset();
                Ext.ComponentQuery.query('#showThumbnail')[0].update();
            }
        }

        function handleFailure2(response) {
            Ext.Msg.show({
                title: 'フォルダ・ファイル移動失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }

    },
    onListGridPanelBItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        }

        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onIconViewBItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var dataX = record.data;

        var readableRight = dataX.file_readable_status;
        var writableRight = dataX.file_writable_status;

        var editableStatus = dataX.lock;
        var openStatus = dataX.open_status;

        var showFileName = dataX.file_name;
        var fileType = dataX.file_type;

        var contLocation = dataX.cont_location;

        var readChecked = record.data.folder_readable_status;
        var writeChecked = record.data.folder_writable_status;

        doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

    },
    onIconViewBItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        }

        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onThumbnailViewBBItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var dataX = record.data;

        var readableRight = dataX.file_readable_status;
        var writableRight = dataX.file_writable_status;

        var editableStatus = dataX.lock;
        var openStatus = dataX.open_status;

        var showFileName = dataX.file_name;
        var fileType = dataX.file_type;

        var contLocation = dataX.cont_location;

        var readChecked = record.data.folder_readable_status;
        var writeChecked = record.data.folder_writable_status;

        doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

    },
    onThumbnailViewBBItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        }

        tree_context_menu.showAt(e.getXY());
        return false;

    },
    onThumbnailViewBLItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var dataX = record.data;

        var readableRight = dataX.file_readable_status;
        var writableRight = dataX.file_writable_status;

        var editableStatus = dataX.lock;
        var openStatus = dataX.open_status;

        var showFileName = dataX.file_name;
        var fileType = dataX.file_type;

        var contLocation = dataX.cont_location;

        var readChecked = record.data.folder_readable_status;
        var writeChecked = record.data.folder_writable_status;

        doOpenFile(dataX, readableRight, writableRight, editableStatus, openStatus, showFileName, fileType, readChecked, writeChecked, contLocation);

    },
    onThumbnailViewBLItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        if (record.data.file_type === 'folder') {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    changeFolderName,
                    new Ext.menu.Separator(),
                    //copyFolder,
                    moveFolder,
                    deleteFolder,
                    new Ext.menu.Separator(),
                    //releaseFolderOwnership,
                    //acquireFolderOwnership,
                    settingFolderAccessRight,
                    new Ext.menu.Separator(),
                    createSubFolder,
                    appendFile,
                    new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });
        } else {
            tree_context_menu = new Ext.menu.Menu({
                items: [
                    displayProperty,
                    //displayPropertyExpanded,
                    //displayPropertyDetails,
                    new Ext.menu.Separator(),
                    openFile,
                    //copyFile,
                    moveFile,
                    deleteFile,
                    new Ext.menu.Separator(),
                    //checkoutFile,
                    //lockFile,
                    //releaseFileOwnership,
                    //settingFileAccessRight,
                    //new Ext.menu.Separator(),
                    //sendingFile,
                    //new Ext.menu.Separator(),
                    searchFiles,
                    new Ext.menu.Separator(),
                    openTrashbox
                ]
            });


        }

        tree_context_menu.showAt(e.getXY());
        return false;


    },
    onWorkAreaDispBtnClick: function (button, e, eOpts) {
        if (Ext.getCmp('westSidePanel').isVisible()) {
            Ext.getCmp('westSidePanel').hide();
        } else {
            Ext.getCmp('westSidePanel').show();
            Ext.getCmp('westSidePanel').expand();
        }
    },
    onWorkAreaMenuDisp: function (button, e, eOpts) {
        TargetComp = 'folderPanelA';
        setting_menu = new Ext.menu.Menu({
            items: [
                createSubFolder,
                new Ext.menu.Separator(),
                pasteFileUnderFolder,
                optClipboard,
                new Ext.menu.Separator(),
                searchFiles,
                new Ext.menu.Separator(),
                appendFile
            ]
        });

        setting_menu.showAt(e.getXY());
        return false;
    },
    onListMaxDispBtnClick: function (button, e, eOpts) {
        listDispSize = 'max';
        Ext.getStore('FileDataStoreA').load({params: {start: 0, limit: 100}});
    },
    onListMdlDispBtnClick: function (button, e, eOpts) {
        listDispSize = 'mid';
        Ext.getStore('FileDataStoreA').load({params: {start: 0, limit: 50}});
    },
    onListMinDispBtnClick: function (button, e, eOpts) {
        listDispSize = 'min';
        Ext.getStore('FileDataStoreA').load({params: {start: 0, limit: 25}});
    },
    onBoxMaxDispBtnClick: function (button, e, eOpts) {
        boxDispSizeA = 'max';
        Ext.getStore('FileDataStoreA').load();
    },
    onBoxMdlDispBtnClick: function (button, e, eOpts) {
        boxDispSizeA = 'mid';
        Ext.getStore('FileDataStoreA').load();
    },
    onBoxMinDispBtnClick: function (button, e, eOpts) {
        boxDispSizeA = 'min';
        Ext.getStore('FileDataStoreA').load();
    },
    onListActive: function (component, options) {
        listActive = true;
        thumbnailActive = false;
    },
    onThumbnailActive: function (component, options) {
        listActive = false;
        thumbnailActive = true;
    }
});
