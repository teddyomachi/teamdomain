/*
 * File: app/view/DomainGridPanelA.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.DomainGridPanelA', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.domaingridpanela',
    //height: 150,
    id: 'domainGridPanelA',
    itemId: 'domainGridPanelA',
    collapsible: true,
    title: 'エイリアスリスト',
    autoScroll: true,
    hideHeaders: true,
    store: 'DomainDataStoreA',
    initComponent: function () {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'domain_name',
                    text: 'Domain_name',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'domain_link',
                    text: 'Domain_link'
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onDomainGridPanelAAfterRender,
                    delay: 10,
                    scope: me
                },
                itemcontextmenu: {
                    fn: me.onDomainGridPanelAItemContextMenu,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },
    onDomainGridPanelAAfterRender: function (component, eOpts) {
        Ext.getStore('DomainDataStoreA').load({
            callback: function (records, operation, success) {

                var this_domains = Ext.getStore('DomainDataStoreA').data;
                var data_length = this_domains.length;

                var thisActiveDomainA = '';
                for (i = 0; i < data_length; i++) {
                    if (this_domains.items[i].data.selected === true) {
                        thisActiveDomainA = this_domains.items[i];
                    }
                }

                if (thisActiveDomainA === '') {
                    thisActiveDomainA = this_domains.items[0];
                }

                component.selModel.doSelect(thisActiveDomainA);

                var show_target_folder = 'folder_a';

                var viewDomain = Ext.ComponentQuery.query('mainView')[0];
                if (thisActiveDomainA) {

                    viewDomain.down('#showDomainThumbnail').update(thisActiveDomainA.data);
                    viewDomain.down('#showDomainProperty').loadRecord(thisActiveDomainA);
//					viewDomain.down('#createFolder').loadRecord(thisActiveDomainA);
                    /*
                     Ext.getCmp('createFolder').getForm().setValues({
                     cont_location: show_target_folder
                     });
                     */
                    Ext.getCmp('activeData').getForm().setValues({
                        activeDomainA_name: thisActiveDomainA.data.domain_name,
                        activeDomainA_hash: thisActiveDomainA.data.hash_key
                    });

                    var editChecked = thisActiveDomainA.data.domain_writable_status;

                    if (editChecked === true) {
                        Ext.getCmp('domain_name_1').enable();
                        Ext.getCmp('btn_change_domain_name').enable();
                        Ext.getCmp('new_root_folder').enable();
                        Ext.getCmp('btn_create_root_folder').enable();
                    } else {
                        Ext.getCmp('domain_name_1').disable();
                        Ext.getCmp('btn_change_domain_name').disable();
                        Ext.getCmp('new_root_folder').disable();
                        Ext.getCmp('btn_create_root_folder').disable();
                    }
                }
            }
        });

    },
    onDomainGridPanelAItemContextMenu: function (dataview, record, item, index, e, eOpts) {
        tree_context_menu = new Ext.menu.Menu({
            items: [
                changeDomainName,
                deleteAlias
            ]
        });

        tree_context_menu.showAt(e.getXY());
        return false;
    }

});
