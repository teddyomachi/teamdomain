/*
 * File: app/view/optionWin.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TeamDomain.view.urlLinkSend', {
    extend: 'Ext.window.Window',
    alias: 'widget.urlLinkSend',
    height: 450,
    hidden: false,
    id: 'urlLinkSend',
    itemId: 'urlLinkSend',
    width: 461,
    layout: {
        type: 'fit'
    },
    title: 'URLリンク送信',
    constrain: true,
    initComponent: function () {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    id: 'urlLinkSendForm',
                    itemId: 'urlLinkSendForm',
                    padding: 10,
                    items: [
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            height: 350,
                            margin: '5 0 0 0',
                            padding: '0 10 2 10',
                            layout: {
                                align: 'stretch',
                                padding: 0,
                                type: 'vbox'
                            },
                            title: '作成URLリスト',
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    flex: 1,
                                    id: 'sendUrlList',
                                    autoScroll: true,
                                    store: Ext.data.StoreManager.lookup('SendUrlLinkStore'),
                                    viewConfig: {
                                        deferEmptyText: false
                                    },
                                    selModel: Ext.create('Ext.selection.CheckboxModel', {
                                    }),
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 100,
                                            dataIndex: 'file_name',
                                            text: 'ファイル名',
                                            flex: 1
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 100,
                                            dataIndex: 'value',
                                            text: '送信URL',
                                            flex: 1
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.CellEditing', {
                                        })
                                    ]
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            items: [
                                {
                                    xtype: 'tbfill'
                                },
                                {
                                    xtype: 'button',
                                    width: 100,
                                    text: '送信',
                                    tooltip: {
                                        html: '選択したURLに送信します。'
                                    },
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick2,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    width: 100,
                                    text: 'キャンセル',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        beforerender: {
                            fn: me.onChangePwFormBeforeRender,
                            scope: me
                        },
                        afterrender: function (me, options)
                        {
                            Ext.getCmp('sendUrlList').selModel.selectAll();
                        },
                        beforedestroy: function (me, options)
                        {
                            Ext.getCmp('urlLinkCreate').close();
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },
    onChangePwFormBeforeRender: function (component, eOpts) {
        component.getForm().setValues({
            operator_id: this_op_id,
            operator_name: this_op_name
        });

    },
    onButtonClick2: function (button, e, eOpts)
    {
        if (Ext.getCmp('sendUrlList').selModel.hasSelection() === false)
        {
            Ext.Msg.show({
                title: '注意',
                msg: '何も選択されていません。',
                buttons: Ext.Msg.OK
            });
        }
        else
        {
            var grid = Ext.getCmp('sendUrlList');
            var model = grid.getSelectionModel();
            var addr = Ext.getCmp('urllink_adr').value;
            var length = model.getSelection().length;
            var url_list = [];
            var send_data;

            for (i = 0; i < length; i++)
            {
                var record = model.getSelection()[i];
                url_list[i] = Ext.apply({urlLink: record.data.value}, url_list[i]);
            }
            send_data = Ext.apply({session_id: this_session_id}, send_data);
            send_data = Ext.apply({request_type: 'send_url_link'}, send_data);
            send_data = Ext.apply({addr: addr}, send_data);
            send_data = Ext.apply({url_list: url_list}, send_data);
            Ext.Ajax.request({
                url: 'tdx/updatedata.tdx',
                jsonData: send_data,
                method: 'POST',
                success: handleSuccess,
                failure: handleFailure
            });
            this.close();

        }
        function handleSuccess(response) {
            obj = Ext.decode(response.responseText);
            var request_success = obj.success;

            if (request_success === false) {
                var request_errors = obj.errors;
                Ext.Msg.show({
                    title: 'URLリンクの作成失敗',
                    msg: request_errors,
                    buttons: Ext.Msg.OK
                });
            } else {
                console.log('success');
            }
            return;
        }

        function handleFailure(response) {
            Ext.Msg.show({
                title: 'URLリンクの作成失敗',
                msg: 'サーバとの通信に失敗しました',
                buttons: Ext.Msg.OK
            });
        }
    },
    onButtonClick1: function (button, e, eOpts) {
        this.close();
    }

});